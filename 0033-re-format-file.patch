From 72462ac65051cdc245dfe50e744bd5a8cbc02672 Mon Sep 17 00:00:00 2001
From: Jose Martinez <jmart652@montgomerycollege.edu>
Date: Sun, 29 Jun 2025 03:02:24 -0400
Subject: [PATCH 33/60] re-format file

---
 .../net/minecraft/network/NetworkManager.java | 332 +++++++-----------
 1 file changed, 119 insertions(+), 213 deletions(-)

diff --git a/src/main/java/net/minecraft/network/NetworkManager.java b/src/main/java/net/minecraft/network/NetworkManager.java
index f51765b..ad14d54 100644
--- a/src/main/java/net/minecraft/network/NetworkManager.java
+++ b/src/main/java/net/minecraft/network/NetworkManager.java
@@ -49,30 +49,23 @@ import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
-public class NetworkManager extends SimpleChannelInboundHandler<Packet>
-{
+public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     private static final Logger logger = LogManager.getLogger();
     public static final Marker logMarkerNetwork = MarkerManager.getMarker("NETWORK");
     public static final Marker logMarkerPackets = MarkerManager.getMarker("NETWORK_PACKETS", logMarkerNetwork);
     public static final AttributeKey<EnumConnectionState> attrKeyConnectionState = AttributeKey.<EnumConnectionState>valueOf("protocol");
-    public static final LazyLoadBase<NioEventLoopGroup> CLIENT_NIO_EVENTLOOP = new LazyLoadBase<NioEventLoopGroup>()
-    {
-        protected NioEventLoopGroup load()
-        {
+    public static final LazyLoadBase<NioEventLoopGroup> CLIENT_NIO_EVENTLOOP = new LazyLoadBase<NioEventLoopGroup>() {
+        protected NioEventLoopGroup load() {
             return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Client IO #%d").setDaemon(true).build());
         }
     };
-    public static final LazyLoadBase<EpollEventLoopGroup> CLIENT_EPOLL_EVENTLOOP = new LazyLoadBase<EpollEventLoopGroup>()
-    {
-        protected EpollEventLoopGroup load()
-        {
+    public static final LazyLoadBase<EpollEventLoopGroup> CLIENT_EPOLL_EVENTLOOP = new LazyLoadBase<EpollEventLoopGroup>() {
+        protected EpollEventLoopGroup load() {
             return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Client IO #%d").setDaemon(true).build());
         }
     };
-    public static final LazyLoadBase<LocalEventLoopGroup> CLIENT_LOCAL_EVENTLOOP = new LazyLoadBase<LocalEventLoopGroup>()
-    {
-        protected LocalEventLoopGroup load()
-        {
+    public static final LazyLoadBase<LocalEventLoopGroup> CLIENT_LOCAL_EVENTLOOP = new LazyLoadBase<LocalEventLoopGroup>() {
+        protected LocalEventLoopGroup load() {
             return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Client IO #%d").setDaemon(true).build());
         }
     };
@@ -80,82 +73,74 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
     private final Queue<NetworkManager.InboundHandlerTuplePacketListener> outboundPacketsQueue = Queues.<NetworkManager.InboundHandlerTuplePacketListener>newConcurrentLinkedQueue();
     private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();
 
-    /** The active channel */
+    /**
+     * The active channel
+     */
     private Channel channel;
 
-    /** The address of the remote party */
+    /**
+     * The address of the remote party
+     */
     private SocketAddress socketAddress;
 
-    /** The INetHandler instance responsible for processing received packets */
+    /**
+     * The INetHandler instance responsible for processing received packets
+     */
     private INetHandler packetListener;
 
-    /** A String indicating why the network has shutdown. */
+    /**
+     * A String indicating why the network has shutdown.
+     */
     private IChatComponent terminationReason;
     private boolean isEncrypted;
     private boolean disconnected;
 
-    public NetworkManager(EnumPacketDirection packetDirection)
-    {
+    public NetworkManager(EnumPacketDirection packetDirection) {
         this.direction = packetDirection;
     }
 
-    public void channelActive(ChannelHandlerContext p_channelActive_1_) throws Exception
-    {
+    public void channelActive(ChannelHandlerContext p_channelActive_1_) throws Exception {
         super.channelActive(p_channelActive_1_);
         this.channel = p_channelActive_1_.channel();
         this.socketAddress = this.channel.remoteAddress();
 
-        try
-        {
+        try {
             this.setConnectionState(EnumConnectionState.HANDSHAKING);
-        }
-        catch (Throwable throwable)
-        {
-            logger.fatal((Object)throwable);
+        } catch (Throwable throwable) {
+            logger.fatal((Object) throwable);
         }
     }
 
     /**
      * Sets the new connection state and registers which packets this channel may send and receive
      */
-    public void setConnectionState(EnumConnectionState newState)
-    {
+    public void setConnectionState(EnumConnectionState newState) {
         this.channel.attr(attrKeyConnectionState).set(newState);
         this.channel.config().setAutoRead(true);
         logger.debug("Enabled auto read");
     }
 
-    public void channelInactive(ChannelHandlerContext p_channelInactive_1_) throws Exception
-    {
+    public void channelInactive(ChannelHandlerContext p_channelInactive_1_) throws Exception {
         this.closeChannel(new ChatComponentTranslation("disconnect.endOfStream", new Object[0]));
     }
 
-    public void exceptionCaught(ChannelHandlerContext p_exceptionCaught_1_, Throwable p_exceptionCaught_2_) throws Exception
-    {
+    public void exceptionCaught(ChannelHandlerContext p_exceptionCaught_1_, Throwable p_exceptionCaught_2_) throws Exception {
         ChatComponentTranslation chatcomponenttranslation;
 
-        if (p_exceptionCaught_2_ instanceof TimeoutException)
-        {
+        if (p_exceptionCaught_2_ instanceof TimeoutException) {
             chatcomponenttranslation = new ChatComponentTranslation("disconnect.timeout", new Object[0]);
-        }
-        else
-        {
-            chatcomponenttranslation = new ChatComponentTranslation("disconnect.genericReason", new Object[] {"Internal Exception: " + p_exceptionCaught_2_});
+        } else {
+            chatcomponenttranslation = new ChatComponentTranslation("disconnect.genericReason", new Object[]{"Internal Exception: " + p_exceptionCaught_2_});
         }
 
         this.closeChannel(chatcomponenttranslation);
     }
 
-    protected void channelRead0(ChannelHandlerContext p_channelRead0_1_, Packet p_channelRead0_2_) throws Exception
-    {
-        if (this.channel.isOpen())
-        {
-            try
-            {
-                p_channelRead0_2_.processPacket(this.packetListener);
-            }
-            catch (ThreadQuickExitException var4)
-            {
+    protected void channelRead0(ChannelHandlerContext handler, Packet packet) {
+        if (this.channel.isOpen()) {
+            try {
+                packet.processPacket(this.packetListener);
+            } catch (ThreadQuickExitException var4) {
                 ;
             }
         }
@@ -165,52 +150,37 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
      * Sets the NetHandler for this NetworkManager, no checks are made if this handler is suitable for the particular
      * connection state (protocol)
      */
-    public void setNetHandler(INetHandler handler)
-    {
+    public void setNetHandler(INetHandler handler) {
         Validate.notNull(handler, "packetListener", new Object[0]);
-        logger.debug("Set listener of {} to {}", new Object[] {this, handler});
+        logger.debug("Set listener of {} to {}", new Object[]{this, handler});
         this.packetListener = handler;
     }
 
-    public void sendPacket(Packet packetIn)
-    {
-        if (this.isChannelOpen())
-        {
+    public void sendPacket(Packet packetIn) {
+        if (this.isChannelOpen()) {
             this.flushOutboundQueue();
-            this.dispatchPacket(packetIn, (GenericFutureListener <? extends Future <? super Void >> [])null);
-        }
-        else
-        {
+            this.dispatchPacket(packetIn, (GenericFutureListener<? extends Future<? super Void>>[]) null);
+        } else {
             this.readWriteLock.writeLock().lock();
 
-            try
-            {
-                this.outboundPacketsQueue.add(new NetworkManager.InboundHandlerTuplePacketListener(packetIn, (GenericFutureListener[])null));
-            }
-            finally
-            {
+            try {
+                this.outboundPacketsQueue.add(new NetworkManager.InboundHandlerTuplePacketListener(packetIn, (GenericFutureListener[]) null));
+            } finally {
                 this.readWriteLock.writeLock().unlock();
             }
         }
     }
 
-    public void sendPacket(Packet packetIn, GenericFutureListener <? extends Future <? super Void >> listener, GenericFutureListener <? extends Future <? super Void >> ... listeners)
-    {
-        if (this.isChannelOpen())
-        {
+    public void sendPacket(Packet packetIn, GenericFutureListener<? extends Future<? super Void>> listener, GenericFutureListener<? extends Future<? super Void>>... listeners) {
+        if (this.isChannelOpen()) {
             this.flushOutboundQueue();
-            this.dispatchPacket(packetIn, (GenericFutureListener[])ArrayUtils.add(listeners, 0, listener));
-        }
-        else
-        {
+            this.dispatchPacket(packetIn, (GenericFutureListener[]) ArrayUtils.add(listeners, 0, listener));
+        } else {
             this.readWriteLock.writeLock().lock();
 
-            try
-            {
-                this.outboundPacketsQueue.add(new NetworkManager.InboundHandlerTuplePacketListener(packetIn, (GenericFutureListener[])ArrayUtils.add(listeners, 0, listener)));
-            }
-            finally
-            {
+            try {
+                this.outboundPacketsQueue.add(new NetworkManager.InboundHandlerTuplePacketListener(packetIn, (GenericFutureListener[]) ArrayUtils.add(listeners, 0, listener)));
+            } finally {
                 this.readWriteLock.writeLock().unlock();
             }
         }
@@ -220,48 +190,37 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
      * Will commit the packet to the channel. If the current thread 'owns' the channel it will write and flush the
      * packet, otherwise it will add a task for the channel eventloop thread to do that.
      */
-    private void dispatchPacket(final Packet inPacket, final GenericFutureListener <? extends Future <? super Void >> [] futureListeners)
-    {
+    private void dispatchPacket(final Packet inPacket, final GenericFutureListener<? extends Future<? super Void>>[] futureListeners) {
         final EnumConnectionState enumconnectionstate = EnumConnectionState.getFromPacket(inPacket);
-        final EnumConnectionState enumconnectionstate1 = (EnumConnectionState)this.channel.attr(attrKeyConnectionState).get();
+        final EnumConnectionState enumconnectionstate1 = (EnumConnectionState) this.channel.attr(attrKeyConnectionState).get();
 
-        if (enumconnectionstate1 != enumconnectionstate)
-        {
+        if (enumconnectionstate1 != enumconnectionstate) {
             logger.debug("Disabled auto read");
             this.channel.config().setAutoRead(false);
         }
 
-        if (this.channel.eventLoop().inEventLoop())
-        {
-            if (enumconnectionstate != enumconnectionstate1)
-            {
+        if (this.channel.eventLoop().inEventLoop()) {
+            if (enumconnectionstate != enumconnectionstate1) {
                 this.setConnectionState(enumconnectionstate);
             }
 
             ChannelFuture channelfuture = this.channel.writeAndFlush(inPacket);
 
-            if (futureListeners != null)
-            {
+            if (futureListeners != null) {
                 channelfuture.addListeners(futureListeners);
             }
 
             channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
-        }
-        else
-        {
-            this.channel.eventLoop().execute(new Runnable()
-            {
-                public void run()
-                {
-                    if (enumconnectionstate != enumconnectionstate1)
-                    {
+        } else {
+            this.channel.eventLoop().execute(new Runnable() {
+                public void run() {
+                    if (enumconnectionstate != enumconnectionstate1) {
                         NetworkManager.this.setConnectionState(enumconnectionstate);
                     }
 
                     ChannelFuture channelfuture1 = NetworkManager.this.channel.writeAndFlush(inPacket);
 
-                    if (futureListeners != null)
-                    {
+                    if (futureListeners != null) {
                         channelfuture1.addListeners(futureListeners);
                     }
 
@@ -274,22 +233,16 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
     /**
      * Will iterate through the outboundPacketQueue and dispatch all Packets
      */
-    private void flushOutboundQueue()
-    {
-        if (this.channel != null && this.channel.isOpen())
-        {
+    private void flushOutboundQueue() {
+        if (this.channel != null && this.channel.isOpen()) {
             this.readWriteLock.readLock().lock();
 
-            try
-            {
-                while (!this.outboundPacketsQueue.isEmpty())
-                {
-                    NetworkManager.InboundHandlerTuplePacketListener networkmanager$inboundhandlertuplepacketlistener = (NetworkManager.InboundHandlerTuplePacketListener)this.outboundPacketsQueue.poll();
+            try {
+                while (!this.outboundPacketsQueue.isEmpty()) {
+                    NetworkManager.InboundHandlerTuplePacketListener networkmanager$inboundhandlertuplepacketlistener = (NetworkManager.InboundHandlerTuplePacketListener) this.outboundPacketsQueue.poll();
                     this.dispatchPacket(networkmanager$inboundhandlertuplepacketlistener.packet, networkmanager$inboundhandlertuplepacketlistener.futureListeners);
                 }
-            }
-            finally
-            {
+            } finally {
                 this.readWriteLock.readLock().unlock();
             }
         }
@@ -298,13 +251,11 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
     /**
      * Checks timeouts and processes all packets received
      */
-    public void processReceivedPackets()
-    {
+    public void processReceivedPackets() {
         this.flushOutboundQueue();
 
-        if (this.packetListener instanceof ITickable)
-        {
-            ((ITickable)this.packetListener).update();
+        if (this.packetListener instanceof ITickable) {
+            ((ITickable) this.packetListener).update();
         }
 
         this.channel.flush();
@@ -313,18 +264,15 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
     /**
      * Returns the socket address of the remote side. Server-only.
      */
-    public SocketAddress getRemoteAddress()
-    {
+    public SocketAddress getRemoteAddress() {
         return this.socketAddress;
     }
 
     /**
      * Closes the channel, the parameter can be used for an exit message (not certain how it gets sent)
      */
-    public void closeChannel(IChatComponent message)
-    {
-        if (this.channel.isOpen())
-        {
+    public void closeChannel(IChatComponent message) {
+        if (this.channel.isOpen()) {
             this.channel.close().awaitUninterruptibly();
             this.terminationReason = message;
         }
@@ -334,49 +282,39 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
      * True if this NetworkManager uses a memory connection (single player game). False may imply both an active TCP
      * connection or simply no active connection at all
      */
-    public boolean isLocalChannel()
-    {
+    public boolean isLocalChannel() {
         return this.channel instanceof LocalChannel || this.channel instanceof LocalServerChannel;
     }
 
     /**
      * Create a new NetworkManager from the server host and connect it to the server
-     *  
-     * @param address The address of the server
-     * @param serverPort The server port
+     *
+     * @param address            The address of the server
+     * @param serverPort         The server port
      * @param useNativeTransport True if the client use the native transport system
      */
-    public static NetworkManager createNetworkManagerAndConnect(InetAddress address, int serverPort, boolean useNativeTransport)
-    {
+    public static NetworkManager createNetworkManagerAndConnect(InetAddress address, int serverPort, boolean useNativeTransport) {
         final NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.CLIENTBOUND);
-        Class <? extends SocketChannel > oclass;
-        LazyLoadBase <? extends EventLoopGroup > lazyloadbase;
+        Class<? extends SocketChannel> oclass;
+        LazyLoadBase<? extends EventLoopGroup> lazyloadbase;
 
-        if (Epoll.isAvailable() && useNativeTransport)
-        {
+        if (Epoll.isAvailable() && useNativeTransport) {
             oclass = EpollSocketChannel.class;
             lazyloadbase = CLIENT_EPOLL_EVENTLOOP;
-        }
-        else
-        {
+        } else {
             oclass = NioSocketChannel.class;
             lazyloadbase = CLIENT_NIO_EVENTLOOP;
         }
 
-        ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group((EventLoopGroup)lazyloadbase.getValue())).handler(new ChannelInitializer<Channel>()
-        {
-            protected void initChannel(Channel p_initChannel_1_) throws Exception
-            {
-                try
-                {
+        ((Bootstrap) ((Bootstrap) ((Bootstrap) (new Bootstrap()).group((EventLoopGroup) lazyloadbase.getValue())).handler(new ChannelInitializer<Channel>() {
+            protected void initChannel(Channel p_initChannel_1_) throws Exception {
+                try {
                     p_initChannel_1_.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
-                }
-                catch (ChannelException var3)
-                {
+                } catch (ChannelException var3) {
                     ;
                 }
 
-                p_initChannel_1_.pipeline().addLast((String)"timeout", (ChannelHandler)(new ReadTimeoutHandler(30))).addLast((String)"splitter", (ChannelHandler)(new MessageDeserializer2())).addLast((String)"decoder", (ChannelHandler)(new MessageDeserializer(EnumPacketDirection.CLIENTBOUND))).addLast((String)"prepender", (ChannelHandler)(new MessageSerializer2())).addLast((String)"encoder", (ChannelHandler)(new MessageSerializer(EnumPacketDirection.SERVERBOUND))).addLast((String)"packet_handler", (ChannelHandler)networkmanager);
+                p_initChannel_1_.pipeline().addLast((String) "timeout", (ChannelHandler) (new ReadTimeoutHandler(30))).addLast((String) "splitter", (ChannelHandler) (new MessageDeserializer2())).addLast((String) "decoder", (ChannelHandler) (new MessageDeserializer(EnumPacketDirection.CLIENTBOUND))).addLast((String) "prepender", (ChannelHandler) (new MessageSerializer2())).addLast((String) "encoder", (ChannelHandler) (new MessageSerializer(EnumPacketDirection.SERVERBOUND))).addLast((String) "packet_handler", (ChannelHandler) networkmanager);
             }
         })).channel(oclass)).connect(address, serverPort).syncUninterruptibly();
         return networkmanager;
@@ -386,14 +324,11 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
      * Prepares a clientside NetworkManager: establishes a connection to the socket supplied and configures the channel
      * pipeline. Returns the newly created instance.
      */
-    public static NetworkManager provideLocalClient(SocketAddress address)
-    {
+    public static NetworkManager provideLocalClient(SocketAddress address) {
         final NetworkManager networkmanager = new NetworkManager(EnumPacketDirection.CLIENTBOUND);
-        ((Bootstrap)((Bootstrap)((Bootstrap)(new Bootstrap()).group((EventLoopGroup)CLIENT_LOCAL_EVENTLOOP.getValue())).handler(new ChannelInitializer<Channel>()
-        {
-            protected void initChannel(Channel p_initChannel_1_) throws Exception
-            {
-                p_initChannel_1_.pipeline().addLast((String)"packet_handler", (ChannelHandler)networkmanager);
+        ((Bootstrap) ((Bootstrap) ((Bootstrap) (new Bootstrap()).group((EventLoopGroup) CLIENT_LOCAL_EVENTLOOP.getValue())).handler(new ChannelInitializer<Channel>() {
+            protected void initChannel(Channel p_initChannel_1_) throws Exception {
+                p_initChannel_1_.pipeline().addLast((String) "packet_handler", (ChannelHandler) networkmanager);
             }
         })).channel(LocalChannel.class)).connect(address).syncUninterruptibly();
         return networkmanager;
@@ -402,122 +337,93 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet>
     /**
      * Adds an encoder+decoder to the channel pipeline. The parameter is the secret key used for encrypted communication
      */
-    public void enableEncryption(SecretKey key)
-    {
+    public void enableEncryption(SecretKey key) {
         this.isEncrypted = true;
         this.channel.pipeline().addBefore("splitter", "decrypt", new NettyEncryptingDecoder(CryptManager.createNetCipherInstance(2, key)));
         this.channel.pipeline().addBefore("prepender", "encrypt", new NettyEncryptingEncoder(CryptManager.createNetCipherInstance(1, key)));
     }
 
-    public boolean getIsencrypted()
-    {
+    public boolean getIsencrypted() {
         return this.isEncrypted;
     }
 
     /**
      * Returns true if this NetworkManager has an active channel, false otherwise
      */
-    public boolean isChannelOpen()
-    {
+    public boolean isChannelOpen() {
         return this.channel != null && this.channel.isOpen();
     }
 
-    public boolean hasNoChannel()
-    {
+    public boolean hasNoChannel() {
         return this.channel == null;
     }
 
     /**
      * Gets the current handler for processing packets
      */
-    public INetHandler getNetHandler()
-    {
+    public INetHandler getNetHandler() {
         return this.packetListener;
     }
 
     /**
      * If this channel is closed, returns the exit message, null otherwise.
      */
-    public IChatComponent getExitMessage()
-    {
+    public IChatComponent getExitMessage() {
         return this.terminationReason;
     }
 
     /**
      * Switches the channel to manual reading modus
      */
-    public void disableAutoRead()
-    {
+    public void disableAutoRead() {
         this.channel.config().setAutoRead(false);
     }
 
-    public void setCompressionTreshold(int treshold)
-    {
-        if (treshold >= 0)
-        {
-            if (this.channel.pipeline().get("decompress") instanceof NettyCompressionDecoder)
-            {
-                ((NettyCompressionDecoder)this.channel.pipeline().get("decompress")).setCompressionTreshold(treshold);
-            }
-            else
-            {
+    public void setCompressionTreshold(int treshold) {
+        if (treshold >= 0) {
+            if (this.channel.pipeline().get("decompress") instanceof NettyCompressionDecoder) {
+                ((NettyCompressionDecoder) this.channel.pipeline().get("decompress")).setCompressionTreshold(treshold);
+            } else {
                 this.channel.pipeline().addBefore("decoder", "decompress", new NettyCompressionDecoder(treshold));
             }
 
-            if (this.channel.pipeline().get("compress") instanceof NettyCompressionEncoder)
-            {
-                ((NettyCompressionEncoder)this.channel.pipeline().get("decompress")).setCompressionTreshold(treshold);
-            }
-            else
-            {
+            if (this.channel.pipeline().get("compress") instanceof NettyCompressionEncoder) {
+                ((NettyCompressionEncoder) this.channel.pipeline().get("decompress")).setCompressionTreshold(treshold);
+            } else {
                 this.channel.pipeline().addBefore("encoder", "compress", new NettyCompressionEncoder(treshold));
             }
-        }
-        else
-        {
-            if (this.channel.pipeline().get("decompress") instanceof NettyCompressionDecoder)
-            {
+        } else {
+            if (this.channel.pipeline().get("decompress") instanceof NettyCompressionDecoder) {
                 this.channel.pipeline().remove("decompress");
             }
 
-            if (this.channel.pipeline().get("compress") instanceof NettyCompressionEncoder)
-            {
+            if (this.channel.pipeline().get("compress") instanceof NettyCompressionEncoder) {
                 this.channel.pipeline().remove("compress");
             }
         }
     }
 
-    public void checkDisconnected()
-    {
-        if (this.channel != null && !this.channel.isOpen())
-        {
-            if (!this.disconnected)
-            {
+    public void checkDisconnected() {
+        if (this.channel != null && !this.channel.isOpen()) {
+            if (!this.disconnected) {
                 this.disconnected = true;
 
-                if (this.getExitMessage() != null)
-                {
+                if (this.getExitMessage() != null) {
                     this.getNetHandler().onDisconnect(this.getExitMessage());
-                }
-                else if (this.getNetHandler() != null)
-                {
+                } else if (this.getNetHandler() != null) {
                     this.getNetHandler().onDisconnect(new ChatComponentText("Disconnected"));
                 }
-            }
-            else
-            {
+            } else {
                 logger.warn("handleDisconnection() called twice");
             }
         }
     }
 
-    static class InboundHandlerTuplePacketListener
-    {
+    static class InboundHandlerTuplePacketListener {
         private final Packet packet;
-        private final GenericFutureListener <? extends Future <? super Void >> [] futureListeners;
+        private final GenericFutureListener<? extends Future<? super Void>>[] futureListeners;
 
-        public InboundHandlerTuplePacketListener(Packet inPacket, GenericFutureListener <? extends Future <? super Void >> ... inFutureListeners)
-        {
+        public InboundHandlerTuplePacketListener(Packet inPacket, GenericFutureListener<? extends Future<? super Void>>... inFutureListeners) {
             this.packet = inPacket;
             this.futureListeners = inFutureListeners;
         }
-- 
2.34.1

