From 653c9a571739d8478b618c89f51fa6c33f818d62 Mon Sep 17 00:00:00 2001
From: Jose Martinez <jmart652@montgomerycollege.edu>
Date: Thu, 26 Jun 2025 06:44:31 -0400
Subject: [PATCH 14/60] Use IRenderManager and IItemRenderer interfaces, fix
 item stitching

---
 .../java/com/jlmsz/module/ModuleRegistry.java |   15 +-
 .../java/net/minecraft/client/Minecraft.java  |  175 +--
 .../client/entity/EntityPlayerSP.java         |  554 +++----
 .../client/gui/inventory/GuiInventory.java    |    4 +-
 .../minecraft/client/model/ModelRenderer.java |    1 +
 .../client/particle/EntityPickupFX.java       |    3 +-
 .../client/particle/MobAppearance.java        |    3 +-
 .../client/renderer/EntityRenderer.java       |    4 +-
 .../client/renderer/ItemRenderer.java         |  321 ++--
 .../client/renderer/RenderGlobal.java         |    3 +-
 .../block/model/ItemModelGenerator.java       |  257 ++--
 .../renderer/entity/ArmorStandRenderer.java   |    3 +-
 .../client/renderer/entity/Render.java        |  242 ++-
 .../client/renderer/entity/RenderArrow.java   |    3 +-
 .../client/renderer/entity/RenderBat.java     |    3 +-
 .../client/renderer/entity/RenderBiped.java   |    5 +-
 .../client/renderer/entity/RenderBlaze.java   |    3 +-
 .../client/renderer/entity/RenderBoat.java    |    3 +-
 .../renderer/entity/RenderCaveSpider.java     |    3 +-
 .../client/renderer/entity/RenderChicken.java |    3 +-
 .../client/renderer/entity/RenderCow.java     |    3 +-
 .../client/renderer/entity/RenderCreeper.java |    3 +-
 .../client/renderer/entity/RenderDragon.java  |    3 +-
 .../renderer/entity/RenderEnderman.java       |    4 +-
 .../renderer/entity/RenderEndermite.java      |    3 +-
 .../client/renderer/entity/RenderEntity.java  |    3 +-
 .../renderer/entity/RenderEntityItem.java     |   10 +-
 .../renderer/entity/RenderFallingBlock.java   |    3 +-
 .../renderer/entity/RenderFireball.java       |    7 +-
 .../client/renderer/entity/RenderFish.java    |    9 +-
 .../client/renderer/entity/RenderGhast.java   |    3 +-
 .../renderer/entity/RenderGiantZombie.java    |    3 +-
 .../renderer/entity/RenderGuardian.java       |    3 +-
 .../client/renderer/entity/RenderHorse.java   |    4 +-
 .../renderer/entity/RenderIronGolem.java      |    3 +-
 .../client/renderer/entity/RenderItem.java    |  490 +++---
 .../renderer/entity/RenderLeashKnot.java      |    3 +-
 .../renderer/entity/RenderLightningBolt.java  |    4 +-
 .../client/renderer/entity/RenderLiving.java  |    5 +-
 .../renderer/entity/RenderMagmaCube.java      |    3 +-
 .../client/renderer/entity/RenderManager.java |   45 +-
 .../renderer/entity/RenderMinecart.java       |    3 +-
 .../entity/RenderMinecartMobSpawner.java      |    3 +-
 .../renderer/entity/RenderMooshroom.java      |    3 +-
 .../client/renderer/entity/RenderOcelot.java  |    3 +-
 .../renderer/entity/RenderPainting.java       |    5 +-
 .../client/renderer/entity/RenderPig.java     |    3 +-
 .../renderer/entity/RenderPigZombie.java      |    3 +-
 .../client/renderer/entity/RenderPlayer.java  |    7 +-
 .../client/renderer/entity/RenderPotion.java  |    3 +-
 .../client/renderer/entity/RenderRabbit.java  |    3 +-
 .../client/renderer/entity/RenderSheep.java   |    3 +-
 .../renderer/entity/RenderSilverfish.java     |    3 +-
 .../renderer/entity/RenderSkeleton.java       |    3 +-
 .../client/renderer/entity/RenderSlime.java   |    3 +-
 .../client/renderer/entity/RenderSnowMan.java |    3 +-
 .../renderer/entity/RenderSnowball.java       |    7 +-
 .../client/renderer/entity/RenderSpider.java  |    3 +-
 .../client/renderer/entity/RenderSquid.java   |    3 +-
 .../renderer/entity/RenderTNTPrimed.java      |    3 +-
 .../renderer/entity/RenderTntMinecart.java    |    3 +-
 .../renderer/entity/RenderVillager.java       |    3 +-
 .../client/renderer/entity/RenderWitch.java   |    3 +-
 .../client/renderer/entity/RenderWither.java  |    3 +-
 .../client/renderer/entity/RenderWolf.java    |    3 +-
 .../client/renderer/entity/RenderXPOrb.java   |    7 +-
 .../client/renderer/entity/RenderZombie.java  |    4 +-
 .../renderer/entity/RendererLivingEntity.java |   12 +-
 .../tileentity/RenderEnderCrystal.java        |    3 +-
 .../renderer/tileentity/RenderItemFrame.java  |   17 +-
 .../tileentity/RenderWitherSkull.java         |    3 +-
 .../minecraft/entity/EntityLivingBase.java    | 1370 ++++++-----------
 .../minecraft/entity/player/EntityPlayer.java |   13 +
 .../entity/model/CustomEntityModels.java      |    4 +-
 .../entity/model/ModelAdapterArmorStand.java  |    3 +-
 .../entity/model/ModelAdapterBat.java         |    3 +-
 .../entity/model/ModelAdapterBlaze.java       |    3 +-
 .../entity/model/ModelAdapterBoat.java        |    3 +-
 .../entity/model/ModelAdapterCaveSpider.java  |    3 +-
 .../entity/model/ModelAdapterChicken.java     |    3 +-
 .../entity/model/ModelAdapterCow.java         |    3 +-
 .../entity/model/ModelAdapterCreeper.java     |    3 +-
 .../entity/model/ModelAdapterDragon.java      |    3 +-
 .../model/ModelAdapterEnderCrystal.java       |    3 +-
 .../entity/model/ModelAdapterEnderman.java    |    3 +-
 .../entity/model/ModelAdapterEndermite.java   |    3 +-
 .../entity/model/ModelAdapterGhast.java       |    3 +-
 .../entity/model/ModelAdapterGuardian.java    |    3 +-
 .../entity/model/ModelAdapterHorse.java       |    4 +-
 .../entity/model/ModelAdapterIronGolem.java   |    3 +-
 .../entity/model/ModelAdapterLeadKnot.java    |    3 +-
 .../entity/model/ModelAdapterMagmaCube.java   |    3 +-
 .../entity/model/ModelAdapterMinecart.java    |    3 +-
 .../model/ModelAdapterMinecartMobSpawner.java |    3 +-
 .../entity/model/ModelAdapterMinecartTnt.java |    3 +-
 .../entity/model/ModelAdapterMooshroom.java   |    3 +-
 .../entity/model/ModelAdapterOcelot.java      |    4 +-
 .../entity/model/ModelAdapterPig.java         |    3 +-
 .../entity/model/ModelAdapterPigZombie.java   |    3 +-
 .../entity/model/ModelAdapterRabbit.java      |    4 +-
 .../entity/model/ModelAdapterSheep.java       |    3 +-
 .../entity/model/ModelAdapterSheepWool.java   |    4 +-
 .../entity/model/ModelAdapterSilverfish.java  |    3 +-
 .../entity/model/ModelAdapterSkeleton.java    |    3 +-
 .../entity/model/ModelAdapterSlime.java       |    3 +-
 .../entity/model/ModelAdapterSnowman.java     |    3 +-
 .../entity/model/ModelAdapterSpider.java      |    3 +-
 .../entity/model/ModelAdapterSquid.java       |    3 +-
 .../entity/model/ModelAdapterVillager.java    |    3 +-
 .../entity/model/ModelAdapterWitch.java       |    3 +-
 .../entity/model/ModelAdapterWither.java      |    3 +-
 .../entity/model/ModelAdapterWitherSkull.java |    3 +-
 .../entity/model/ModelAdapterWolf.java        |    3 +-
 .../entity/model/ModelAdapterZombie.java      |    3 +-
 .../model/anim/RenderEntityParameterBool.java |    5 +-
 .../anim/RenderEntityParameterFloat.java      |    5 +-
 .../net/optifine/shaders/ShadersRender.java   |    4 +-
 .../shaders/uniform/ShaderParameterBool.java  |    3 +-
 118 files changed, 1613 insertions(+), 2265 deletions(-)

diff --git a/src/main/java/com/jlmsz/module/ModuleRegistry.java b/src/main/java/com/jlmsz/module/ModuleRegistry.java
index 2f7d94c..860b082 100644
--- a/src/main/java/com/jlmsz/module/ModuleRegistry.java
+++ b/src/main/java/com/jlmsz/module/ModuleRegistry.java
@@ -1,7 +1,6 @@
 package com.jlmsz.module;
 
-import com.jlmsz.module.impl.CrosshairModule;
-import com.jlmsz.module.impl.SprintModule;
+import com.jlmsz.module.impl.*;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -12,7 +11,17 @@ public class ModuleRegistry {
     private static List<Module> moduleList;
 
     public static void init() {
-        moduleList = Arrays.asList(new SprintModule(), new CrosshairModule());
+        moduleList = Arrays.asList(new SprintModule(), new CrosshairModule(), new FullbrightModule(), new HitboxesModule(), new OldCombatModule());
+    }
+
+    public static <T extends Module> T getModuleByClass(Class<T> clazz) {
+        for (Module module : moduleList) {
+            if (module.getClass().equals(clazz)) {
+                return clazz.cast(module);
+            }
+        }
+
+        return null;
     }
 
     public static Module getModuleByName(String name) {
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 627bf44..19cec7b 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -11,50 +11,21 @@ import com.jlmsz.JClient;
 import com.jlmsz.event.impl.GameStartedEvent;
 import com.jlmsz.event.impl.RenderEvent;
 import com.jlmsz.gui.settings.SettingsGui;
+import com.jlmsz.module.ModuleRegistry;
+import com.jlmsz.module.impl.OldCombatModule;
+import com.jlmsz.util.renderer.IItemRenderer;
+import com.jlmsz.util.renderer.IRenderManager;
+import com.jlmsz.util.renderer.ItemRendererProxy;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.properties.PropertyMap;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
-
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.Proxy;
-import java.net.SocketAddress;
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import java.text.DecimalFormat;
-import java.text.SimpleDateFormat;
-import java.util.Collections;
-import java.util.Date;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Queue;
-import java.util.Set;
-import java.util.UUID;
-import java.util.concurrent.Callable;
-import java.util.concurrent.Executors;
-import java.util.concurrent.FutureTask;
-import javax.imageio.ImageIO;
-
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.audio.MusicTicker;
 import net.minecraft.client.audio.SoundHandler;
 import net.minecraft.client.entity.EntityPlayerSP;
-import net.minecraft.client.gui.FontRenderer;
-import net.minecraft.client.gui.GuiChat;
-import net.minecraft.client.gui.GuiControls;
-import net.minecraft.client.gui.GuiGameOver;
-import net.minecraft.client.gui.GuiIngame;
-import net.minecraft.client.gui.GuiIngameMenu;
-import net.minecraft.client.gui.GuiMainMenu;
-import net.minecraft.client.gui.GuiMemoryErrorScreen;
-import net.minecraft.client.gui.GuiScreen;
-import net.minecraft.client.gui.GuiSleepMP;
-import net.minecraft.client.gui.ScaledResolution;
+import net.minecraft.client.gui.*;
 import net.minecraft.client.gui.achievement.GuiAchievement;
 import net.minecraft.client.gui.inventory.GuiInventory;
 import net.minecraft.client.main.GameConfiguration;
@@ -65,14 +36,7 @@ import net.minecraft.client.multiplayer.WorldClient;
 import net.minecraft.client.network.NetHandlerLoginClient;
 import net.minecraft.client.network.NetHandlerPlayClient;
 import net.minecraft.client.particle.EffectRenderer;
-import net.minecraft.client.renderer.BlockRendererDispatcher;
-import net.minecraft.client.renderer.EntityRenderer;
-import net.minecraft.client.renderer.GlStateManager;
-import net.minecraft.client.renderer.ItemRenderer;
-import net.minecraft.client.renderer.OpenGlHelper;
-import net.minecraft.client.renderer.RenderGlobal;
-import net.minecraft.client.renderer.Tessellator;
-import net.minecraft.client.renderer.WorldRenderer;
+import net.minecraft.client.renderer.*;
 import net.minecraft.client.renderer.chunk.RenderChunk;
 import net.minecraft.client.renderer.entity.RenderItem;
 import net.minecraft.client.renderer.entity.RenderManager;
@@ -80,29 +44,8 @@ import net.minecraft.client.renderer.texture.DynamicTexture;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
-import net.minecraft.client.resources.DefaultResourcePack;
-import net.minecraft.client.resources.FoliageColorReloadListener;
-import net.minecraft.client.resources.GrassColorReloadListener;
-import net.minecraft.client.resources.I18n;
-import net.minecraft.client.resources.IReloadableResourceManager;
-import net.minecraft.client.resources.IResourceManager;
-import net.minecraft.client.resources.IResourcePack;
-import net.minecraft.client.resources.LanguageManager;
-import net.minecraft.client.resources.ResourceIndex;
-import net.minecraft.client.resources.ResourcePackRepository;
-import net.minecraft.client.resources.SimpleReloadableResourceManager;
-import net.minecraft.client.resources.SkinManager;
-import net.minecraft.client.resources.data.AnimationMetadataSection;
-import net.minecraft.client.resources.data.AnimationMetadataSectionSerializer;
-import net.minecraft.client.resources.data.FontMetadataSection;
-import net.minecraft.client.resources.data.FontMetadataSectionSerializer;
-import net.minecraft.client.resources.data.IMetadataSerializer;
-import net.minecraft.client.resources.data.LanguageMetadataSection;
-import net.minecraft.client.resources.data.LanguageMetadataSectionSerializer;
-import net.minecraft.client.resources.data.PackMetadataSection;
-import net.minecraft.client.resources.data.PackMetadataSectionSerializer;
-import net.minecraft.client.resources.data.TextureMetadataSection;
-import net.minecraft.client.resources.data.TextureMetadataSectionSerializer;
+import net.minecraft.client.resources.*;
+import net.minecraft.client.resources.data.*;
 import net.minecraft.client.resources.model.ModelManager;
 import net.minecraft.client.settings.GameSettings;
 import net.minecraft.client.settings.KeyBinding;
@@ -113,11 +56,7 @@ import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLeashKnot;
 import net.minecraft.entity.EntityList;
 import net.minecraft.entity.boss.BossStatus;
-import net.minecraft.entity.item.EntityArmorStand;
-import net.minecraft.entity.item.EntityBoat;
-import net.minecraft.entity.item.EntityItemFrame;
-import net.minecraft.entity.item.EntityMinecart;
-import net.minecraft.entity.item.EntityPainting;
+import net.minecraft.entity.item.*;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
 import net.minecraft.init.Bootstrap;
@@ -142,20 +81,9 @@ import net.minecraft.stats.AchievementList;
 import net.minecraft.stats.IStatStringFormat;
 import net.minecraft.stats.StatFileWriter;
 import net.minecraft.tileentity.TileEntity;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.FrameTimer;
-import net.minecraft.util.IThreadListener;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.MinecraftError;
-import net.minecraft.util.MouseHelper;
-import net.minecraft.util.MovementInputFromOptions;
-import net.minecraft.util.MovingObjectPosition;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.ScreenShotHelper;
-import net.minecraft.util.Session;
 import net.minecraft.util.Timer;
 import net.minecraft.util.Util;
+import net.minecraft.util.*;
 import net.minecraft.world.EnumDifficulty;
 import net.minecraft.world.WorldProviderEnd;
 import net.minecraft.world.WorldProviderHell;
@@ -172,16 +100,25 @@ import org.lwjgl.LWJGLException;
 import org.lwjgl.Sys;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
-import org.lwjgl.opengl.ContextCapabilities;
-import org.lwjgl.opengl.Display;
-import org.lwjgl.opengl.DisplayMode;
-import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GL20;
-import org.lwjgl.opengl.GLContext;
-import org.lwjgl.opengl.OpenGLException;
-import org.lwjgl.opengl.PixelFormat;
+import org.lwjgl.opengl.*;
 import org.lwjgl.util.glu.GLU;
 
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.Proxy;
+import java.net.SocketAddress;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.text.DecimalFormat;
+import java.text.SimpleDateFormat;
+import java.util.*;
+import java.util.concurrent.Callable;
+import java.util.concurrent.Executors;
+import java.util.concurrent.FutureTask;
+
 public class Minecraft implements IThreadListener, IPlayerUsage {
     private static final Logger logger = LogManager.getLogger();
     private static final ResourceLocation locationMojangPng = new ResourceLocation("textures/gui/title/mojang.png");
@@ -230,9 +167,9 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
     private PlayerUsageSnooper usageSnooper = new PlayerUsageSnooper("client", this, MinecraftServer.getCurrentTimeMillis());
     public WorldClient theWorld;
     public RenderGlobal renderGlobal;
-    private RenderManager renderManager;
+    private IRenderManager renderManager;
     private RenderItem renderItem;
-    private ItemRenderer itemRenderer;
+    private IItemRenderer itemRenderer;
     public EntityPlayerSP thePlayer;
     private Entity renderViewEntity;
     public Entity pointedEntity;
@@ -563,7 +500,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
         this.mcResourceManager.registerReloadListener(this.modelManager);
         this.renderItem = new RenderItem(this.renderEngine, this.modelManager);
         this.renderManager = new RenderManager(this.renderEngine, this.renderItem);
-        this.itemRenderer = new ItemRenderer(this);
+        this.itemRenderer = new ItemRendererProxy(this);//new ItemRendererLegacy(this);//new ItemRenderer(this);
         this.mcResourceManager.registerReloadListener(this.renderItem);
         this.entityRenderer = new EntityRenderer(this, this.mcResourceManager);
         this.mcResourceManager.registerReloadListener(this.entityRenderer);
@@ -1343,14 +1280,31 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
                 if (this.theWorld.getBlockState(blockpos).getBlock().getMaterial() != Material.air && this.playerController.onPlayerDamageBlock(blockpos, this.objectMouseOver.sideHit)) {
                     this.effectRenderer.addBlockHitEffects(blockpos, this.objectMouseOver.sideHit);
                     this.thePlayer.swingItem();
+
                 }
             } else {
                 this.playerController.resetBlockRemoving();
             }
+        } else {
+            // TODO: 1.7 ANIMATIONS
+//            if (leftClick && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
+//                BlockPos blockpos = this.objectMouseOver.getBlockPos();
+            thePlayer.fakeSwingItem();
+
+//                if (this.theWorld.getBlockState(blockpos).getBlock().getMaterial() != Material.air && this.playerController.onPlayerDamageBlock(blockpos, this.objectMouseOver.sideHit)) {
+//                    this.effectRenderer.addBlockHitEffects(blockpos, this.objectMouseOver.sideHit);
+
+//                    if (!thePlayer.isSwingInProgress || thePlayer.swingProgressInt >= thePlayer.getArmSwingAnimationEnd() / 2 || thePlayer.swingProgressInt < 0) {
+//                    }
+//                }
+//            } else {
+////                this.playerController.resetBlockRemoving();
+//            }
         }
     }
 
     private void clickMouse() {
+//        if (thePlayer.getFakeItemInUseCount() > 0) return;
         if (this.leftClickCounter <= 0) {
             this.thePlayer.swingItem();
 
@@ -1390,7 +1344,14 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
      * Called when user clicked he's mouse right button (place)
      */
     private void rightClickMouse() {
+        if (ModuleRegistry.getModuleByClass(OldCombatModule.class).isEnabled() && this.playerController.getIsHittingBlock()) {
+            playerController.resetBlockRemoving();
+        }
+
         if (!this.playerController.getIsHittingBlock()) {
+            // TODO: 1.7 animations
+
+
             this.rightClickDelayTimer = 4;
             boolean flag = true;
             ItemStack itemstack = this.thePlayer.inventory.getCurrentItem();
@@ -1439,7 +1400,27 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
                     this.entityRenderer.itemRenderer.resetEquippedProgress2();
                 }
             }
-        }
+        } /*else {
+            ItemStack itemstack1 = this.thePlayer.inventory.getCurrentItem();
+            if (itemstack1 != null) {
+
+                if (itemstack1.getItem() instanceof ItemFood) {
+                    BlockPos blockpos = this.objectMouseOver.getBlockPos();
+                    playerController.resetBlockRemoving();
+                    this.playerController.onPlayerRightClick(this.thePlayer, this.theWorld, itemstack1, blockpos, this.objectMouseOver.sideHit, this.objectMouseOver.hitVec);
+
+//                    thePlayer.setItemInUse(itemstack1, itemstack1.getMaxItemUseDuration());
+                }
+            }
+//            ItemStack itemstack = itemstack1.useItemRightClick(this.theWorld, thePlayer);
+            if (itemstack1 != null) {
+//                thePlayer.setFakeItemInUseCount(itemstack1.getMaxItemUseDuration());
+            }// TODO: right click while hitting block
+
+//            this.leftClickCounter = 0;
+//            playerController.resetBlockRemoving();
+
+        }*/
     }
 
     /**
@@ -2700,7 +2681,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
         return this.blockRenderDispatcher;
     }
 
-    public RenderManager getRenderManager() {
+    public IRenderManager getRenderManager() {
         return this.renderManager;
     }
 
@@ -2708,7 +2689,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
         return this.renderItem;
     }
 
-    public ItemRenderer getItemRenderer() {
+    public IItemRenderer getItemRenderer() {
         return this.itemRenderer;
     }
 
diff --git a/src/main/java/net/minecraft/client/entity/EntityPlayerSP.java b/src/main/java/net/minecraft/client/entity/EntityPlayerSP.java
index ef53142..c37f3fe 100644
--- a/src/main/java/net/minecraft/client/entity/EntityPlayerSP.java
+++ b/src/main/java/net/minecraft/client/entity/EntityPlayerSP.java
@@ -3,21 +3,8 @@ package net.minecraft.client.entity;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.audio.MovingSoundMinecartRiding;
 import net.minecraft.client.audio.PositionedSoundRecord;
-import net.minecraft.client.gui.GuiCommandBlock;
-import net.minecraft.client.gui.GuiEnchantment;
-import net.minecraft.client.gui.GuiHopper;
-import net.minecraft.client.gui.GuiMerchant;
-import net.minecraft.client.gui.GuiRepair;
-import net.minecraft.client.gui.GuiScreen;
-import net.minecraft.client.gui.GuiScreenBook;
-import net.minecraft.client.gui.inventory.GuiBeacon;
-import net.minecraft.client.gui.inventory.GuiBrewingStand;
-import net.minecraft.client.gui.inventory.GuiChest;
-import net.minecraft.client.gui.inventory.GuiCrafting;
-import net.minecraft.client.gui.inventory.GuiDispenser;
-import net.minecraft.client.gui.inventory.GuiEditSign;
-import net.minecraft.client.gui.inventory.GuiFurnace;
-import net.minecraft.client.gui.inventory.GuiScreenHorseInventory;
+import net.minecraft.client.gui.*;
+import net.minecraft.client.gui.inventory.*;
 import net.minecraft.client.network.NetHandlerPlayClient;
 import net.minecraft.command.server.CommandBlockLogic;
 import net.minecraft.entity.Entity;
@@ -29,31 +16,16 @@ import net.minecraft.init.Items;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
-import net.minecraft.network.play.client.C01PacketChatMessage;
-import net.minecraft.network.play.client.C03PacketPlayer;
-import net.minecraft.network.play.client.C07PacketPlayerDigging;
-import net.minecraft.network.play.client.C0APacketAnimation;
-import net.minecraft.network.play.client.C0BPacketEntityAction;
-import net.minecraft.network.play.client.C0CPacketInput;
-import net.minecraft.network.play.client.C0DPacketCloseWindow;
-import net.minecraft.network.play.client.C13PacketPlayerAbilities;
-import net.minecraft.network.play.client.C16PacketClientStatus;
+import net.minecraft.network.play.client.*;
 import net.minecraft.potion.Potion;
 import net.minecraft.stats.StatBase;
 import net.minecraft.stats.StatFileWriter;
 import net.minecraft.tileentity.TileEntitySign;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.IChatComponent;
-import net.minecraft.util.MovementInput;
-import net.minecraft.util.ResourceLocation;
+import net.minecraft.util.*;
 import net.minecraft.world.IInteractionObject;
-import net.minecraft.world.World;
+import net.minecraft.world.World ;
 
-public class EntityPlayerSP extends AbstractClientPlayer
-{
+public class EntityPlayerSP extends AbstractClientPlayer {
     public final NetHandlerPlayClient sendQueue;
     private final StatFileWriter statWriter;
 
@@ -87,10 +59,14 @@ public class EntityPlayerSP extends AbstractClientPlayer
      */
     private float lastReportedPitch;
 
-    /** the last sneaking state sent to the server */
+    /**
+     * the last sneaking state sent to the server
+     */
     private boolean serverSneakState;
 
-    /** the last sprinting state sent to the server */
+    /**
+     * the last sprinting state sent to the server
+     */
     private boolean serverSprintState;
 
     /**
@@ -110,7 +86,9 @@ public class EntityPlayerSP extends AbstractClientPlayer
      */
     protected int sprintToggleTimer;
 
-    /** Ticks left before sprinting is disabled. */
+    /**
+     * Ticks left before sprinting is disabled.
+     */
     public int sprintingTicksLeft;
     public float renderArmYaw;
     public float renderArmPitch;
@@ -119,14 +97,17 @@ public class EntityPlayerSP extends AbstractClientPlayer
     private int horseJumpPowerCounter;
     private float horseJumpPower;
 
-    /** The amount of time an entity has been in a Portal */
+    /**
+     * The amount of time an entity has been in a Portal
+     */
     public float timeInPortal;
 
-    /** The amount of time an entity has been in a Portal the previous tick */
+    /**
+     * The amount of time an entity has been in a Portal the previous tick
+     */
     public float prevTimeInPortal;
 
-    public EntityPlayerSP(Minecraft mcIn, World worldIn, NetHandlerPlayClient netHandler, StatFileWriter statFile)
-    {
+    public EntityPlayerSP(Minecraft mcIn, World worldIn, NetHandlerPlayClient netHandler, StatFileWriter statFile) {
         super(worldIn, netHandler.getGameProfile());
         this.sendQueue = netHandler;
         this.statWriter = statFile;
@@ -137,47 +118,38 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Called when the entity is attacked.
      */
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
         return false;
     }
 
     /**
      * Heal living entity (param: amount of half-hearts)
      */
-    public void heal(float healAmount)
-    {
+    public void heal(float healAmount) {
     }
 
     /**
      * Called when a player mounts an entity. e.g. mounts a pig, mounts a boat.
      */
-    public void mountEntity(Entity entityIn)
-    {
+    public void mountEntity(Entity entityIn) {
         super.mountEntity(entityIn);
 
-        if (entityIn instanceof EntityMinecart)
-        {
-            this.mc.getSoundHandler().playSound(new MovingSoundMinecartRiding(this, (EntityMinecart)entityIn));
+        if (entityIn instanceof EntityMinecart) {
+            this.mc.getSoundHandler().playSound(new MovingSoundMinecartRiding(this, (EntityMinecart) entityIn));
         }
     }
 
     /**
      * Called to update the entity's position/logic.
      */
-    public void onUpdate()
-    {
-        if (this.worldObj.isBlockLoaded(new BlockPos(this.posX, 0.0D, this.posZ)))
-        {
+    public void onUpdate() {
+        if (this.worldObj.isBlockLoaded(new BlockPos(this.posX, 0.0D, this.posZ))) {
             super.onUpdate();
 
-            if (this.isRiding())
-            {
+            if (this.isRiding()) {
                 this.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook(this.rotationYaw, this.rotationPitch, this.onGround));
                 this.sendQueue.addToSendQueue(new C0CPacketInput(this.moveStrafing, this.moveForward, this.movementInput.jump, this.movementInput.sneak));
-            }
-            else
-            {
+            } else {
                 this.onUpdateWalkingPlayer();
             }
         }
@@ -186,18 +158,13 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * called every tick when the player is on foot. Performs all the things that normally happen during movement.
      */
-    public void onUpdateWalkingPlayer()
-    {
+    public void onUpdateWalkingPlayer() {
         boolean flag = this.isSprinting();
 
-        if (flag != this.serverSprintState)
-        {
-            if (flag)
-            {
+        if (flag != this.serverSprintState) {
+            if (flag) {
                 this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.START_SPRINTING));
-            }
-            else
-            {
+            } else {
                 this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.STOP_SPRINTING));
             }
 
@@ -206,67 +173,50 @@ public class EntityPlayerSP extends AbstractClientPlayer
 
         boolean flag1 = this.isSneaking();
 
-        if (flag1 != this.serverSneakState)
-        {
-            if (flag1)
-            {
+        if (flag1 != this.serverSneakState) {
+            if (flag1) {
                 this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.START_SNEAKING));
-            }
-            else
-            {
+            } else {
                 this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.STOP_SNEAKING));
             }
 
             this.serverSneakState = flag1;
         }
 
-        if (this.isCurrentViewEntity())
-        {
+        if (this.isCurrentViewEntity()) {
             double d0 = this.posX - this.lastReportedPosX;
             double d1 = this.getEntityBoundingBox().minY - this.lastReportedPosY;
             double d2 = this.posZ - this.lastReportedPosZ;
-            double d3 = (double)(this.rotationYaw - this.lastReportedYaw);
-            double d4 = (double)(this.rotationPitch - this.lastReportedPitch);
+            double d3 = (double) (this.rotationYaw - this.lastReportedYaw);
+            double d4 = (double) (this.rotationPitch - this.lastReportedPitch);
             boolean flag2 = d0 * d0 + d1 * d1 + d2 * d2 > 9.0E-4D || this.positionUpdateTicks >= 20;
             boolean flag3 = d3 != 0.0D || d4 != 0.0D;
 
-            if (this.ridingEntity == null)
-            {
-                if (flag2 && flag3)
-                {
+            if (this.ridingEntity == null) {
+                if (flag2 && flag3) {
                     this.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(this.posX, this.getEntityBoundingBox().minY, this.posZ, this.rotationYaw, this.rotationPitch, this.onGround));
-                }
-                else if (flag2)
-                {
+                } else if (flag2) {
                     this.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(this.posX, this.getEntityBoundingBox().minY, this.posZ, this.onGround));
-                }
-                else if (flag3)
-                {
+                } else if (flag3) {
                     this.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook(this.rotationYaw, this.rotationPitch, this.onGround));
-                }
-                else
-                {
+                } else {
                     this.sendQueue.addToSendQueue(new C03PacketPlayer(this.onGround));
                 }
-            }
-            else
-            {
+            } else {
                 this.sendQueue.addToSendQueue(new C03PacketPlayer.C06PacketPlayerPosLook(this.motionX, -999.0D, this.motionZ, this.rotationYaw, this.rotationPitch, this.onGround));
                 flag2 = false;
             }
 
             ++this.positionUpdateTicks;
 
-            if (flag2)
-            {
+            if (flag2) {
                 this.lastReportedPosX = this.posX;
                 this.lastReportedPosY = this.getEntityBoundingBox().minY;
                 this.lastReportedPosZ = this.posZ;
                 this.positionUpdateTicks = 0;
             }
 
-            if (flag3)
-            {
+            if (flag3) {
                 this.lastReportedYaw = this.rotationYaw;
                 this.lastReportedPitch = this.rotationPitch;
             }
@@ -276,8 +226,7 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Called when player presses the drop item key
      */
-    public EntityItem dropOneItem(boolean dropAll)
-    {
+    public EntityItem dropOneItem(boolean dropAll) {
         C07PacketPlayerDigging.Action c07packetplayerdigging$action = dropAll ? C07PacketPlayerDigging.Action.DROP_ALL_ITEMS : C07PacketPlayerDigging.Action.DROP_ITEM;
         this.sendQueue.addToSendQueue(new C07PacketPlayerDigging(c07packetplayerdigging$action, BlockPos.ORIGIN, EnumFacing.DOWN));
         return null;
@@ -286,29 +235,32 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Joins the passed in entity item with the world. Args: entityItem
      */
-    protected void joinEntityItemWithWorld(EntityItem itemIn)
-    {
+    protected void joinEntityItemWithWorld(EntityItem itemIn) {
     }
 
     /**
      * Sends a chat message from the player. Args: chatMessage
      */
-    public void sendChatMessage(String message)
-    {
+    public void sendChatMessage(String message) {
         this.sendQueue.addToSendQueue(new C01PacketChatMessage(message));
     }
 
     /**
      * Swings the item the player is holding.
      */
-    public void swingItem()
-    {
+    public void swingItem() {
         super.swingItem();
         this.sendQueue.addToSendQueue(new C0APacketAnimation());
     }
 
-    public void respawnPlayer()
-    {
+    public void fakeSwingItem() {
+        if (!this.isSwingInProgress || this.swingProgressInt >= this.getArmSwingAnimationEnd() / 2 || this.swingProgressInt < 0) {
+            this.swingProgressInt = -1;
+            this.isSwingInProgress = true;
+        }
+    }
+
+    public void respawnPlayer() {
         this.sendQueue.addToSendQueue(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN));
     }
 
@@ -316,10 +268,8 @@ public class EntityPlayerSP extends AbstractClientPlayer
      * Deals damage to the entity. If its a EntityPlayer then will take damage from the armor first and then health
      * second with the reduced value. Args: damageAmount
      */
-    protected void damageEntity(DamageSource damageSrc, float damageAmount)
-    {
-        if (!this.isEntityInvulnerable(damageSrc))
-        {
+    protected void damageEntity(DamageSource damageSrc, float damageAmount) {
+        if (!this.isEntityInvulnerable(damageSrc)) {
             this.setHealth(this.getHealth() - damageAmount);
         }
     }
@@ -327,48 +277,38 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * set current crafting inventory back to the 2x2 square
      */
-    public void closeScreen()
-    {
+    public void closeScreen() {
         this.sendQueue.addToSendQueue(new C0DPacketCloseWindow(this.openContainer.windowId));
         this.closeScreenAndDropStack();
     }
 
-    public void closeScreenAndDropStack()
-    {
-        this.inventory.setItemStack((ItemStack)null);
+    public void closeScreenAndDropStack() {
+        this.inventory.setItemStack((ItemStack) null);
         super.closeScreen();
-        this.mc.displayGuiScreen((GuiScreen)null);
+        this.mc.displayGuiScreen((GuiScreen) null);
     }
 
     /**
      * Updates health locally.
      */
-    public void setPlayerSPHealth(float health)
-    {
-        if (this.hasValidHealth)
-        {
+    public void setPlayerSPHealth(float health) {
+        if (this.hasValidHealth) {
             float f = this.getHealth() - health;
 
-            if (f <= 0.0F)
-            {
+            if (f <= 0.0F) {
                 this.setHealth(health);
 
-                if (f < 0.0F)
-                {
+                if (f < 0.0F) {
                     this.hurtResistantTime = this.maxHurtResistantTime / 2;
                 }
-            }
-            else
-            {
+            } else {
                 this.lastDamage = f;
                 this.setHealth(this.getHealth());
                 this.hurtResistantTime = this.maxHurtResistantTime;
                 this.damageEntity(DamageSource.generic, f);
                 this.hurtTime = this.maxHurtTime = 10;
             }
-        }
-        else
-        {
+        } else {
             this.setHealth(health);
             this.hasValidHealth = true;
         }
@@ -377,12 +317,9 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Adds a value to a statistic field.
      */
-    public void addStat(StatBase stat, int amount)
-    {
-        if (stat != null)
-        {
-            if (stat.isIndependent)
-            {
+    public void addStat(StatBase stat, int amount) {
+        if (stat != null) {
+            if (stat.isIndependent) {
                 super.addStat(stat, amount);
             }
         }
@@ -391,110 +328,89 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Sends the player's abilities to the server (if there is one).
      */
-    public void sendPlayerAbilities()
-    {
+    public void sendPlayerAbilities() {
         this.sendQueue.addToSendQueue(new C13PacketPlayerAbilities(this.capabilities));
     }
 
     /**
      * returns true if this is an EntityPlayerSP, or the logged in player.
      */
-    public boolean isUser()
-    {
+    public boolean isUser() {
         return true;
     }
 
-    protected void sendHorseJump()
-    {
-        this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.RIDING_JUMP, (int)(this.getHorseJumpPower() * 100.0F)));
+    protected void sendHorseJump() {
+        this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.RIDING_JUMP, (int) (this.getHorseJumpPower() * 100.0F)));
     }
 
-    public void sendHorseInventory()
-    {
+    public void sendHorseInventory() {
         this.sendQueue.addToSendQueue(new C0BPacketEntityAction(this, C0BPacketEntityAction.Action.OPEN_INVENTORY));
     }
 
-    public void setClientBrand(String brand)
-    {
+    public void setClientBrand(String brand) {
         this.clientBrand = brand;
     }
 
-    public String getClientBrand()
-    {
+    public String getClientBrand() {
         return this.clientBrand;
     }
 
-    public StatFileWriter getStatFileWriter()
-    {
+    public StatFileWriter getStatFileWriter() {
         return this.statWriter;
     }
 
-    public void addChatComponentMessage(IChatComponent chatComponent)
-    {
+    public void addChatComponentMessage(IChatComponent chatComponent) {
         this.mc.ingameGUI.getChatGUI().printChatMessage(chatComponent);
     }
 
-    protected boolean pushOutOfBlocks(double x, double y, double z)
-    {
-        if (this.noClip)
-        {
+    protected boolean pushOutOfBlocks(double x, double y, double z) {
+        if (this.noClip) {
             return false;
-        }
-        else
-        {
+        } else {
             BlockPos blockpos = new BlockPos(x, y, z);
-            double d0 = x - (double)blockpos.getX();
-            double d1 = z - (double)blockpos.getZ();
+            double d0 = x - (double) blockpos.getX();
+            double d1 = z - (double) blockpos.getZ();
 
-            if (!this.isOpenBlockSpace(blockpos))
-            {
+            if (!this.isOpenBlockSpace(blockpos)) {
                 int i = -1;
                 double d2 = 9999.0D;
 
-                if (this.isOpenBlockSpace(blockpos.west()) && d0 < d2)
-                {
+                if (this.isOpenBlockSpace(blockpos.west()) && d0 < d2) {
                     d2 = d0;
                     i = 0;
                 }
 
-                if (this.isOpenBlockSpace(blockpos.east()) && 1.0D - d0 < d2)
-                {
+                if (this.isOpenBlockSpace(blockpos.east()) && 1.0D - d0 < d2) {
                     d2 = 1.0D - d0;
                     i = 1;
                 }
 
-                if (this.isOpenBlockSpace(blockpos.north()) && d1 < d2)
-                {
+                if (this.isOpenBlockSpace(blockpos.north()) && d1 < d2) {
                     d2 = d1;
                     i = 4;
                 }
 
-                if (this.isOpenBlockSpace(blockpos.south()) && 1.0D - d1 < d2)
-                {
+                if (this.isOpenBlockSpace(blockpos.south()) && 1.0D - d1 < d2) {
                     d2 = 1.0D - d1;
                     i = 5;
                 }
 
                 float f = 0.1F;
 
-                if (i == 0)
-                {
-                    this.motionX = (double)(-f);
+                if (i == 0) {
+                    this.motionX = (double) (-f);
                 }
 
-                if (i == 1)
-                {
-                    this.motionX = (double)f;
+                if (i == 1) {
+                    this.motionX = (double) f;
                 }
 
-                if (i == 4)
-                {
-                    this.motionZ = (double)(-f);
+                if (i == 4) {
+                    this.motionZ = (double) (-f);
                 }
 
-                if (i == 5)
-                {
-                    this.motionZ = (double)f;
+                if (i == 5) {
+                    this.motionZ = (double) f;
                 }
             }
 
@@ -505,16 +421,14 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Returns true if the block at the given BlockPos and the block above it are NOT full cubes.
      */
-    private boolean isOpenBlockSpace(BlockPos pos)
-    {
+    private boolean isOpenBlockSpace(BlockPos pos) {
         return !this.worldObj.getBlockState(pos).getBlock().isNormalCube() && !this.worldObj.getBlockState(pos.up()).getBlock().isNormalCube();
     }
 
     /**
      * Set sprinting switch for Entity.
      */
-    public void setSprinting(boolean sprinting)
-    {
+    public void setSprinting(boolean sprinting) {
         super.setSprinting(sprinting);
         this.sprintingTicksLeft = sprinting ? 600 : 0;
     }
@@ -522,8 +436,7 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Sets the current XP, total XP, and level number.
      */
-    public void setXPStats(float currentXP, int maxXP, int level)
-    {
+    public void setXPStats(float currentXP, int maxXP, int level) {
         this.experience = currentXP;
         this.experienceTotal = maxXP;
         this.experienceLevel = level;
@@ -532,16 +445,14 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Send a chat message to the CommandSender
      */
-    public void addChatMessage(IChatComponent component)
-    {
+    public void addChatMessage(IChatComponent component) {
         this.mc.ingameGUI.getChatGUI().printChatMessage(component);
     }
 
     /**
      * Returns {@code true} if the CommandSender is allowed to execute the command, {@code false} if not
      */
-    public boolean canCommandSenderUseCommand(int permLevel, String commandName)
-    {
+    public boolean canCommandSenderUseCommand(int permLevel, String commandName) {
         return permLevel <= 0;
     }
 
@@ -549,53 +460,44 @@ public class EntityPlayerSP extends AbstractClientPlayer
      * Get the position in the world. <b>{@code null} is not allowed!</b> If you are not an entity in the world, return
      * the coordinates 0, 0, 0
      */
-    public BlockPos getPosition()
-    {
+    public BlockPos getPosition() {
         return new BlockPos(this.posX + 0.5D, this.posY + 0.5D, this.posZ + 0.5D);
     }
 
-    public void playSound(String name, float volume, float pitch)
-    {
+    public void playSound(String name, float volume, float pitch) {
         this.worldObj.playSound(this.posX, this.posY, this.posZ, name, volume, pitch, false);
     }
 
     /**
      * Returns whether the entity is in a server world
      */
-    public boolean isServerWorld()
-    {
+    public boolean isServerWorld() {
         return true;
     }
 
-    public boolean isRidingHorse()
-    {
-        return this.ridingEntity != null && this.ridingEntity instanceof EntityHorse && ((EntityHorse)this.ridingEntity).isHorseSaddled();
+    public boolean isRidingHorse() {
+        return this.ridingEntity != null && this.ridingEntity instanceof EntityHorse && ((EntityHorse) this.ridingEntity).isHorseSaddled();
     }
 
-    public float getHorseJumpPower()
-    {
+    public float getHorseJumpPower() {
         return this.horseJumpPower;
     }
 
-    public void openEditSign(TileEntitySign signTile)
-    {
+    public void openEditSign(TileEntitySign signTile) {
         this.mc.displayGuiScreen(new GuiEditSign(signTile));
     }
 
-    public void openEditCommandBlock(CommandBlockLogic cmdBlockLogic)
-    {
+    public void openEditCommandBlock(CommandBlockLogic cmdBlockLogic) {
         this.mc.displayGuiScreen(new GuiCommandBlock(cmdBlockLogic));
     }
 
     /**
      * Displays the GUI for interacting with a book.
      */
-    public void displayGUIBook(ItemStack bookStack)
-    {
+    public void displayGUIBook(ItemStack bookStack) {
         Item item = bookStack.getItem();
 
-        if (item == Items.writable_book)
-        {
+        if (item == Items.writable_book) {
             this.mc.displayGuiScreen(new GuiScreenBook(this, bookStack, true));
         }
     }
@@ -603,108 +505,80 @@ public class EntityPlayerSP extends AbstractClientPlayer
     /**
      * Displays the GUI for interacting with a chest inventory. Args: chestInventory
      */
-    public void displayGUIChest(IInventory chestInventory)
-    {
-        String s = chestInventory instanceof IInteractionObject ? ((IInteractionObject)chestInventory).getGuiID() : "minecraft:container";
+    public void displayGUIChest(IInventory chestInventory) {
+        String s = chestInventory instanceof IInteractionObject ? ((IInteractionObject) chestInventory).getGuiID() : "minecraft:container";
 
-        if ("minecraft:chest".equals(s))
-        {
+        if ("minecraft:chest".equals(s)) {
             this.mc.displayGuiScreen(new GuiChest(this.inventory, chestInventory));
-        }
-        else if ("minecraft:hopper".equals(s))
-        {
+        } else if ("minecraft:hopper".equals(s)) {
             this.mc.displayGuiScreen(new GuiHopper(this.inventory, chestInventory));
-        }
-        else if ("minecraft:furnace".equals(s))
-        {
+        } else if ("minecraft:furnace".equals(s)) {
             this.mc.displayGuiScreen(new GuiFurnace(this.inventory, chestInventory));
-        }
-        else if ("minecraft:brewing_stand".equals(s))
-        {
+        } else if ("minecraft:brewing_stand".equals(s)) {
             this.mc.displayGuiScreen(new GuiBrewingStand(this.inventory, chestInventory));
-        }
-        else if ("minecraft:beacon".equals(s))
-        {
+        } else if ("minecraft:beacon".equals(s)) {
             this.mc.displayGuiScreen(new GuiBeacon(this.inventory, chestInventory));
-        }
-        else if (!"minecraft:dispenser".equals(s) && !"minecraft:dropper".equals(s))
-        {
+        } else if (!"minecraft:dispenser".equals(s) && !"minecraft:dropper".equals(s)) {
             this.mc.displayGuiScreen(new GuiChest(this.inventory, chestInventory));
-        }
-        else
-        {
+        } else {
             this.mc.displayGuiScreen(new GuiDispenser(this.inventory, chestInventory));
         }
     }
 
-    public void displayGUIHorse(EntityHorse horse, IInventory horseInventory)
-    {
+    public void displayGUIHorse(EntityHorse horse, IInventory horseInventory) {
         this.mc.displayGuiScreen(new GuiScreenHorseInventory(this.inventory, horseInventory, horse));
     }
 
-    public void displayGui(IInteractionObject guiOwner)
-    {
+    public void displayGui(IInteractionObject guiOwner) {
         String s = guiOwner.getGuiID();
 
-        if ("minecraft:crafting_table".equals(s))
-        {
+        if ("minecraft:crafting_table".equals(s)) {
             this.mc.displayGuiScreen(new GuiCrafting(this.inventory, this.worldObj));
-        }
-        else if ("minecraft:enchanting_table".equals(s))
-        {
+        } else if ("minecraft:enchanting_table".equals(s)) {
             this.mc.displayGuiScreen(new GuiEnchantment(this.inventory, this.worldObj, guiOwner));
-        }
-        else if ("minecraft:anvil".equals(s))
-        {
+        } else if ("minecraft:anvil".equals(s)) {
             this.mc.displayGuiScreen(new GuiRepair(this.inventory, this.worldObj));
         }
     }
 
-    public void displayVillagerTradeGui(IMerchant villager)
-    {
+    public void displayVillagerTradeGui(IMerchant villager) {
         this.mc.displayGuiScreen(new GuiMerchant(this.inventory, villager, this.worldObj));
     }
 
     /**
      * Called when the player performs a critical hit on the Entity. Args: entity that was hit critically
      */
-    public void onCriticalHit(Entity entityHit)
-    {
+    public void onCriticalHit(Entity entityHit) {
         this.mc.effectRenderer.emitParticleAtEntity(entityHit, EnumParticleTypes.CRIT);
     }
 
-    public void onEnchantmentCritical(Entity entityHit)
-    {
+    public void onEnchantmentCritical(Entity entityHit) {
         this.mc.effectRenderer.emitParticleAtEntity(entityHit, EnumParticleTypes.CRIT_MAGIC);
     }
 
     /**
      * Returns if this entity is sneaking.
      */
-    public boolean isSneaking()
-    {
+    public boolean isSneaking() {
         boolean flag = this.movementInput != null ? this.movementInput.sneak : false;
         return flag && !this.sleeping;
     }
 
-    public void updateEntityActionState()
-    {
+    public void updateEntityActionState() {
         super.updateEntityActionState();
 
-        if (this.isCurrentViewEntity())
-        {
+        if (this.isCurrentViewEntity()) {
             this.moveStrafing = this.movementInput.moveStrafe;
             this.moveForward = this.movementInput.moveForward;
             this.isJumping = this.movementInput.jump;
             this.prevRenderArmYaw = this.renderArmYaw;
             this.prevRenderArmPitch = this.renderArmPitch;
-            this.renderArmPitch = (float)((double)this.renderArmPitch + (double)(this.rotationPitch - this.renderArmPitch) * 0.5D);
-            this.renderArmYaw = (float)((double)this.renderArmYaw + (double)(this.rotationYaw - this.renderArmYaw) * 0.5D);
+            this.renderArmPitch = (float) ((double) this.renderArmPitch + (double) (this.rotationPitch - this.renderArmPitch) * 0.5D);
+            this.renderArmYaw = (float) ((double) this.renderArmYaw + (double) (this.rotationYaw - this.renderArmYaw) * 0.5D);
         }
     }
 
-    protected boolean isCurrentViewEntity()
-    {
+    protected boolean isCurrentViewEntity() {
         return this.mc.getRenderViewEntity() == this;
     }
 
@@ -712,70 +586,54 @@ public class EntityPlayerSP extends AbstractClientPlayer
      * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons
      * use this to react to sunlight and start to burn.
      */
-    public void onLivingUpdate()
-    {
-        if (this.sprintingTicksLeft > 0)
-        {
+    public void onLivingUpdate() {
+        if (this.sprintingTicksLeft > 0) {
             --this.sprintingTicksLeft;
 
-            if (this.sprintingTicksLeft == 0)
-            {
+            if (this.sprintingTicksLeft == 0) {
                 this.setSprinting(false);
             }
         }
 
-        if (this.sprintToggleTimer > 0)
-        {
+        if (this.sprintToggleTimer > 0) {
             --this.sprintToggleTimer;
         }
 
         this.prevTimeInPortal = this.timeInPortal;
 
-        if (this.inPortal)
-        {
-            if (this.mc.currentScreen != null && !this.mc.currentScreen.doesGuiPauseGame())
-            {
-                this.mc.displayGuiScreen((GuiScreen)null);
+        if (this.inPortal) {
+            if (this.mc.currentScreen != null && !this.mc.currentScreen.doesGuiPauseGame()) {
+                this.mc.displayGuiScreen((GuiScreen) null);
             }
 
-            if (this.timeInPortal == 0.0F)
-            {
+            if (this.timeInPortal == 0.0F) {
                 this.mc.getSoundHandler().playSound(PositionedSoundRecord.create(new ResourceLocation("portal.trigger"), this.rand.nextFloat() * 0.4F + 0.8F));
             }
 
             this.timeInPortal += 0.0125F;
 
-            if (this.timeInPortal >= 1.0F)
-            {
+            if (this.timeInPortal >= 1.0F) {
                 this.timeInPortal = 1.0F;
             }
 
             this.inPortal = false;
-        }
-        else if (this.isPotionActive(Potion.confusion) && this.getActivePotionEffect(Potion.confusion).getDuration() > 60)
-        {
+        } else if (this.isPotionActive(Potion.confusion) && this.getActivePotionEffect(Potion.confusion).getDuration() > 60) {
             this.timeInPortal += 0.006666667F;
 
-            if (this.timeInPortal > 1.0F)
-            {
+            if (this.timeInPortal > 1.0F) {
                 this.timeInPortal = 1.0F;
             }
-        }
-        else
-        {
-            if (this.timeInPortal > 0.0F)
-            {
+        } else {
+            if (this.timeInPortal > 0.0F) {
                 this.timeInPortal -= 0.05F;
             }
 
-            if (this.timeInPortal < 0.0F)
-            {
+            if (this.timeInPortal < 0.0F) {
                 this.timeInPortal = 0.0F;
             }
         }
 
-        if (this.timeUntilPortal > 0)
-        {
+        if (this.timeUntilPortal > 0) {
             --this.timeUntilPortal;
         }
 
@@ -785,59 +643,44 @@ public class EntityPlayerSP extends AbstractClientPlayer
         boolean flag2 = this.movementInput.moveForward >= f;
         this.movementInput.updatePlayerMoveState();
 
-        if (this.isUsingItem() && !this.isRiding())
-        {
+        if (this.isUsingItem() && !this.isRiding()) {
             this.movementInput.moveStrafe *= 0.2F;
             this.movementInput.moveForward *= 0.2F;
             this.sprintToggleTimer = 0;
         }
 
-        this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ + (double)this.width * 0.35D);
-        this.pushOutOfBlocks(this.posX - (double)this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ - (double)this.width * 0.35D);
-        this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ - (double)this.width * 0.35D);
-        this.pushOutOfBlocks(this.posX + (double)this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ + (double)this.width * 0.35D);
-        boolean flag3 = (float)this.getFoodStats().getFoodLevel() > 6.0F || this.capabilities.allowFlying;
+        this.pushOutOfBlocks(this.posX - (double) this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ + (double) this.width * 0.35D);
+        this.pushOutOfBlocks(this.posX - (double) this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ - (double) this.width * 0.35D);
+        this.pushOutOfBlocks(this.posX + (double) this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ - (double) this.width * 0.35D);
+        this.pushOutOfBlocks(this.posX + (double) this.width * 0.35D, this.getEntityBoundingBox().minY + 0.5D, this.posZ + (double) this.width * 0.35D);
+        boolean flag3 = (float) this.getFoodStats().getFoodLevel() > 6.0F || this.capabilities.allowFlying;
 
-        if (this.onGround && !flag1 && !flag2 && this.movementInput.moveForward >= f && !this.isSprinting() && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness))
-        {
-            if (this.sprintToggleTimer <= 0 && !this.mc.gameSettings.keyBindSprint.isKeyDown())
-            {
+        if (this.onGround && !flag1 && !flag2 && this.movementInput.moveForward >= f && !this.isSprinting() && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness)) {
+            if (this.sprintToggleTimer <= 0 && !this.mc.gameSettings.keyBindSprint.isKeyDown()) {
                 this.sprintToggleTimer = 7;
-            }
-            else
-            {
+            } else {
                 this.setSprinting(true);
             }
         }
 
-        if (!this.isSprinting() && this.movementInput.moveForward >= f && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness) && this.mc.gameSettings.keyBindSprint.isKeyDown())
-        {
+        if (!this.isSprinting() && this.movementInput.moveForward >= f && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness) && this.mc.gameSettings.keyBindSprint.isKeyDown()) {
             this.setSprinting(true);
         }
 
-        if (this.isSprinting() && (this.movementInput.moveForward < f || this.isCollidedHorizontally || !flag3))
-        {
+        if (this.isSprinting() && (this.movementInput.moveForward < f || this.isCollidedHorizontally || !flag3)) {
             this.setSprinting(false);
         }
 
-        if (this.capabilities.allowFlying)
-        {
-            if (this.mc.playerController.isSpectatorMode())
-            {
-                if (!this.capabilities.isFlying)
-                {
+        if (this.capabilities.allowFlying) {
+            if (this.mc.playerController.isSpectatorMode()) {
+                if (!this.capabilities.isFlying) {
                     this.capabilities.isFlying = true;
                     this.sendPlayerAbilities();
                 }
-            }
-            else if (!flag && this.movementInput.jump)
-            {
-                if (this.flyToggleTimer == 0)
-                {
+            } else if (!flag && this.movementInput.jump) {
+                if (this.flyToggleTimer == 0) {
                     this.flyToggleTimer = 7;
-                }
-                else
-                {
+                } else {
                     this.capabilities.isFlying = !this.capabilities.isFlying;
                     this.sendPlayerAbilities();
                     this.flyToggleTimer = 0;
@@ -845,64 +688,47 @@ public class EntityPlayerSP extends AbstractClientPlayer
             }
         }
 
-        if (this.capabilities.isFlying && this.isCurrentViewEntity())
-        {
-            if (this.movementInput.sneak)
-            {
-                this.motionY -= (double)(this.capabilities.getFlySpeed() * 3.0F);
+        if (this.capabilities.isFlying && this.isCurrentViewEntity()) {
+            if (this.movementInput.sneak) {
+                this.motionY -= (double) (this.capabilities.getFlySpeed() * 3.0F);
             }
 
-            if (this.movementInput.jump)
-            {
-                this.motionY += (double)(this.capabilities.getFlySpeed() * 3.0F);
+            if (this.movementInput.jump) {
+                this.motionY += (double) (this.capabilities.getFlySpeed() * 3.0F);
             }
         }
 
-        if (this.isRidingHorse())
-        {
-            if (this.horseJumpPowerCounter < 0)
-            {
+        if (this.isRidingHorse()) {
+            if (this.horseJumpPowerCounter < 0) {
                 ++this.horseJumpPowerCounter;
 
-                if (this.horseJumpPowerCounter == 0)
-                {
+                if (this.horseJumpPowerCounter == 0) {
                     this.horseJumpPower = 0.0F;
                 }
             }
 
-            if (flag && !this.movementInput.jump)
-            {
+            if (flag && !this.movementInput.jump) {
                 this.horseJumpPowerCounter = -10;
                 this.sendHorseJump();
-            }
-            else if (!flag && this.movementInput.jump)
-            {
+            } else if (!flag && this.movementInput.jump) {
                 this.horseJumpPowerCounter = 0;
                 this.horseJumpPower = 0.0F;
-            }
-            else if (flag)
-            {
+            } else if (flag) {
                 ++this.horseJumpPowerCounter;
 
-                if (this.horseJumpPowerCounter < 10)
-                {
-                    this.horseJumpPower = (float)this.horseJumpPowerCounter * 0.1F;
-                }
-                else
-                {
-                    this.horseJumpPower = 0.8F + 2.0F / (float)(this.horseJumpPowerCounter - 9) * 0.1F;
+                if (this.horseJumpPowerCounter < 10) {
+                    this.horseJumpPower = (float) this.horseJumpPowerCounter * 0.1F;
+                } else {
+                    this.horseJumpPower = 0.8F + 2.0F / (float) (this.horseJumpPowerCounter - 9) * 0.1F;
                 }
             }
-        }
-        else
-        {
+        } else {
             this.horseJumpPower = 0.0F;
         }
 
         super.onLivingUpdate();
 
-        if (this.onGround && this.capabilities.isFlying && !this.mc.playerController.isSpectatorMode())
-        {
+        if (this.onGround && this.capabilities.isFlying && !this.mc.playerController.isSpectatorMode()) {
             this.capabilities.isFlying = false;
             this.sendPlayerAbilities();
         }
diff --git a/src/main/java/net/minecraft/client/gui/inventory/GuiInventory.java b/src/main/java/net/minecraft/client/gui/inventory/GuiInventory.java
index 4f996dc..0d3b987 100644
--- a/src/main/java/net/minecraft/client/gui/inventory/GuiInventory.java
+++ b/src/main/java/net/minecraft/client/gui/inventory/GuiInventory.java
@@ -1,6 +1,8 @@
 package net.minecraft.client.gui.inventory;
 
 import java.io.IOException;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.achievement.GuiAchievements;
@@ -115,7 +117,7 @@ public class GuiInventory extends InventoryEffectRenderer
         ent.rotationYawHead = ent.rotationYaw;
         ent.prevRotationYawHead = ent.rotationYaw;
         GlStateManager.translate(0.0F, 0.0F, 0.0F);
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         rendermanager.setPlayerViewY(180.0F);
         rendermanager.setRenderShadow(false);
         rendermanager.renderEntityWithPosYaw(ent, 0.0D, 0.0D, 0.0D, 0.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/client/model/ModelRenderer.java b/src/main/java/net/minecraft/client/model/ModelRenderer.java
index eacde15..465dbd1 100644
--- a/src/main/java/net/minecraft/client/model/ModelRenderer.java
+++ b/src/main/java/net/minecraft/client/model/ModelRenderer.java
@@ -150,6 +150,7 @@ public class ModelRenderer
 
     public void render(float p_78785_1_)
     {
+
         if (!this.isHidden && this.showModel)
         {
             this.checkResetDisplayList();
diff --git a/src/main/java/net/minecraft/client/particle/EntityPickupFX.java b/src/main/java/net/minecraft/client/particle/EntityPickupFX.java
index 8bdf8fa..4309e36 100644
--- a/src/main/java/net/minecraft/client/particle/EntityPickupFX.java
+++ b/src/main/java/net/minecraft/client/particle/EntityPickupFX.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.particle;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
@@ -18,7 +19,7 @@ public class EntityPickupFX extends EntityFX
     private int age;
     private int maxAge;
     private float field_174841_aA;
-    private RenderManager field_174842_aB = Minecraft.getMinecraft().getRenderManager();
+    private IRenderManager field_174842_aB = Minecraft.getMinecraft().getRenderManager();
 
     public EntityPickupFX(World worldIn, Entity p_i1233_2_, Entity p_i1233_3_, float p_i1233_4_)
     {
diff --git a/src/main/java/net/minecraft/client/particle/MobAppearance.java b/src/main/java/net/minecraft/client/particle/MobAppearance.java
index 410c3e2..4d91c58 100644
--- a/src/main/java/net/minecraft/client/particle/MobAppearance.java
+++ b/src/main/java/net/minecraft/client/particle/MobAppearance.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.particle;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
@@ -51,7 +52,7 @@ public class MobAppearance extends EntityFX
     {
         if (this.entity != null)
         {
-            RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+            IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
             rendermanager.setRenderPosition(EntityFX.interpPosX, EntityFX.interpPosY, EntityFX.interpPosZ);
             float f = 0.42553192F;
             float f1 = ((float)this.particleAge + partialTicks) / (float)this.particleMaxAge;
diff --git a/src/main/java/net/minecraft/client/renderer/EntityRenderer.java b/src/main/java/net/minecraft/client/renderer/EntityRenderer.java
index ae76537..08955cc 100644
--- a/src/main/java/net/minecraft/client/renderer/EntityRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/EntityRenderer.java
@@ -10,6 +10,8 @@ import java.util.Date;
 import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
+
+import com.jlmsz.util.renderer.IItemRenderer;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
 import net.minecraft.block.material.Material;
@@ -112,7 +114,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
     private final IResourceManager resourceManager;
     private Random random = new Random();
     private float farPlaneDistance;
-    public ItemRenderer itemRenderer;
+    public IItemRenderer itemRenderer;
     private final MapItemRenderer theMapItemRenderer;
 
     /** Entity renderer update count */
diff --git a/src/main/java/net/minecraft/client/renderer/ItemRenderer.java b/src/main/java/net/minecraft/client/renderer/ItemRenderer.java
index 0637fe8..4c8e573 100644
--- a/src/main/java/net/minecraft/client/renderer/ItemRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/ItemRenderer.java
@@ -1,5 +1,7 @@
 package net.minecraft.client.renderer;
 
+import com.jlmsz.util.renderer.IItemRenderer;
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -9,7 +11,6 @@ import net.minecraft.client.entity.EntityPlayerSP;
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
 import net.minecraft.client.renderer.entity.Render;
 import net.minecraft.client.renderer.entity.RenderItem;
-import net.minecraft.client.renderer.entity.RenderManager;
 import net.minecraft.client.renderer.entity.RenderPlayer;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureMap;
@@ -32,12 +33,13 @@ import net.optifine.reflect.Reflector;
 import net.optifine.shaders.Shaders;
 import org.lwjgl.opengl.GL11;
 
-public class ItemRenderer
-{
+public class ItemRenderer implements IItemRenderer {
     private static final ResourceLocation RES_MAP_BACKGROUND = new ResourceLocation("textures/map/map_background.png");
     private static final ResourceLocation RES_UNDERWATER_OVERLAY = new ResourceLocation("textures/misc/underwater.png");
 
-    /** A reference to the Minecraft object. */
+    /**
+     * A reference to the Minecraft object.
+     */
     private final Minecraft mc;
     private ItemStack itemToRender;
 
@@ -46,41 +48,37 @@ public class ItemRenderer
      */
     private float equippedProgress;
     private float prevEquippedProgress;
-    private final RenderManager renderManager;
+    private final IRenderManager renderManager;
     private final RenderItem itemRenderer;
 
-    /** The index of the currently held item (0-8, or -1 if not yet updated) */
+    /**
+     * The index of the currently held item (0-8, or -1 if not yet updated)
+     */
     private int equippedItemSlot = -1;
 
-    public ItemRenderer(Minecraft mcIn)
-    {
+    public ItemRenderer(Minecraft mcIn) {
         this.mc = mcIn;
         this.renderManager = mcIn.getRenderManager();
         this.itemRenderer = mcIn.getRenderItem();
     }
 
-    public void renderItem(EntityLivingBase entityIn, ItemStack heldStack, ItemCameraTransforms.TransformType transform)
-    {
-        if (heldStack != null)
-        {
+    public void renderItem(EntityLivingBase entityIn, ItemStack heldStack, ItemCameraTransforms.TransformType transform) {
+        if (heldStack != null) {
             Item item = heldStack.getItem();
             Block block = Block.getBlockFromItem(item);
             GlStateManager.pushMatrix();
 
-            if (this.itemRenderer.shouldRenderItemIn3D(heldStack))
-            {
+            if (this.itemRenderer.shouldRenderItemIn3D(heldStack)) {
                 GlStateManager.scale(2.0F, 2.0F, 2.0F);
 
-                if (this.isBlockTranslucent(block) && (!Config.isShaders() || !Shaders.renderItemKeepDepthMask))
-                {
+                if (this.isBlockTranslucent(block) && (!Config.isShaders() || !Shaders.renderItemKeepDepthMask)) {
                     GlStateManager.depthMask(false);
                 }
             }
 
             this.itemRenderer.renderItemModelForEntity(heldStack, entityIn, transform);
 
-            if (this.isBlockTranslucent(block))
-            {
+            if (this.isBlockTranslucent(block)) {
                 GlStateManager.depthMask(true);
             }
 
@@ -91,18 +89,16 @@ public class ItemRenderer
     /**
      * Returns true if given block is translucent
      */
-    private boolean isBlockTranslucent(Block blockIn)
-    {
+    private boolean isBlockTranslucent(Block blockIn) {
         return blockIn != null && blockIn.getBlockLayer() == EnumWorldBlockLayer.TRANSLUCENT;
     }
 
     /**
      * Rotate the render around X and Y
-     *  
+     *
      * @param angleY The angle for the rotation arround Y
      */
-    private void rotateArroundXAndY(float angle, float angleY)
-    {
+    private void rotateArroundXAndY(float angle, float angleY) {
         GlStateManager.pushMatrix();
         GlStateManager.rotate(angle, 1.0F, 0.0F, 0.0F);
         GlStateManager.rotate(angleY, 0.0F, 1.0F, 0.0F);
@@ -113,25 +109,22 @@ public class ItemRenderer
     /**
      * Set the OpenGL LightMapTextureCoords based on the AbstractClientPlayer
      */
-    private void setLightMapFromPlayer(AbstractClientPlayer clientPlayer)
-    {
-        int i = this.mc.theWorld.getCombinedLight(new BlockPos(clientPlayer.posX, clientPlayer.posY + (double)clientPlayer.getEyeHeight(), clientPlayer.posZ), 0);
+    private void setLightMapFromPlayer(AbstractClientPlayer clientPlayer) {
+        int i = this.mc.theWorld.getCombinedLight(new BlockPos(clientPlayer.posX, clientPlayer.posY + (double) clientPlayer.getEyeHeight(), clientPlayer.posZ), 0);
 
-        if (Config.isDynamicLights())
-        {
+        if (Config.isDynamicLights()) {
             i = DynamicLights.getCombinedLight(this.mc.getRenderViewEntity(), i);
         }
 
-        float f = (float)(i & 65535);
-        float f1 = (float)(i >> 16);
+        float f = (float) (i & 65535);
+        float f1 = (float) (i >> 16);
         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, f, f1);
     }
 
     /**
      * Rotate the render according to the player's yaw and pitch
      */
-    private void rotateWithPlayerRotations(EntityPlayerSP entityplayerspIn, float partialTicks)
-    {
+    private void rotateWithPlayerRotations(EntityPlayerSP entityplayerspIn, float partialTicks) {
         float f = entityplayerspIn.prevRenderArmPitch + (entityplayerspIn.renderArmPitch - entityplayerspIn.prevRenderArmPitch) * partialTicks;
         float f1 = entityplayerspIn.prevRenderArmYaw + (entityplayerspIn.renderArmYaw - entityplayerspIn.prevRenderArmYaw) * partialTicks;
         GlStateManager.rotate((entityplayerspIn.rotationPitch - f) * 0.1F, 1.0F, 0.0F, 0.0F);
@@ -140,19 +133,17 @@ public class ItemRenderer
 
     /**
      * Return the angle to render the Map
-     *  
+     *
      * @param pitch The player's pitch
      */
-    private float getMapAngleFromPitch(float pitch)
-    {
+    private float getMapAngleFromPitch(float pitch) {
         float f = 1.0F - pitch / 45.0F + 0.1F;
         f = MathHelper.clamp_float(f, 0.0F, 1.0F);
-        f = -MathHelper.cos(f * (float)Math.PI) * 0.5F + 0.5F;
+        f = -MathHelper.cos(f * (float) Math.PI) * 0.5F + 0.5F;
         return f;
     }
 
-    private void renderRightArm(RenderPlayer renderPlayerIn)
-    {
+    private void renderRightArm(RenderPlayer renderPlayerIn) {
         GlStateManager.pushMatrix();
         GlStateManager.rotate(54.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(64.0F, 1.0F, 0.0F, 0.0F);
@@ -162,8 +153,7 @@ public class ItemRenderer
         GlStateManager.popMatrix();
     }
 
-    private void renderLeftArm(RenderPlayer renderPlayerIn)
-    {
+    private void renderLeftArm(RenderPlayer renderPlayerIn) {
         GlStateManager.pushMatrix();
         GlStateManager.rotate(92.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(45.0F, 1.0F, 0.0F, 0.0F);
@@ -173,14 +163,12 @@ public class ItemRenderer
         GlStateManager.popMatrix();
     }
 
-    private void renderPlayerArms(AbstractClientPlayer clientPlayer)
-    {
+    private void renderPlayerArms(AbstractClientPlayer clientPlayer) {
         this.mc.getTextureManager().bindTexture(clientPlayer.getLocationSkin());
         Render<AbstractClientPlayer> render = this.renderManager.<AbstractClientPlayer>getEntityRenderObject(this.mc.thePlayer);
-        RenderPlayer renderplayer = (RenderPlayer)render;
+        RenderPlayer renderplayer = (RenderPlayer) render;
 
-        if (!clientPlayer.isInvisible())
-        {
+        if (!clientPlayer.isInvisible()) {
             GlStateManager.disableCull();
             this.renderRightArm(renderplayer);
             this.renderLeftArm(renderplayer);
@@ -188,11 +176,10 @@ public class ItemRenderer
         }
     }
 
-    private void renderItemMap(AbstractClientPlayer clientPlayer, float pitch, float equipmentProgress, float swingProgress)
-    {
-        float f = -0.4F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float)Math.PI);
-        float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float)Math.PI * 2.0F);
-        float f2 = -0.2F * MathHelper.sin(swingProgress * (float)Math.PI);
+    private void renderItemMap(AbstractClientPlayer clientPlayer, float pitch, float equipmentProgress, float swingProgress) {
+        float f = -0.4F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float) Math.PI);
+        float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float) Math.PI * 2.0F);
+        float f2 = -0.2F * MathHelper.sin(swingProgress * (float) Math.PI);
         GlStateManager.translate(f, f1, f2);
         float f3 = this.getMapAngleFromPitch(pitch);
         GlStateManager.translate(0.0F, 0.04F, -0.72F);
@@ -202,8 +189,8 @@ public class ItemRenderer
         GlStateManager.rotate(f3 * -85.0F, 0.0F, 0.0F, 1.0F);
         GlStateManager.rotate(0.0F, 1.0F, 0.0F, 0.0F);
         this.renderPlayerArms(clientPlayer);
-        float f4 = MathHelper.sin(swingProgress * swingProgress * (float)Math.PI);
-        float f5 = MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float)Math.PI);
+        float f4 = MathHelper.sin(swingProgress * swingProgress * (float) Math.PI);
+        float f5 = MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float) Math.PI);
         GlStateManager.rotate(f4 * -20.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(f5 * -20.0F, 0.0F, 0.0F, 1.0F);
         GlStateManager.rotate(f5 * -80.0F, 1.0F, 0.0F, 0.0F);
@@ -225,31 +212,29 @@ public class ItemRenderer
         tessellator.draw();
         MapData mapdata = Items.filled_map.getMapData(this.itemToRender, this.mc.theWorld);
 
-        if (mapdata != null)
-        {
+        if (mapdata != null) {
             this.mc.entityRenderer.getMapItemRenderer().renderMap(mapdata, false);
         }
     }
 
     /**
      * Render the player's arm
-     *  
+     *
      * @param equipProgress The progress of equiping the item
      * @param swingProgress The swing movement progression
      */
-    private void renderPlayerArm(AbstractClientPlayer clientPlayer, float equipProgress, float swingProgress)
-    {
-        float f = -0.3F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float)Math.PI);
-        float f1 = 0.4F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float)Math.PI * 2.0F);
-        float f2 = -0.4F * MathHelper.sin(swingProgress * (float)Math.PI);
-        GlStateManager.translate(f, f1, f2);
+    private void renderPlayerArm(AbstractClientPlayer clientPlayer, float equipProgress, float swingProgress) {
+        float f = -0.3F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float) Math.PI);
+        float f1 = 0.4F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float) Math.PI * 2.0F);
+        float f2 = -0.4F * MathHelper.sin(swingProgress * (float) Math.PI);
+        GlStateManager.translate(f, f1, f2); // swing position
         GlStateManager.translate(0.64000005F, -0.6F, -0.71999997F);
         GlStateManager.translate(0.0F, equipProgress * -0.6F, 0.0F);
         GlStateManager.rotate(45.0F, 0.0F, 1.0F, 0.0F);
-        float f3 = MathHelper.sin(swingProgress * swingProgress * (float)Math.PI);
-        float f4 = MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float)Math.PI);
-        GlStateManager.rotate(f4 * 70.0F, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate(f3 * -20.0F, 0.0F, 0.0F, 1.0F);
+        float f3 = MathHelper.sin(swingProgress * swingProgress * (float) Math.PI);
+        float f4 = MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float) Math.PI);
+        GlStateManager.rotate(f4 * 70.0F, 0.0F, 1.0F, 0.0F); // swing rotation
+        GlStateManager.rotate(f3 * -20.0F, 0.0F, 0.0F, 1.0F); // swing rotation
         this.mc.getTextureManager().bindTexture(clientPlayer.getLocationSkin());
         GlStateManager.translate(-1.0F, 3.6F, 3.5F);
         GlStateManager.rotate(120.0F, 0.0F, 0.0F, 1.0F);
@@ -259,42 +244,39 @@ public class ItemRenderer
         GlStateManager.translate(5.6F, 0.0F, 0.0F);
         Render<AbstractClientPlayer> render = this.renderManager.<AbstractClientPlayer>getEntityRenderObject(this.mc.thePlayer);
         GlStateManager.disableCull();
-        RenderPlayer renderplayer = (RenderPlayer)render;
+        RenderPlayer renderplayer = (RenderPlayer) render;
         renderplayer.renderRightArm(this.mc.thePlayer);
         GlStateManager.enableCull();
     }
 
     /**
      * Rotate and translate render to show item consumption
-     *  
+     *
      * @param swingProgress The swing movement progress
      */
-    private void doItemUsedTransformations(float swingProgress)
-    {
-        float f = -0.4F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float)Math.PI);
-        float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float)Math.PI * 2.0F);
-        float f2 = -0.2F * MathHelper.sin(swingProgress * (float)Math.PI);
+    private void doItemUsedTransformations(float swingProgress) {
+        float f = -0.4F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float) Math.PI);
+        float f1 = 0.2F * MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float) Math.PI * 2.0F);
+        float f2 = -0.2F * MathHelper.sin(swingProgress * (float) Math.PI);
         GlStateManager.translate(f, f1, f2);
     }
 
     /**
      * Perform the drinking animation movement
-     *  
+     *
      * @param partialTicks Partials ticks
      */
-    private void performDrinking(AbstractClientPlayer clientPlayer, float partialTicks)
-    {
-        float f = (float)clientPlayer.getItemInUseCount() - partialTicks + 1.0F;
-        float f1 = f / (float)this.itemToRender.getMaxItemUseDuration();
-        float f2 = MathHelper.abs(MathHelper.cos(f / 4.0F * (float)Math.PI) * 0.1F);
-
-        if (f1 >= 0.8F)
-        {
+    private void performDrinking(AbstractClientPlayer clientPlayer, float partialTicks) {
+        float f = (float) clientPlayer.getItemInUseCount() - partialTicks + 1.0F;
+        float f1 = f / (float) this.itemToRender.getMaxItemUseDuration();
+        float f2 = MathHelper.abs(MathHelper.cos(f / 4.0F * (float) Math.PI) * 0.1F);
+
+        if (f1 >= 0.8F) {
             f2 = 0.0F;
         }
 
         GlStateManager.translate(0.0F, f2, 0.0F);
-        float f3 = 1.0F - (float)Math.pow((double)f1, 27.0D);
+        float f3 = 1.0F - (float) Math.pow((double) f1, 27.0D);
         GlStateManager.translate(f3 * 0.6F, f3 * -0.5F, f3 * 0.0F);
         GlStateManager.rotate(f3 * 90.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(f3 * 10.0F, 1.0F, 0.0F, 0.0F);
@@ -304,13 +286,12 @@ public class ItemRenderer
     /**
      * Performs transformations prior to the rendering of a held item in first person.
      */
-    private void transformFirstPersonItem(float equipProgress, float swingProgress)
-    {
+    private void transformFirstPersonItem(float equipProgress, float swingProgress) {
         GlStateManager.translate(0.56F, -0.52F, -0.71999997F);
         GlStateManager.translate(0.0F, equipProgress * -0.6F, 0.0F);
         GlStateManager.rotate(45.0F, 0.0F, 1.0F, 0.0F);
-        float f = MathHelper.sin(swingProgress * swingProgress * (float)Math.PI);
-        float f1 = MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float)Math.PI);
+        float f = MathHelper.sin(swingProgress * swingProgress * (float) Math.PI);
+        float f1 = MathHelper.sin(MathHelper.sqrt_float(swingProgress) * (float) Math.PI);
         GlStateManager.rotate(f * -20.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(f1 * -20.0F, 0.0F, 0.0F, 1.0F);
         GlStateManager.rotate(f1 * -80.0F, 1.0F, 0.0F, 0.0F);
@@ -319,26 +300,23 @@ public class ItemRenderer
 
     /**
      * Translate and rotate the render to look like holding a bow
-     *  
+     *
      * @param partialTicks Partial ticks
      */
-    private void doBowTransformations(float partialTicks, AbstractClientPlayer clientPlayer)
-    {
+    private void doBowTransformations(float partialTicks, AbstractClientPlayer clientPlayer) {
         GlStateManager.rotate(-18.0F, 0.0F, 0.0F, 1.0F);
         GlStateManager.rotate(-12.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(-8.0F, 1.0F, 0.0F, 0.0F);
         GlStateManager.translate(-0.9F, 0.2F, 0.0F);
-        float f = (float)this.itemToRender.getMaxItemUseDuration() - ((float)clientPlayer.getItemInUseCount() - partialTicks + 1.0F);
+        float f = (float) this.itemToRender.getMaxItemUseDuration() - ((float) clientPlayer.getItemInUseCount() - partialTicks + 1.0F);
         float f1 = f / 20.0F;
         f1 = (f1 * f1 + f1 * 2.0F) / 3.0F;
 
-        if (f1 > 1.0F)
-        {
+        if (f1 > 1.0F) {
             f1 = 1.0F;
         }
 
-        if (f1 > 0.1F)
-        {
+        if (f1 > 0.1F) {
             float f2 = MathHelper.sin((f - 0.1F) * 1.3F);
             float f3 = f1 - 0.1F;
             float f4 = f2 * f3;
@@ -352,8 +330,7 @@ public class ItemRenderer
     /**
      * Translate and rotate the render for holding a block
      */
-    private void doBlockTransformations()
-    {
+    private void doBlockTransformations() {
         GlStateManager.translate(-0.5F, 0.2F, 0.0F);
         GlStateManager.rotate(30.0F, 0.0F, 1.0F, 0.0F);
         GlStateManager.rotate(-80.0F, 1.0F, 0.0F, 0.0F);
@@ -363,10 +340,8 @@ public class ItemRenderer
     /**
      * Renders the active item in the player's hand when in first person mode. Args: partialTickTime
      */
-    public void renderItemInFirstPerson(float partialTicks)
-    {
-        if (!Config.isShaders() || !Shaders.isSkipRenderHand())
-        {
+    public void renderItemInFirstPerson(float partialTicks) {
+        if (!Config.isShaders() || !Shaders.isSkipRenderHand()) {
             float f = 1.0F - (this.prevEquippedProgress + (this.equippedProgress - this.prevEquippedProgress) * partialTicks);
             AbstractClientPlayer abstractclientplayer = this.mc.thePlayer;
             float f1 = abstractclientplayer.getSwingProgress(partialTicks);
@@ -374,22 +349,17 @@ public class ItemRenderer
             float f3 = abstractclientplayer.prevRotationYaw + (abstractclientplayer.rotationYaw - abstractclientplayer.prevRotationYaw) * partialTicks;
             this.rotateArroundXAndY(f2, f3);
             this.setLightMapFromPlayer(abstractclientplayer);
-            this.rotateWithPlayerRotations((EntityPlayerSP)abstractclientplayer, partialTicks);
+            this.rotateWithPlayerRotations((EntityPlayerSP) abstractclientplayer, partialTicks);
             GlStateManager.enableRescaleNormal();
             GlStateManager.pushMatrix();
 
-            if (this.itemToRender != null)
-            {
-                if (this.itemToRender.getItem() instanceof ItemMap)
-                {
+            if (this.itemToRender != null) {
+                if (this.itemToRender.getItem() instanceof ItemMap) {
                     this.renderItemMap(abstractclientplayer, f2, f, f1);
-                }
-                else if (abstractclientplayer.getItemInUseCount() > 0)
-                {
+                } else if (abstractclientplayer.getItemInUseCount() > 0) {
                     EnumAction enumaction = this.itemToRender.getItemUseAction();
 
-                    switch (enumaction)
-                    {
+                    switch (enumaction) {
                         case NONE:
                             this.transformFirstPersonItem(f, 0.0F);
                             break;
@@ -409,17 +379,13 @@ public class ItemRenderer
                             this.transformFirstPersonItem(f, 0.0F);
                             this.doBowTransformations(partialTicks, abstractclientplayer);
                     }
-                }
-                else
-                {
+                } else {
                     this.doItemUsedTransformations(f1);
                     this.transformFirstPersonItem(f, f1);
                 }
 
                 this.renderItem(abstractclientplayer, this.itemToRender, ItemCameraTransforms.TransformType.FIRST_PERSON);
-            }
-            else if (!abstractclientplayer.isInvisible())
-            {
+            } else if (!abstractclientplayer.isInvisible()) {
                 this.renderPlayerArm(abstractclientplayer, f, f1);
             }
 
@@ -432,51 +398,42 @@ public class ItemRenderer
     /**
      * Renders all the overlays that are in first person mode. Args: partialTickTime
      */
-    public void renderOverlays(float partialTicks)
-    {
+    public void renderOverlays(float partialTicks) {
         GlStateManager.disableAlpha();
 
-        if (this.mc.thePlayer.isEntityInsideOpaqueBlock())
-        {
+        if (this.mc.thePlayer.isEntityInsideOpaqueBlock()) {
             IBlockState iblockstate = this.mc.theWorld.getBlockState(new BlockPos(this.mc.thePlayer));
             BlockPos blockpos = new BlockPos(this.mc.thePlayer);
             EntityPlayer entityplayer = this.mc.thePlayer;
 
-            for (int i = 0; i < 8; ++i)
-            {
-                double d0 = entityplayer.posX + (double)(((float)((i >> 0) % 2) - 0.5F) * entityplayer.width * 0.8F);
-                double d1 = entityplayer.posY + (double)(((float)((i >> 1) % 2) - 0.5F) * 0.1F);
-                double d2 = entityplayer.posZ + (double)(((float)((i >> 2) % 2) - 0.5F) * entityplayer.width * 0.8F);
-                BlockPos blockpos1 = new BlockPos(d0, d1 + (double)entityplayer.getEyeHeight(), d2);
+            for (int i = 0; i < 8; ++i) {
+                double d0 = entityplayer.posX + (double) (((float) ((i >> 0) % 2) - 0.5F) * entityplayer.width * 0.8F);
+                double d1 = entityplayer.posY + (double) (((float) ((i >> 1) % 2) - 0.5F) * 0.1F);
+                double d2 = entityplayer.posZ + (double) (((float) ((i >> 2) % 2) - 0.5F) * entityplayer.width * 0.8F);
+                BlockPos blockpos1 = new BlockPos(d0, d1 + (double) entityplayer.getEyeHeight(), d2);
                 IBlockState iblockstate1 = this.mc.theWorld.getBlockState(blockpos1);
 
-                if (iblockstate1.getBlock().isVisuallyOpaque())
-                {
+                if (iblockstate1.getBlock().isVisuallyOpaque()) {
                     iblockstate = iblockstate1;
                     blockpos = blockpos1;
                 }
             }
 
-            if (iblockstate.getBlock().getRenderType() != -1)
-            {
+            if (iblockstate.getBlock().getRenderType() != -1) {
                 Object object = Reflector.getFieldValue(Reflector.RenderBlockOverlayEvent_OverlayType_BLOCK);
 
-                if (!Reflector.callBoolean(Reflector.ForgeEventFactory_renderBlockOverlay, new Object[] {this.mc.thePlayer, Float.valueOf(partialTicks), object, iblockstate, blockpos}))
-                {
+                if (!Reflector.callBoolean(Reflector.ForgeEventFactory_renderBlockOverlay, new Object[]{this.mc.thePlayer, Float.valueOf(partialTicks), object, iblockstate, blockpos})) {
                     this.renderBlockInHand(partialTicks, this.mc.getBlockRendererDispatcher().getBlockModelShapes().getTexture(iblockstate));
                 }
             }
         }
 
-        if (!this.mc.thePlayer.isSpectator())
-        {
-            if (this.mc.thePlayer.isInsideOfMaterial(Material.water) && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderWaterOverlay, new Object[] {this.mc.thePlayer, Float.valueOf(partialTicks)}))
-            {
+        if (!this.mc.thePlayer.isSpectator()) {
+            if (this.mc.thePlayer.isInsideOfMaterial(Material.water) && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderWaterOverlay, new Object[]{this.mc.thePlayer, Float.valueOf(partialTicks)})) {
                 this.renderWaterOverlayTexture(partialTicks);
             }
 
-            if (this.mc.thePlayer.isBurning() && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderFireOverlay, new Object[] {this.mc.thePlayer, Float.valueOf(partialTicks)}))
-            {
+            if (this.mc.thePlayer.isBurning() && !Reflector.callBoolean(Reflector.ForgeEventFactory_renderFireOverlay, new Object[]{this.mc.thePlayer, Float.valueOf(partialTicks)})) {
                 this.renderFireInFirstPerson(partialTicks);
             }
         }
@@ -486,12 +443,11 @@ public class ItemRenderer
 
     /**
      * Render the block in the player's hand
-     *  
+     *
      * @param partialTicks Partial ticks
-     * @param atlas The TextureAtlasSprite to render
+     * @param atlas        The TextureAtlasSprite to render
      */
-    private void renderBlockInHand(float partialTicks, TextureAtlasSprite atlas)
-    {
+    private void renderBlockInHand(float partialTicks, TextureAtlasSprite atlas) {
         this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
         Tessellator tessellator = Tessellator.getInstance();
         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
@@ -508,10 +464,10 @@ public class ItemRenderer
         float f8 = atlas.getMinV();
         float f9 = atlas.getMaxV();
         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
-        worldrenderer.pos(-1.0D, -1.0D, -0.5D).tex((double)f7, (double)f9).endVertex();
-        worldrenderer.pos(1.0D, -1.0D, -0.5D).tex((double)f6, (double)f9).endVertex();
-        worldrenderer.pos(1.0D, 1.0D, -0.5D).tex((double)f6, (double)f8).endVertex();
-        worldrenderer.pos(-1.0D, 1.0D, -0.5D).tex((double)f7, (double)f8).endVertex();
+        worldrenderer.pos(-1.0D, -1.0D, -0.5D).tex((double) f7, (double) f9).endVertex();
+        worldrenderer.pos(1.0D, -1.0D, -0.5D).tex((double) f6, (double) f9).endVertex();
+        worldrenderer.pos(1.0D, 1.0D, -0.5D).tex((double) f6, (double) f8).endVertex();
+        worldrenderer.pos(-1.0D, 1.0D, -0.5D).tex((double) f7, (double) f8).endVertex();
         tessellator.draw();
         GlStateManager.popMatrix();
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
@@ -520,13 +476,11 @@ public class ItemRenderer
     /**
      * Renders a texture that warps around based on the direction the player is looking. Texture needs to be bound
      * before being called. Used for the water overlay. Args: parialTickTime
-     *  
+     *
      * @param partialTicks Partial ticks
      */
-    private void renderWaterOverlayTexture(float partialTicks)
-    {
-        if (!Config.isShaders() || Shaders.isUnderwaterOverlay())
-        {
+    private void renderWaterOverlayTexture(float partialTicks) {
+        if (!Config.isShaders() || Shaders.isUnderwaterOverlay()) {
             this.mc.getTextureManager().bindTexture(RES_UNDERWATER_OVERLAY);
             Tessellator tessellator = Tessellator.getInstance();
             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
@@ -544,10 +498,10 @@ public class ItemRenderer
             float f7 = -this.mc.thePlayer.rotationYaw / 64.0F;
             float f8 = this.mc.thePlayer.rotationPitch / 64.0F;
             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
-            worldrenderer.pos(-1.0D, -1.0D, -0.5D).tex((double)(4.0F + f7), (double)(4.0F + f8)).endVertex();
-            worldrenderer.pos(1.0D, -1.0D, -0.5D).tex((double)(0.0F + f7), (double)(4.0F + f8)).endVertex();
-            worldrenderer.pos(1.0D, 1.0D, -0.5D).tex((double)(0.0F + f7), (double)(0.0F + f8)).endVertex();
-            worldrenderer.pos(-1.0D, 1.0D, -0.5D).tex((double)(4.0F + f7), (double)(0.0F + f8)).endVertex();
+            worldrenderer.pos(-1.0D, -1.0D, -0.5D).tex((double) (4.0F + f7), (double) (4.0F + f8)).endVertex();
+            worldrenderer.pos(1.0D, -1.0D, -0.5D).tex((double) (0.0F + f7), (double) (4.0F + f8)).endVertex();
+            worldrenderer.pos(1.0D, 1.0D, -0.5D).tex((double) (0.0F + f7), (double) (0.0F + f8)).endVertex();
+            worldrenderer.pos(-1.0D, 1.0D, -0.5D).tex((double) (4.0F + f7), (double) (0.0F + f8)).endVertex();
             tessellator.draw();
             GlStateManager.popMatrix();
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
@@ -557,11 +511,10 @@ public class ItemRenderer
 
     /**
      * Renders the fire on the screen for first person mode. Arg: partialTickTime
-     *  
+     *
      * @param partialTicks Partial ticks
      */
-    private void renderFireInFirstPerson(float partialTicks)
-    {
+    private void renderFireInFirstPerson(float partialTicks) {
         Tessellator tessellator = Tessellator.getInstance();
         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
         GlStateManager.color(1.0F, 1.0F, 1.0F, 0.9F);
@@ -571,8 +524,7 @@ public class ItemRenderer
         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
         float f = 1.0F;
 
-        for (int i = 0; i < 2; ++i)
-        {
+        for (int i = 0; i < 2; ++i) {
             GlStateManager.pushMatrix();
             TextureAtlasSprite textureatlassprite = this.mc.getTextureMapBlocks().getAtlasSprite("minecraft:blocks/fire_layer_1");
             this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
@@ -585,14 +537,14 @@ public class ItemRenderer
             float f7 = 0.0F - f / 2.0F;
             float f8 = f7 + f;
             float f9 = -0.5F;
-            GlStateManager.translate((float)(-(i * 2 - 1)) * 0.24F, -0.3F, 0.0F);
-            GlStateManager.rotate((float)(i * 2 - 1) * 10.0F, 0.0F, 1.0F, 0.0F);
+            GlStateManager.translate((float) (-(i * 2 - 1)) * 0.24F, -0.3F, 0.0F);
+            GlStateManager.rotate((float) (i * 2 - 1) * 10.0F, 0.0F, 1.0F, 0.0F);
             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
             worldrenderer.setSprite(textureatlassprite);
-            worldrenderer.pos((double)f5, (double)f7, (double)f9).tex((double)f2, (double)f4).endVertex();
-            worldrenderer.pos((double)f6, (double)f7, (double)f9).tex((double)f1, (double)f4).endVertex();
-            worldrenderer.pos((double)f6, (double)f8, (double)f9).tex((double)f1, (double)f3).endVertex();
-            worldrenderer.pos((double)f5, (double)f8, (double)f9).tex((double)f2, (double)f3).endVertex();
+            worldrenderer.pos((double) f5, (double) f7, (double) f9).tex((double) f2, (double) f4).endVertex();
+            worldrenderer.pos((double) f6, (double) f7, (double) f9).tex((double) f1, (double) f4).endVertex();
+            worldrenderer.pos((double) f6, (double) f8, (double) f9).tex((double) f1, (double) f3).endVertex();
+            worldrenderer.pos((double) f5, (double) f8, (double) f9).tex((double) f2, (double) f3).endVertex();
             tessellator.draw();
             GlStateManager.popMatrix();
         }
@@ -603,23 +555,18 @@ public class ItemRenderer
         GlStateManager.depthFunc(515);
     }
 
-    public void updateEquippedItem()
-    {
+    public void updateEquippedItem() {
         this.prevEquippedProgress = this.equippedProgress;
         EntityPlayer entityplayer = this.mc.thePlayer;
         ItemStack itemstack = entityplayer.inventory.getCurrentItem();
         boolean flag = false;
 
-        if (this.itemToRender != null && itemstack != null)
-        {
-            if (!this.itemToRender.getIsItemStackEqual(itemstack))
-            {
-                if (Reflector.ForgeItem_shouldCauseReequipAnimation.exists())
-                {
-                    boolean flag1 = Reflector.callBoolean(this.itemToRender.getItem(), Reflector.ForgeItem_shouldCauseReequipAnimation, new Object[] {this.itemToRender, itemstack, Boolean.valueOf(this.equippedItemSlot != entityplayer.inventory.currentItem)});
+        if (this.itemToRender != null && itemstack != null) {
+            if (!this.itemToRender.getIsItemStackEqual(itemstack)) {
+                if (Reflector.ForgeItem_shouldCauseReequipAnimation.exists()) {
+                    boolean flag1 = Reflector.callBoolean(this.itemToRender.getItem(), Reflector.ForgeItem_shouldCauseReequipAnimation, new Object[]{this.itemToRender, itemstack, Boolean.valueOf(this.equippedItemSlot != entityplayer.inventory.currentItem)});
 
-                    if (!flag1)
-                    {
+                    if (!flag1) {
                         this.itemToRender = itemstack;
                         this.equippedItemSlot = entityplayer.inventory.currentItem;
                         return;
@@ -628,13 +575,9 @@ public class ItemRenderer
 
                 flag = true;
             }
-        }
-        else if (this.itemToRender == null && itemstack == null)
-        {
+        } else if (this.itemToRender == null && itemstack == null) {
             flag = false;
-        }
-        else
-        {
+        } else {
             flag = true;
         }
 
@@ -643,13 +586,11 @@ public class ItemRenderer
         float f1 = MathHelper.clamp_float(f - this.equippedProgress, -f2, f2);
         this.equippedProgress += f1;
 
-        if (this.equippedProgress < 0.1F)
-        {
+        if (this.equippedProgress < 0.1F) {
             this.itemToRender = itemstack;
             this.equippedItemSlot = entityplayer.inventory.currentItem;
 
-            if (Config.isShaders())
-            {
+            if (Config.isShaders()) {
                 Shaders.setItemToRenderMain(itemstack);
             }
         }
@@ -658,16 +599,14 @@ public class ItemRenderer
     /**
      * Resets equippedProgress
      */
-    public void resetEquippedProgress()
-    {
+    public void resetEquippedProgress() {
         this.equippedProgress = 0.0F;
     }
 
     /**
      * Resets equippedProgress
      */
-    public void resetEquippedProgress2()
-    {
+    public void resetEquippedProgress2() {
         this.equippedProgress = 0.0F;
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/RenderGlobal.java b/src/main/java/net/minecraft/client/renderer/RenderGlobal.java
index 539375f..b55ada7 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderGlobal.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderGlobal.java
@@ -20,6 +20,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.gson.JsonSyntaxException;
+import com.jlmsz.util.renderer.IRenderManager;
 import net.optifine.CustomColors;
 import net.optifine.CustomSky;
 import net.optifine.DynamicLights;
@@ -132,7 +133,7 @@ public class RenderGlobal implements IWorldAccess, IResourceManagerReloadListene
 
     /** The RenderEngine instance used by RenderGlobal */
     private final TextureManager renderEngine;
-    private final RenderManager renderManager;
+    private final IRenderManager renderManager;
     private WorldClient theWorld;
     private Set<RenderChunk> chunksToUpdate = Sets.<RenderChunk>newLinkedHashSet();
     private List<RenderGlobal.ContainerLocalRenderInformation> renderInfos = Lists.<RenderGlobal.ContainerLocalRenderInformation>newArrayListWithCapacity(69696);
diff --git a/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java b/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java
index bc20f6e..90f65f8 100644
--- a/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java
+++ b/src/main/java/net/minecraft/client/renderer/block/model/ItemModelGenerator.java
@@ -2,68 +2,60 @@ package net.minecraft.client.renderer.block.model;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.util.List;
-import java.util.Map;
+import com.jlmsz.fixes.ModelFix;
 import net.minecraft.client.renderer.texture.TextureAtlasSprite;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ResourceLocation;
 import org.lwjgl.util.vector.Vector3f;
 
-public class ItemModelGenerator
-{
-    public static final List<String> LAYERS = Lists.newArrayList(new String[] {"layer0", "layer1", "layer2", "layer3", "layer4"});
+import java.util.List;
+import java.util.Map;
+
+public class ItemModelGenerator {
+    public static final List<String> LAYERS = Lists.newArrayList(new String[]{"layer0", "layer1", "layer2", "layer3", "layer4"});
 
-    public ModelBlock makeItemModel(TextureMap textureMapIn, ModelBlock blockModel)
-    {
+    public ModelBlock makeItemModel(TextureMap textureMapIn, ModelBlock blockModel) {
         Map<String, String> map = Maps.<String, String>newHashMap();
         List<BlockPart> list = Lists.<BlockPart>newArrayList();
 
-        for (int i = 0; i < LAYERS.size(); ++i)
-        {
-            String s = (String)LAYERS.get(i);
+        for (int i = 0; i < LAYERS.size(); ++i) {
+            String s = (String) LAYERS.get(i);
 
-            if (!blockModel.isTexturePresent(s))
-            {
+            if (!blockModel.isTexturePresent(s)) {
                 break;
             }
 
             String s1 = blockModel.resolveTextureName(s);
             map.put(s, s1);
             TextureAtlasSprite textureatlassprite = textureMapIn.getAtlasSprite((new ResourceLocation(s1)).toString());
-            list.addAll(this.func_178394_a(i, s, textureatlassprite));
+            list.addAll(this.addLayerElements(i, s, textureatlassprite));
         }
 
-        if (list.isEmpty())
-        {
+        if (list.isEmpty()) {
             return null;
-        }
-        else
-        {
-            map.put("particle", blockModel.isTexturePresent("particle") ? blockModel.resolveTextureName("particle") : (String)map.get("layer0"));
+        } else {
+            map.put("particle", blockModel.isTexturePresent("particle") ? blockModel.resolveTextureName("particle") : (String) map.get("layer0"));
             return new ModelBlock(list, map, false, false, blockModel.getAllTransforms());
         }
     }
 
-    private List<BlockPart> func_178394_a(int p_178394_1_, String p_178394_2_, TextureAtlasSprite p_178394_3_)
-    {
+    private List<BlockPart> addLayerElements(int p_178394_1_, String p_178394_2_, TextureAtlasSprite p_178394_3_) {
         Map<EnumFacing, BlockPartFace> map = Maps.<EnumFacing, BlockPartFace>newHashMap();
-        map.put(EnumFacing.SOUTH, new BlockPartFace((EnumFacing)null, p_178394_1_, p_178394_2_, new BlockFaceUV(new float[] {0.0F, 0.0F, 16.0F, 16.0F}, 0)));
-        map.put(EnumFacing.NORTH, new BlockPartFace((EnumFacing)null, p_178394_1_, p_178394_2_, new BlockFaceUV(new float[] {16.0F, 0.0F, 0.0F, 16.0F}, 0)));
+        map.put(EnumFacing.SOUTH, new BlockPartFace((EnumFacing) null, p_178394_1_, p_178394_2_, new BlockFaceUV(new float[]{0.0F, 0.0F, 16.0F, 16.0F}, 0)));
+        map.put(EnumFacing.NORTH, new BlockPartFace((EnumFacing) null, p_178394_1_, p_178394_2_, new BlockFaceUV(new float[]{16.0F, 0.0F, 0.0F, 16.0F}, 0)));
         List<BlockPart> list = Lists.<BlockPart>newArrayList();
-        list.add(new BlockPart(new Vector3f(0.0F, 0.0F, 7.5F), new Vector3f(16.0F, 16.0F, 8.5F), map, (BlockPartRotation)null, true));
-        list.addAll(this.func_178397_a(p_178394_3_, p_178394_2_, p_178394_1_));
+        list.add(new BlockPart(new Vector3f(0.0F, 0.0F, 7.5F), new Vector3f(16.0F, 16.0F, 8.5F), map, (BlockPartRotation) null, true));
+        list.addAll(this.getBlockParts(p_178394_3_, p_178394_2_, p_178394_1_));
         return list;
     }
 
-    private List<BlockPart> func_178397_a(TextureAtlasSprite p_178397_1_, String p_178397_2_, int p_178397_3_)
-    {
-        float f = (float)p_178397_1_.getIconWidth();
-        float f1 = (float)p_178397_1_.getIconHeight();
-        List<BlockPart> list = Lists.<BlockPart>newArrayList();
+    private List<BlockPart> getBlockParts(TextureAtlasSprite p_178397_1_, String texture, int tintIndex) {
+        float f = (float) p_178397_1_.getIconWidth();
+        float f1 = (float) p_178397_1_.getIconHeight();
+        List<BlockPart> list = Lists.newArrayList();
 
-        for (ItemModelGenerator.Span itemmodelgenerator$span : this.func_178393_a(p_178397_1_))
-        {
+        for (ItemModelGenerator.Span generatorSpan : this.getSpans(p_178397_1_)) {
             float f2 = 0.0F;
             float f3 = 0.0F;
             float f4 = 0.0F;
@@ -74,13 +66,12 @@ public class ItemModelGenerator
             float f9 = 0.0F;
             float f10 = 0.0F;
             float f11 = 0.0F;
-            float f12 = (float)itemmodelgenerator$span.func_178385_b();
-            float f13 = (float)itemmodelgenerator$span.func_178384_c();
-            float f14 = (float)itemmodelgenerator$span.func_178381_d();
-            ItemModelGenerator.SpanFacing itemmodelgenerator$spanfacing = itemmodelgenerator$span.func_178383_a();
+            float f12 = (float) generatorSpan.getMin();
+            float f13 = (float) generatorSpan.getMax();
+            float f14 = (float) generatorSpan.getAnchor();
+            ItemModelGenerator.SpanFacing spanFacing = generatorSpan.getFacing();
 
-            switch (itemmodelgenerator$spanfacing)
-            {
+            switch (spanFacing) {
                 case UP:
                     f6 = f12;
                     f2 = f12;
@@ -141,50 +132,47 @@ public class ItemModelGenerator
             f7 = f7 * f10;
             f8 = f8 * f11;
             f9 = f9 * f11;
-            Map<EnumFacing, BlockPartFace> map = Maps.<EnumFacing, BlockPartFace>newHashMap();
-            map.put(itemmodelgenerator$spanfacing.getFacing(), new BlockPartFace((EnumFacing)null, p_178397_3_, p_178397_2_, new BlockFaceUV(new float[] {f6, f8, f7, f9}, 0)));
+            Map<EnumFacing, BlockPartFace> map = Maps.newHashMap();
+            map.put(spanFacing.getFacing(), new BlockPartFace(null, tintIndex, texture, new BlockFaceUV(new float[]{f6, f8, f7, f9}, 0)));
 
-            switch (itemmodelgenerator$spanfacing)
-            {
+            switch (spanFacing) {
                 case UP:
-                    list.add(new BlockPart(new Vector3f(f2, f3, 7.5F), new Vector3f(f4, f3, 8.5F), map, (BlockPartRotation)null, true));
+                    list.add(new BlockPart(new Vector3f(f2, f3, 7.5F), new Vector3f(f4, f3, 8.5F), map, (BlockPartRotation) null, true));
                     break;
 
                 case DOWN:
-                    list.add(new BlockPart(new Vector3f(f2, f5, 7.5F), new Vector3f(f4, f5, 8.5F), map, (BlockPartRotation)null, true));
+                    list.add(new BlockPart(new Vector3f(f2, f5, 7.5F), new Vector3f(f4, f5, 8.5F), map, (BlockPartRotation) null, true));
                     break;
 
                 case LEFT:
-                    list.add(new BlockPart(new Vector3f(f2, f3, 7.5F), new Vector3f(f2, f5, 8.5F), map, (BlockPartRotation)null, true));
+                    list.add(new BlockPart(new Vector3f(f2, f3, 7.5F), new Vector3f(f2, f5, 8.5F), map, (BlockPartRotation) null, true));
                     break;
 
                 case RIGHT:
-                    list.add(new BlockPart(new Vector3f(f4, f3, 7.5F), new Vector3f(f4, f5, 8.5F), map, (BlockPartRotation)null, true));
+                    list.add(new BlockPart(new Vector3f(f4, f3, 7.5F), new Vector3f(f4, f5, 8.5F), map, (BlockPartRotation) null, true));
             }
         }
 
+        ModelFix.enlargeFaces(list);
+
         return list;
     }
 
-    private List<ItemModelGenerator.Span> func_178393_a(TextureAtlasSprite p_178393_1_)
-    {
-        int i = p_178393_1_.getIconWidth();
-        int j = p_178393_1_.getIconHeight();
+    private List<ItemModelGenerator.Span> getSpans(TextureAtlasSprite p_178393_1_) {
+        int iconWidth = p_178393_1_.getIconWidth();
+        int iconHeight = p_178393_1_.getIconHeight();
         List<ItemModelGenerator.Span> list = Lists.<ItemModelGenerator.Span>newArrayList();
 
-        for (int k = 0; k < p_178393_1_.getFrameCount(); ++k)
-        {
+        for (int k = 0; k < p_178393_1_.getFrameCount(); ++k) {
             int[] aint = p_178393_1_.getFrameTextureData(k)[0];
 
-            for (int l = 0; l < j; ++l)
-            {
-                for (int i1 = 0; i1 < i; ++i1)
-                {
-                    boolean flag = !this.func_178391_a(aint, i1, l, i, j);
-                    this.func_178396_a(ItemModelGenerator.SpanFacing.UP, list, aint, i1, l, i, j, flag);
-                    this.func_178396_a(ItemModelGenerator.SpanFacing.DOWN, list, aint, i1, l, i, j, flag);
-                    this.func_178396_a(ItemModelGenerator.SpanFacing.LEFT, list, aint, i1, l, i, j, flag);
-                    this.func_178396_a(ItemModelGenerator.SpanFacing.RIGHT, list, aint, i1, l, i, j, flag);
+            for (int y = 0; y < iconHeight; ++y) {
+                for (int x = 0; x < iconWidth; ++x) {
+                    boolean flag = !this.isTransparent(aint, x, y, iconWidth, iconHeight);
+                    this.checkTransition(ItemModelGenerator.SpanFacing.UP, list, aint, x, y, iconWidth, iconHeight, flag);
+                    this.checkTransition(ItemModelGenerator.SpanFacing.DOWN, list, aint, x, y, iconWidth, iconHeight, flag);
+                    this.checkTransition(ItemModelGenerator.SpanFacing.LEFT, list, aint, x, y, iconWidth, iconHeight, flag);
+                    this.checkTransition(ItemModelGenerator.SpanFacing.RIGHT, list, aint, x, y, iconWidth, iconHeight, flag);
                 }
             }
         }
@@ -192,135 +180,110 @@ public class ItemModelGenerator
         return list;
     }
 
-    private void func_178396_a(ItemModelGenerator.SpanFacing p_178396_1_, List<ItemModelGenerator.Span> p_178396_2_, int[] p_178396_3_, int p_178396_4_, int p_178396_5_, int p_178396_6_, int p_178396_7_, boolean p_178396_8_)
-    {
-        boolean flag = this.func_178391_a(p_178396_3_, p_178396_4_ + p_178396_1_.func_178372_b(), p_178396_5_ + p_178396_1_.func_178371_c(), p_178396_6_, p_178396_7_) && p_178396_8_;
+    private void checkTransition(ItemModelGenerator.SpanFacing spanFacing, List<ItemModelGenerator.Span> spans, int[] colors, int x, int y, int width, int height, boolean p_178396_8_) {
+        boolean transparent = this.isTransparent(colors, x + spanFacing.getXOffset(), y + spanFacing.getYOffset(), width, height) && p_178396_8_;
 
-        if (flag)
-        {
-            this.func_178395_a(p_178396_2_, p_178396_1_, p_178396_4_, p_178396_5_);
+        if (transparent) {
+            this.createOrExpandSpan(spans, spanFacing, x, y);
         }
     }
 
-    private void func_178395_a(List<ItemModelGenerator.Span> p_178395_1_, ItemModelGenerator.SpanFacing p_178395_2_, int p_178395_3_, int p_178395_4_)
-    {
-        ItemModelGenerator.Span itemmodelgenerator$span = null;
-
-        for (ItemModelGenerator.Span itemmodelgenerator$span1 : p_178395_1_)
-        {
-            if (itemmodelgenerator$span1.func_178383_a() == p_178395_2_)
-            {
-                int i = p_178395_2_.func_178369_d() ? p_178395_4_ : p_178395_3_;
-
-                if (itemmodelgenerator$span1.func_178381_d() == i)
-                {
-                    itemmodelgenerator$span = itemmodelgenerator$span1;
-                    break;
-                }
-            }
-        }
-
-        int j = p_178395_2_.func_178369_d() ? p_178395_4_ : p_178395_3_;
-        int k = p_178395_2_.func_178369_d() ? p_178395_3_ : p_178395_4_;
-
-        if (itemmodelgenerator$span == null)
-        {
-            p_178395_1_.add(new ItemModelGenerator.Span(p_178395_2_, k, j));
-        }
-        else
-        {
-            itemmodelgenerator$span.func_178382_a(k);
-        }
+    private void createOrExpandSpan(List<ItemModelGenerator.Span> spans, ItemModelGenerator.SpanFacing facing, int x, int y) {
+        ModelFix.createOrExpandSpan(spans, facing, x, y);
+//        ItemModelGenerator.Span newSpan = null;
+//
+//        for (ItemModelGenerator.Span span : spans) {
+//            if (span.getFacing() == facing) {
+//                int i = facing.isHorizontal() ? y : x;
+//
+//                if (span.getAnchor() == i) {
+//                    newSpan = span;
+//                    break;
+//                }
+//            }
+//        }
+//
+//        int anchor = facing.isHorizontal() ? y : x;
+//        int value = facing.isHorizontal() ? x : y;
+//
+//        if (newSpan == null) {
+//            spans.add(new ItemModelGenerator.Span(facing, value, anchor));
+//        } else {
+//            newSpan.expand(value);
+//        }
     }
 
-    private boolean func_178391_a(int[] p_178391_1_, int p_178391_2_, int p_178391_3_, int p_178391_4_, int p_178391_5_)
-    {
-        return p_178391_2_ >= 0 && p_178391_3_ >= 0 && p_178391_2_ < p_178391_4_ && p_178391_3_ < p_178391_5_ ? (p_178391_1_[p_178391_3_ * p_178391_4_ + p_178391_2_] >> 24 & 255) == 0 : true;
+    private boolean isTransparent(int[] pixelColors, int x, int y, int width, int height) {
+        return x < 0 || y < 0 || x >= width || y >= height || (pixelColors[y * width + x] >> 24 & 255) == 0;
     }
 
-    static class Span
-    {
+    public static class Span {
         private final ItemModelGenerator.SpanFacing spanFacing;
-        private int field_178387_b;
-        private int field_178388_c;
-        private final int field_178386_d;
+        private int min;
+        private int max;
+        private final int anchor;
 
-        public Span(ItemModelGenerator.SpanFacing spanFacingIn, int p_i46216_2_, int p_i46216_3_)
-        {
+        public Span(ItemModelGenerator.SpanFacing spanFacingIn, int value, int anchor) {
             this.spanFacing = spanFacingIn;
-            this.field_178387_b = p_i46216_2_;
-            this.field_178388_c = p_i46216_2_;
-            this.field_178386_d = p_i46216_3_;
+            this.min = value;
+            this.max = value;
+            this.anchor = anchor;
         }
 
-        public void func_178382_a(int p_178382_1_)
-        {
-            if (p_178382_1_ < this.field_178387_b)
-            {
-                this.field_178387_b = p_178382_1_;
-            }
-            else if (p_178382_1_ > this.field_178388_c)
-            {
-                this.field_178388_c = p_178382_1_;
+        public void expand(int anchor) {
+            if (anchor < this.min) {
+                this.min = anchor;
+            } else if (anchor > this.max) {
+                this.max = anchor;
             }
         }
 
-        public ItemModelGenerator.SpanFacing func_178383_a()
-        {
+        public ItemModelGenerator.SpanFacing getFacing() {
             return this.spanFacing;
         }
 
-        public int func_178385_b()
-        {
-            return this.field_178387_b;
+        public int getMin() {
+            return this.min;
         }
 
-        public int func_178384_c()
-        {
-            return this.field_178388_c;
+        public int getMax() {
+            return this.max;
         }
 
-        public int func_178381_d()
-        {
-            return this.field_178386_d;
+        public int getAnchor() {
+            return this.anchor;
         }
     }
 
-    static enum SpanFacing
-    {
+    public enum SpanFacing {
         UP(EnumFacing.UP, 0, -1),
         DOWN(EnumFacing.DOWN, 0, 1),
         LEFT(EnumFacing.EAST, -1, 0),
         RIGHT(EnumFacing.WEST, 1, 0);
 
         private final EnumFacing facing;
-        private final int field_178373_f;
-        private final int field_178374_g;
+        private final int xOffset;
+        private final int yOffset;
 
-        private SpanFacing(EnumFacing facing, int p_i46215_4_, int p_i46215_5_)
-        {
+        private SpanFacing(EnumFacing facing, int p_i46215_4_, int p_i46215_5_) {
             this.facing = facing;
-            this.field_178373_f = p_i46215_4_;
-            this.field_178374_g = p_i46215_5_;
+            this.xOffset = p_i46215_4_;
+            this.yOffset = p_i46215_5_;
         }
 
-        public EnumFacing getFacing()
-        {
+        public EnumFacing getFacing() {
             return this.facing;
         }
 
-        public int func_178372_b()
-        {
-            return this.field_178373_f;
+        public int getXOffset() {
+            return this.xOffset;
         }
 
-        public int func_178371_c()
-        {
-            return this.field_178374_g;
+        public int getYOffset() {
+            return this.yOffset;
         }
 
-        private boolean func_178369_d()
-        {
+        public boolean isHorizontal() {
             return this == DOWN || this == UP;
         }
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java b/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java
index efe07ca..46f1114 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/ArmorStandRenderer.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelArmorStand;
 import net.minecraft.client.model.ModelArmorStandArmor;
 import net.minecraft.client.renderer.GlStateManager;
@@ -16,7 +17,7 @@ public class ArmorStandRenderer extends RendererLivingEntity<EntityArmorStand>
      */
     public static final ResourceLocation TEXTURE_ARMOR_STAND = new ResourceLocation("textures/entity/armorstand/wood.png");
 
-    public ArmorStandRenderer(RenderManager p_i46195_1_)
+    public ArmorStandRenderer(IRenderManager p_i46195_1_)
     {
         super(p_i46195_1_, new ModelArmorStand(), 0.0F);
         LayerBipedArmor layerbipedarmor = new LayerBipedArmor(this)
diff --git a/src/main/java/net/minecraft/client/renderer/entity/Render.java b/src/main/java/net/minecraft/client/renderer/entity/Render.java
index 46daefc..f8c9941 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/Render.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/Render.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.block.Block;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
@@ -15,20 +16,15 @@ import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.src.Config;
-import net.minecraft.util.AxisAlignedBB;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.EnumWorldBlockLayer;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.ResourceLocation;
+import net.minecraft.util.*;
 import net.minecraft.world.World;
 import net.optifine.entity.model.IEntityRenderer;
 import net.optifine.shaders.Shaders;
 import org.lwjgl.opengl.GL11;
 
-public abstract class Render<T extends Entity> implements IEntityRenderer
-{
+public abstract class Render<T extends Entity> implements IEntityRenderer {
     private static final ResourceLocation shadowTextures = new ResourceLocation("textures/misc/shadow.png");
-    protected final RenderManager renderManager;
+    protected final IRenderManager renderManager;
     public float shadowSize;
 
     /**
@@ -38,17 +34,14 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
     private Class entityClass = null;
     private ResourceLocation locationTextureCustom = null;
 
-    protected Render(RenderManager renderManager)
-    {
+    protected Render(IRenderManager renderManager) {
         this.renderManager = renderManager;
     }
 
-    public boolean shouldRender(T livingEntity, ICamera camera, double camX, double camY, double camZ)
-    {
+    public boolean shouldRender(T livingEntity, ICamera camera, double camX, double camY, double camZ) {
         AxisAlignedBB axisalignedbb = livingEntity.getEntityBoundingBox();
 
-        if (axisalignedbb.hasNaN() || axisalignedbb.getAverageEdgeLength() == 0.0D)
-        {
+        if (axisalignedbb.hasNaN() || axisalignedbb.getAverageEdgeLength() == 0.0D) {
             axisalignedbb = new AxisAlignedBB(livingEntity.posX - 2.0D, livingEntity.posY - 2.0D, livingEntity.posZ - 2.0D, livingEntity.posX + 2.0D, livingEntity.posY + 2.0D, livingEntity.posZ + 2.0D);
         }
 
@@ -58,26 +51,21 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
     /**
      * Renders the desired {@code T} type Entity.
      */
-    public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks)
-    {
+    public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks) {
         this.renderName(entity, x, y, z);
     }
 
-    protected void renderName(T entity, double x, double y, double z)
-    {
-        if (this.canRenderName(entity))
-        {
+    public void renderName(T entity, double x, double y, double z) {
+        if (this.canRenderName(entity)) {
             this.renderLivingLabel(entity, entity.getDisplayName().getFormattedText(), x, y, z, 64);
         }
     }
 
-    protected boolean canRenderName(T entity)
-    {
+    protected boolean canRenderName(T entity) {
         return entity.getAlwaysRenderNameTagForRender() && entity.hasCustomName();
     }
 
-    protected void renderOffsetLivingLabel(T entityIn, double x, double y, double z, String str, float p_177069_9_, double p_177069_10_)
-    {
+    protected void renderOffsetLivingLabel(T entityIn, double x, double y, double z, String str, float p_177069_9_, double p_177069_10_) {
         this.renderLivingLabel(entityIn, str, x, y, z, 64);
     }
 
@@ -86,42 +74,35 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
      */
     protected abstract ResourceLocation getEntityTexture(T entity);
 
-    protected boolean bindEntityTexture(T entity)
-    {
+    protected boolean bindEntityTexture(T entity) {
         ResourceLocation resourcelocation = this.getEntityTexture(entity);
 
-        if (this.locationTextureCustom != null)
-        {
+        if (this.locationTextureCustom != null) {
             resourcelocation = this.locationTextureCustom;
         }
 
-        if (resourcelocation == null)
-        {
+        if (resourcelocation == null) {
             return false;
-        }
-        else
-        {
+        } else {
             this.bindTexture(resourcelocation);
             return true;
         }
     }
 
-    public void bindTexture(ResourceLocation location)
-    {
-        this.renderManager.renderEngine.bindTexture(location);
+    public void bindTexture(ResourceLocation location) {
+        this.renderManager.getRenderEngine().bindTexture(location);
     }
 
     /**
      * Renders fire on top of the entity. Args: entity, x, y, z, partialTickTime
      */
-    private void renderEntityOnFire(Entity entity, double x, double y, double z, float partialTicks)
-    {
+    private void renderEntityOnFire(Entity entity, double x, double y, double z, float partialTicks) {
         GlStateManager.disableLighting();
         TextureMap texturemap = Minecraft.getMinecraft().getTextureMapBlocks();
         TextureAtlasSprite textureatlassprite = texturemap.getAtlasSprite("minecraft:blocks/fire_layer_0");
         TextureAtlasSprite textureatlassprite1 = texturemap.getAtlasSprite("minecraft:blocks/fire_layer_1");
         GlStateManager.pushMatrix();
-        GlStateManager.translate((float)x, (float)y, (float)z);
+        GlStateManager.translate((float) x, (float) y, (float) z);
         float f = entity.width * 1.4F;
         GlStateManager.scale(f, f, f);
         Tessellator tessellator = Tessellator.getInstance();
@@ -129,23 +110,21 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
         float f1 = 0.5F;
         float f2 = 0.0F;
         float f3 = entity.height / f;
-        float f4 = (float)(entity.posY - entity.getEntityBoundingBox().minY);
-        GlStateManager.rotate(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-        GlStateManager.translate(0.0F, 0.0F, -0.3F + (float)((int)f3) * 0.02F);
+        float f4 = (float) (entity.posY - entity.getEntityBoundingBox().minY);
+        GlStateManager.rotate(-this.renderManager.getPlayerViewY(), 0.0F, 1.0F, 0.0F);
+        GlStateManager.translate(0.0F, 0.0F, -0.3F + (float) ((int) f3) * 0.02F);
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         float f5 = 0.0F;
         int i = 0;
         boolean flag = Config.isMultiTexture();
 
-        if (flag)
-        {
+        if (flag) {
             worldrenderer.setBlockLayer(EnumWorldBlockLayer.SOLID);
         }
 
         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
 
-        while (f3 > 0.0F)
-        {
+        while (f3 > 0.0F) {
             TextureAtlasSprite textureatlassprite2 = i % 2 == 0 ? textureatlassprite : textureatlassprite1;
             worldrenderer.setSprite(textureatlassprite2);
             this.bindTexture(TextureMap.locationBlocksTexture);
@@ -154,17 +133,16 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
             float f8 = textureatlassprite2.getMaxU();
             float f9 = textureatlassprite2.getMaxV();
 
-            if (i / 2 % 2 == 0)
-            {
+            if (i / 2 % 2 == 0) {
                 float f10 = f8;
                 f8 = f6;
                 f6 = f10;
             }
 
-            worldrenderer.pos((double)(f1 - f2), (double)(0.0F - f4), (double)f5).tex((double)f8, (double)f9).endVertex();
-            worldrenderer.pos((double)(-f1 - f2), (double)(0.0F - f4), (double)f5).tex((double)f6, (double)f9).endVertex();
-            worldrenderer.pos((double)(-f1 - f2), (double)(1.4F - f4), (double)f5).tex((double)f6, (double)f7).endVertex();
-            worldrenderer.pos((double)(f1 - f2), (double)(1.4F - f4), (double)f5).tex((double)f8, (double)f7).endVertex();
+            worldrenderer.pos((double) (f1 - f2), (double) (0.0F - f4), (double) f5).tex((double) f8, (double) f9).endVertex();
+            worldrenderer.pos((double) (-f1 - f2), (double) (0.0F - f4), (double) f5).tex((double) f6, (double) f9).endVertex();
+            worldrenderer.pos((double) (-f1 - f2), (double) (1.4F - f4), (double) f5).tex((double) f6, (double) f7).endVertex();
+            worldrenderer.pos((double) (f1 - f2), (double) (1.4F - f4), (double) f5).tex((double) f8, (double) f7).endVertex();
             f3 -= 0.45F;
             f4 -= 0.45F;
             f1 *= 0.9F;
@@ -174,9 +152,8 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
 
         tessellator.draw();
 
-        if (flag)
-        {
-            worldrenderer.setBlockLayer((EnumWorldBlockLayer)null);
+        if (flag) {
+            worldrenderer.setBlockLayer((EnumWorldBlockLayer) null);
             GlStateManager.bindCurrentTexture();
         }
 
@@ -188,37 +165,33 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
      * Renders the entity shadows at the position, shadow alpha and partialTickTime. Args: entity, x, y, z, shadowAlpha,
      * partialTickTime
      */
-    private void renderShadow(Entity entityIn, double x, double y, double z, float shadowAlpha, float partialTicks)
-    {
-        if (!Config.isShaders() || !Shaders.shouldSkipDefaultShadow)
-        {
+    private void renderShadow(Entity entityIn, double x, double y, double z, float shadowAlpha, float partialTicks) {
+        if (!Config.isShaders() || !Shaders.shouldSkipDefaultShadow) {
             GlStateManager.enableBlend();
             GlStateManager.blendFunc(770, 771);
-            this.renderManager.renderEngine.bindTexture(shadowTextures);
+            this.renderManager.getRenderEngine().bindTexture(shadowTextures);
             World world = this.getWorldFromRenderManager();
             GlStateManager.depthMask(false);
             float f = this.shadowSize;
 
-            if (entityIn instanceof EntityLiving)
-            {
-                EntityLiving entityliving = (EntityLiving)entityIn;
+            if (entityIn instanceof EntityLiving) {
+                EntityLiving entityliving = (EntityLiving) entityIn;
                 f *= entityliving.getRenderSizeModifier();
 
-                if (entityliving.isChild())
-                {
+                if (entityliving.isChild()) {
                     f *= 0.5F;
                 }
             }
 
-            double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
-            double d0 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
-            double d1 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
-            int i = MathHelper.floor_double(d5 - (double)f);
-            int j = MathHelper.floor_double(d5 + (double)f);
-            int k = MathHelper.floor_double(d0 - (double)f);
+            double d5 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double) partialTicks;
+            double d0 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double) partialTicks;
+            double d1 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double) partialTicks;
+            int i = MathHelper.floor_double(d5 - (double) f);
+            int j = MathHelper.floor_double(d5 + (double) f);
+            int k = MathHelper.floor_double(d0 - (double) f);
             int l = MathHelper.floor_double(d0);
-            int i1 = MathHelper.floor_double(d1 - (double)f);
-            int j1 = MathHelper.floor_double(d1 + (double)f);
+            int i1 = MathHelper.floor_double(d1 - (double) f);
+            int j1 = MathHelper.floor_double(d1 + (double) f);
             double d2 = x - d5;
             double d3 = y - d0;
             double d4 = z - d1;
@@ -226,12 +199,10 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_COLOR);
 
-            for (BlockPos blockpos : BlockPos.getAllInBoxMutable(new BlockPos(i, k, i1), new BlockPos(j, l, j1)))
-            {
+            for (BlockPos blockpos : BlockPos.getAllInBoxMutable(new BlockPos(i, k, i1), new BlockPos(j, l, j1))) {
                 Block block = world.getBlockState(blockpos.down()).getBlock();
 
-                if (block.getRenderType() != -1 && world.getLightFromNeighbors(blockpos) > 3)
-                {
+                if (block.getRenderType() != -1 && world.getLightFromNeighbors(blockpos) > 3) {
                     this.renderShadowBlock(block, x, y, z, blockpos, shadowAlpha, f, d2, d3, d4);
                 }
             }
@@ -246,39 +217,34 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
     /**
      * Returns the render manager's world object
      */
-    private World getWorldFromRenderManager()
-    {
-        return this.renderManager.worldObj;
+    private World getWorldFromRenderManager() {
+        return this.renderManager.getWorldObj();
     }
 
-    private void renderShadowBlock(Block blockIn, double p_180549_2_, double p_180549_4_, double p_180549_6_, BlockPos pos, float p_180549_9_, float p_180549_10_, double p_180549_11_, double p_180549_13_, double p_180549_15_)
-    {
-        if (blockIn.isFullCube())
-        {
+    private void renderShadowBlock(Block blockIn, double p_180549_2_, double p_180549_4_, double p_180549_6_, BlockPos pos, float p_180549_9_, float p_180549_10_, double p_180549_11_, double p_180549_13_, double p_180549_15_) {
+        if (blockIn.isFullCube()) {
             Tessellator tessellator = Tessellator.getInstance();
             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
-            double d0 = ((double)p_180549_9_ - (p_180549_4_ - ((double)pos.getY() + p_180549_13_)) / 2.0D) * 0.5D * (double)this.getWorldFromRenderManager().getLightBrightness(pos);
+            double d0 = ((double) p_180549_9_ - (p_180549_4_ - ((double) pos.getY() + p_180549_13_)) / 2.0D) * 0.5D * (double) this.getWorldFromRenderManager().getLightBrightness(pos);
 
-            if (d0 >= 0.0D)
-            {
-                if (d0 > 1.0D)
-                {
+            if (d0 >= 0.0D) {
+                if (d0 > 1.0D) {
                     d0 = 1.0D;
                 }
 
-                double d1 = (double)pos.getX() + blockIn.getBlockBoundsMinX() + p_180549_11_;
-                double d2 = (double)pos.getX() + blockIn.getBlockBoundsMaxX() + p_180549_11_;
-                double d3 = (double)pos.getY() + blockIn.getBlockBoundsMinY() + p_180549_13_ + 0.015625D;
-                double d4 = (double)pos.getZ() + blockIn.getBlockBoundsMinZ() + p_180549_15_;
-                double d5 = (double)pos.getZ() + blockIn.getBlockBoundsMaxZ() + p_180549_15_;
-                float f = (float)((p_180549_2_ - d1) / 2.0D / (double)p_180549_10_ + 0.5D);
-                float f1 = (float)((p_180549_2_ - d2) / 2.0D / (double)p_180549_10_ + 0.5D);
-                float f2 = (float)((p_180549_6_ - d4) / 2.0D / (double)p_180549_10_ + 0.5D);
-                float f3 = (float)((p_180549_6_ - d5) / 2.0D / (double)p_180549_10_ + 0.5D);
-                worldrenderer.pos(d1, d3, d4).tex((double)f, (double)f2).color(1.0F, 1.0F, 1.0F, (float)d0).endVertex();
-                worldrenderer.pos(d1, d3, d5).tex((double)f, (double)f3).color(1.0F, 1.0F, 1.0F, (float)d0).endVertex();
-                worldrenderer.pos(d2, d3, d5).tex((double)f1, (double)f3).color(1.0F, 1.0F, 1.0F, (float)d0).endVertex();
-                worldrenderer.pos(d2, d3, d4).tex((double)f1, (double)f2).color(1.0F, 1.0F, 1.0F, (float)d0).endVertex();
+                double d1 = (double) pos.getX() + blockIn.getBlockBoundsMinX() + p_180549_11_;
+                double d2 = (double) pos.getX() + blockIn.getBlockBoundsMaxX() + p_180549_11_;
+                double d3 = (double) pos.getY() + blockIn.getBlockBoundsMinY() + p_180549_13_ + 0.015625D;
+                double d4 = (double) pos.getZ() + blockIn.getBlockBoundsMinZ() + p_180549_15_;
+                double d5 = (double) pos.getZ() + blockIn.getBlockBoundsMaxZ() + p_180549_15_;
+                float f = (float) ((p_180549_2_ - d1) / 2.0D / (double) p_180549_10_ + 0.5D);
+                float f1 = (float) ((p_180549_2_ - d2) / 2.0D / (double) p_180549_10_ + 0.5D);
+                float f2 = (float) ((p_180549_6_ - d4) / 2.0D / (double) p_180549_10_ + 0.5D);
+                float f3 = (float) ((p_180549_6_ - d5) / 2.0D / (double) p_180549_10_ + 0.5D);
+                worldrenderer.pos(d1, d3, d4).tex((double) f, (double) f2).color(1.0F, 1.0F, 1.0F, (float) d0).endVertex();
+                worldrenderer.pos(d1, d3, d5).tex((double) f, (double) f3).color(1.0F, 1.0F, 1.0F, (float) d0).endVertex();
+                worldrenderer.pos(d2, d3, d5).tex((double) f1, (double) f3).color(1.0F, 1.0F, 1.0F, (float) d0).endVertex();
+                worldrenderer.pos(d2, d3, d4).tex((double) f1, (double) f2).color(1.0F, 1.0F, 1.0F, (float) d0).endVertex();
             }
         }
     }
@@ -286,8 +252,7 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
     /**
      * Renders a white box with the bounds of the AABB translated by the offset. Args: aabb, x, y, z
      */
-    public static void renderOffsetAABB(AxisAlignedBB boundingBox, double x, double y, double z)
-    {
+    public static void renderOffsetAABB(AxisAlignedBB boundingBox, double x, double y, double z) {
         GlStateManager.disableTexture2D();
         Tessellator tessellator = Tessellator.getInstance();
         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
@@ -326,23 +291,18 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
     /**
      * Renders the entity's shadow and fire (if its on fire). Args: entity, x, y, z, yaw, partialTickTime
      */
-    public void doRenderShadowAndFire(Entity entityIn, double x, double y, double z, float yaw, float partialTicks)
-    {
-        if (this.renderManager.options != null)
-        {
-            if (this.renderManager.options.entityShadows && this.shadowSize > 0.0F && !entityIn.isInvisible() && this.renderManager.isRenderShadow())
-            {
+    public void doRenderShadowAndFire(Entity entityIn, double x, double y, double z, float yaw, float partialTicks) {
+        if (this.renderManager.getOptions() != null) {
+            if (this.renderManager.getOptions().entityShadows && this.shadowSize > 0.0F && !entityIn.isInvisible() && this.renderManager.isRenderShadow()) {
                 double d0 = this.renderManager.getDistanceToCamera(entityIn.posX, entityIn.posY, entityIn.posZ);
-                float f = (float)((1.0D - d0 / 256.0D) * (double)this.shadowOpaque);
+                float f = (float) ((1.0D - d0 / 256.0D) * (double) this.shadowOpaque);
 
-                if (f > 0.0F)
-                {
+                if (f > 0.0F) {
                     this.renderShadow(entityIn, x, y, z, f, partialTicks);
                 }
             }
 
-            if (entityIn.canRenderOnFire() && (!(entityIn instanceof EntityPlayer) || !((EntityPlayer)entityIn).isSpectator()))
-            {
+            if (entityIn.canRenderOnFire() && (!(entityIn instanceof EntityPlayer) || !((EntityPlayer) entityIn).isSpectator())) {
                 this.renderEntityOnFire(entityIn, x, y, z, partialTicks);
             }
         }
@@ -351,28 +311,25 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
     /**
      * Returns the font renderer from the set render manager
      */
-    public FontRenderer getFontRendererFromRenderManager()
-    {
+    public FontRenderer getFontRendererFromRenderManager() {
         return this.renderManager.getFontRenderer();
     }
 
     /**
      * Renders an entity's name above its head
      */
-    protected void renderLivingLabel(T entityIn, String str, double x, double y, double z, int maxDistance)
-    {
-        double d0 = entityIn.getDistanceSqToEntity(this.renderManager.livingPlayer);
+    protected void renderLivingLabel(T entityIn, String str, double x, double y, double z, int maxDistance) {
+        double d0 = entityIn.getDistanceSqToEntity(this.renderManager.getLivingPlayer());
 
-        if (d0 <= (double)(maxDistance * maxDistance))
-        {
+        if (d0 <= (double) (maxDistance * maxDistance)) {
             FontRenderer fontrenderer = this.getFontRendererFromRenderManager();
             float f = 1.6F;
             float f1 = 0.016666668F * f;
             GlStateManager.pushMatrix();
-            GlStateManager.translate((float)x + 0.0F, (float)y + entityIn.height + 0.5F, (float)z);
+            GlStateManager.translate((float) x + 0.0F, (float) y + entityIn.height + 0.5F, (float) z);
             GL11.glNormal3f(0.0F, 1.0F, 0.0F);
-            GlStateManager.rotate(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-            GlStateManager.rotate(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
+            GlStateManager.rotate(-this.renderManager.getPlayerViewY(), 0.0F, 1.0F, 0.0F);
+            GlStateManager.rotate(this.renderManager.getPlayerViewX(), 1.0F, 0.0F, 0.0F);
             GlStateManager.scale(-f1, -f1, f1);
             GlStateManager.disableLighting();
             GlStateManager.depthMask(false);
@@ -383,18 +340,17 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
             int i = 0;
 
-            if (str.equals("deadmau5"))
-            {
+            if (str.equals("deadmau5")) {
                 i = -10;
             }
 
             int j = fontrenderer.getStringWidth(str) / 2;
             GlStateManager.disableTexture2D();
             worldrenderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
-            worldrenderer.pos((double)(-j - 1), (double)(-1 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
-            worldrenderer.pos((double)(-j - 1), (double)(8 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
-            worldrenderer.pos((double)(j + 1), (double)(8 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
-            worldrenderer.pos((double)(j + 1), (double)(-1 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+            worldrenderer.pos((double) (-j - 1), (double) (-1 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+            worldrenderer.pos((double) (-j - 1), (double) (8 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+            worldrenderer.pos((double) (j + 1), (double) (8 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
+            worldrenderer.pos((double) (j + 1), (double) (-1 + i), 0.0D).color(0.0F, 0.0F, 0.0F, 0.25F).endVertex();
             tessellator.draw();
             GlStateManager.enableTexture2D();
             fontrenderer.drawString(str, -fontrenderer.getStringWidth(str) / 2, i, 553648127);
@@ -408,42 +364,34 @@ public abstract class Render<T extends Entity> implements IEntityRenderer
         }
     }
 
-    public RenderManager getRenderManager()
-    {
+    public IRenderManager getRenderManager() {
         return this.renderManager;
     }
 
-    public boolean isMultipass()
-    {
+    public boolean isMultipass() {
         return false;
     }
 
-    public void renderMultipass(T p_renderMultipass_1_, double p_renderMultipass_2_, double p_renderMultipass_4_, double p_renderMultipass_6_, float p_renderMultipass_8_, float p_renderMultipass_9_)
-    {
+    public void renderMultipass(T p_renderMultipass_1_, double p_renderMultipass_2_, double p_renderMultipass_4_, double p_renderMultipass_6_, float p_renderMultipass_8_, float p_renderMultipass_9_) {
     }
 
-    public Class getEntityClass()
-    {
+    public Class getEntityClass() {
         return this.entityClass;
     }
 
-    public void setEntityClass(Class p_setEntityClass_1_)
-    {
+    public void setEntityClass(Class p_setEntityClass_1_) {
         this.entityClass = p_setEntityClass_1_;
     }
 
-    public ResourceLocation getLocationTextureCustom()
-    {
+    public ResourceLocation getLocationTextureCustom() {
         return this.locationTextureCustom;
     }
 
-    public void setLocationTextureCustom(ResourceLocation p_setLocationTextureCustom_1_)
-    {
+    public void setLocationTextureCustom(ResourceLocation p_setLocationTextureCustom_1_) {
         this.locationTextureCustom = p_setLocationTextureCustom_1_;
     }
 
-    public static void setModelBipedMain(RenderBiped p_setModelBipedMain_0_, ModelBiped p_setModelBipedMain_1_)
-    {
+    public static void setModelBipedMain(RenderBiped p_setModelBipedMain_0_, ModelBiped p_setModelBipedMain_1_) {
         p_setModelBipedMain_0_.modelBipedMain = p_setModelBipedMain_1_;
     }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderArrow.java b/src/main/java/net/minecraft/client/renderer/entity/RenderArrow.java
index 202ab8b..82a31ba 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderArrow.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderArrow.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.WorldRenderer;
@@ -13,7 +14,7 @@ public class RenderArrow extends Render<EntityArrow>
 {
     private static final ResourceLocation arrowTextures = new ResourceLocation("textures/entity/arrow.png");
 
-    public RenderArrow(RenderManager renderManagerIn)
+    public RenderArrow(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderBat.java b/src/main/java/net/minecraft/client/renderer/entity/RenderBat.java
index 63bc756..73d6638 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderBat.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderBat.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBat;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.passive.EntityBat;
@@ -10,7 +11,7 @@ public class RenderBat extends RenderLiving<EntityBat>
 {
     private static final ResourceLocation batTextures = new ResourceLocation("textures/entity/bat.png");
 
-    public RenderBat(RenderManager renderManagerIn)
+    public RenderBat(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelBat(), 0.25F);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderBiped.java b/src/main/java/net/minecraft/client/renderer/entity/RenderBiped.java
index 0a6cc8d..4f6180d 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderBiped.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderBiped.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBiped;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.entity.layers.LayerCustomHead;
@@ -13,13 +14,13 @@ public class RenderBiped<T extends EntityLiving> extends RenderLiving<T>
     protected ModelBiped modelBipedMain;
     protected float field_77070_b;
 
-    public RenderBiped(RenderManager renderManagerIn, ModelBiped modelBipedIn, float shadowSize)
+    public RenderBiped(IRenderManager renderManagerIn, ModelBiped modelBipedIn, float shadowSize)
     {
         this(renderManagerIn, modelBipedIn, shadowSize, 1.0F);
         this.addLayer(new LayerHeldItem(this));
     }
 
-    public RenderBiped(RenderManager renderManagerIn, ModelBiped modelBipedIn, float shadowSize, float p_i46169_4_)
+    public RenderBiped(IRenderManager renderManagerIn, ModelBiped modelBipedIn, float shadowSize, float p_i46169_4_)
     {
         super(renderManagerIn, modelBipedIn, shadowSize);
         this.modelBipedMain = modelBipedIn;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderBlaze.java b/src/main/java/net/minecraft/client/renderer/entity/RenderBlaze.java
index f815e11..11a66fd 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderBlaze.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderBlaze.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBlaze;
 import net.minecraft.entity.monster.EntityBlaze;
 import net.minecraft.util.ResourceLocation;
@@ -8,7 +9,7 @@ public class RenderBlaze extends RenderLiving<EntityBlaze>
 {
     private static final ResourceLocation blazeTextures = new ResourceLocation("textures/entity/blaze.png");
 
-    public RenderBlaze(RenderManager renderManagerIn)
+    public RenderBlaze(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelBlaze(), 0.5F);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderBoat.java b/src/main/java/net/minecraft/client/renderer/entity/RenderBoat.java
index 95a3723..8a2e31c 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderBoat.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderBoat.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelBoat;
 import net.minecraft.client.renderer.GlStateManager;
@@ -14,7 +15,7 @@ public class RenderBoat extends Render<EntityBoat>
     /** instance of ModelBoat for rendering */
     protected ModelBase modelBoat = new ModelBoat();
 
-    public RenderBoat(RenderManager renderManagerIn)
+    public RenderBoat(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
         this.shadowSize = 0.5F;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderCaveSpider.java b/src/main/java/net/minecraft/client/renderer/entity/RenderCaveSpider.java
index abc90c5..2a2edc6 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderCaveSpider.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderCaveSpider.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.monster.EntityCaveSpider;
 import net.minecraft.util.ResourceLocation;
@@ -8,7 +9,7 @@ public class RenderCaveSpider extends RenderSpider<EntityCaveSpider>
 {
     private static final ResourceLocation caveSpiderTextures = new ResourceLocation("textures/entity/spider/cave_spider.png");
 
-    public RenderCaveSpider(RenderManager renderManagerIn)
+    public RenderCaveSpider(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
         this.shadowSize *= 0.7F;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderChicken.java b/src/main/java/net/minecraft/client/renderer/entity/RenderChicken.java
index bbcf95d..5c76ef7 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderChicken.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderChicken.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.entity.passive.EntityChicken;
 import net.minecraft.util.MathHelper;
@@ -9,7 +10,7 @@ public class RenderChicken extends RenderLiving<EntityChicken>
 {
     private static final ResourceLocation chickenTextures = new ResourceLocation("textures/entity/chicken.png");
 
-    public RenderChicken(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RenderChicken(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderCow.java b/src/main/java/net/minecraft/client/renderer/entity/RenderCow.java
index f46e1e9..2659270 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderCow.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderCow.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.entity.passive.EntityCow;
 import net.minecraft.util.ResourceLocation;
@@ -8,7 +9,7 @@ public class RenderCow extends RenderLiving<EntityCow>
 {
     private static final ResourceLocation cowTextures = new ResourceLocation("textures/entity/cow/cow.png");
 
-    public RenderCow(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RenderCow(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderCreeper.java b/src/main/java/net/minecraft/client/renderer/entity/RenderCreeper.java
index 3b13245..b5daf32 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderCreeper.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderCreeper.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelCreeper;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.entity.layers.LayerCreeperCharge;
@@ -11,7 +12,7 @@ public class RenderCreeper extends RenderLiving<EntityCreeper>
 {
     private static final ResourceLocation creeperTextures = new ResourceLocation("textures/entity/creeper/creeper.png");
 
-    public RenderCreeper(RenderManager renderManagerIn)
+    public RenderCreeper(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelCreeper(), 0.5F);
         this.addLayer(new LayerCreeperCharge(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderDragon.java b/src/main/java/net/minecraft/client/renderer/entity/RenderDragon.java
index 4bc0991..7389ff7 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderDragon.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderDragon.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelDragon;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.RenderHelper;
@@ -22,7 +23,7 @@ public class RenderDragon extends RenderLiving<EntityDragon>
     /** An instance of the dragon model in RenderDragon */
     protected ModelDragon modelDragon;
 
-    public RenderDragon(RenderManager renderManagerIn)
+    public RenderDragon(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelDragon(0.0F), 0.5F);
         this.modelDragon = (ModelDragon)this.mainModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderEnderman.java b/src/main/java/net/minecraft/client/renderer/entity/RenderEnderman.java
index 7ed39a7..78e3a8d 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderEnderman.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderEnderman.java
@@ -1,6 +1,8 @@
 package net.minecraft.client.renderer.entity;
 
 import java.util.Random;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.model.ModelEnderman;
 import net.minecraft.client.renderer.entity.layers.LayerEndermanEyes;
@@ -16,7 +18,7 @@ public class RenderEnderman extends RenderLiving<EntityEnderman>
     private ModelEnderman endermanModel;
     private Random rnd = new Random();
 
-    public RenderEnderman(RenderManager renderManagerIn)
+    public RenderEnderman(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelEnderman(0.0F), 0.5F);
         this.endermanModel = (ModelEnderman)super.mainModel;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderEndermite.java b/src/main/java/net/minecraft/client/renderer/entity/RenderEndermite.java
index 6b120f9..82ed58d 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderEndermite.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderEndermite.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelEnderMite;
 import net.minecraft.entity.monster.EntityEndermite;
 import net.minecraft.util.ResourceLocation;
@@ -8,7 +9,7 @@ public class RenderEndermite extends RenderLiving<EntityEndermite>
 {
     private static final ResourceLocation ENDERMITE_TEXTURES = new ResourceLocation("textures/entity/endermite.png");
 
-    public RenderEndermite(RenderManager renderManagerIn)
+    public RenderEndermite(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelEnderMite(), 0.3F);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderEntity.java b/src/main/java/net/minecraft/client/renderer/entity/RenderEntity.java
index 5f3bb0a..4275352 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderEntity.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderEntity.java
@@ -1,12 +1,13 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.Entity;
 import net.minecraft.util.ResourceLocation;
 
 public class RenderEntity extends Render<Entity>
 {
-    public RenderEntity(RenderManager renderManagerIn)
+    public RenderEntity(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderEntityItem.java b/src/main/java/net/minecraft/client/renderer/entity/RenderEntityItem.java
index 9af0d6d..46df263 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderEntityItem.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderEntityItem.java
@@ -1,6 +1,8 @@
 package net.minecraft.client.renderer.entity;
 
 import java.util.Random;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
 import net.minecraft.client.renderer.texture.TextureMap;
@@ -16,7 +18,7 @@ public class RenderEntityItem extends Render<EntityItem>
     private final RenderItem itemRenderer;
     private Random field_177079_e = new Random();
 
-    public RenderEntityItem(RenderManager renderManagerIn, RenderItem p_i46167_2_)
+    public RenderEntityItem(IRenderManager renderManagerIn, RenderItem p_i46167_2_)
     {
         super(renderManagerIn);
         this.itemRenderer = p_i46167_2_;
@@ -42,7 +44,7 @@ public class RenderEntityItem extends Render<EntityItem>
             float f2 = p_177077_9_.getItemCameraTransforms().getTransform(ItemCameraTransforms.TransformType.GROUND).scale.y;
             GlStateManager.translate((float)p_177077_2_, (float)p_177077_4_ + f1 + 0.25F * f2, (float)p_177077_6_);
 
-            if (flag || this.renderManager.options != null)
+            if (flag || this.renderManager.getOptions() != null)
             {
                 float f3 = (((float)itemIn.getAge() + p_177077_8_) / 20.0F + itemIn.hoverStart) * (180F / (float)Math.PI);
                 GlStateManager.rotate(f3, 0.0F, 1.0F, 0.0F);
@@ -96,7 +98,7 @@ public class RenderEntityItem extends Render<EntityItem>
 
         if (this.bindEntityTexture(entity))
         {
-            this.renderManager.renderEngine.getTexture(this.getEntityTexture(entity)).setBlurMipmap(false, false);
+            this.renderManager.getRenderEngine().getTexture(this.getEntityTexture(entity)).setBlurMipmap(false, false);
             flag = true;
         }
 
@@ -147,7 +149,7 @@ public class RenderEntityItem extends Render<EntityItem>
 
         if (flag)
         {
-            this.renderManager.renderEngine.getTexture(this.getEntityTexture(entity)).restoreLastBlurMipmap();
+            this.renderManager.getRenderEngine().getTexture(this.getEntityTexture(entity)).restoreLastBlurMipmap();
         }
 
         super.doRender(entity, x, y, z, entityYaw, partialTicks);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderFallingBlock.java b/src/main/java/net/minecraft/client/renderer/entity/RenderFallingBlock.java
index be64eb4..d9f3715 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderFallingBlock.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderFallingBlock.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
@@ -17,7 +18,7 @@ import net.minecraft.world.World;
 
 public class RenderFallingBlock extends Render<EntityFallingBlock>
 {
-    public RenderFallingBlock(RenderManager renderManagerIn)
+    public RenderFallingBlock(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
         this.shadowSize = 0.5F;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderFireball.java b/src/main/java/net/minecraft/client/renderer/entity/RenderFireball.java
index be8bf49..22b56ed 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderFireball.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderFireball.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.Tessellator;
@@ -15,7 +16,7 @@ public class RenderFireball extends Render<EntityFireball>
 {
     private float scale;
 
-    public RenderFireball(RenderManager renderManagerIn, float scaleIn)
+    public RenderFireball(IRenderManager renderManagerIn, float scaleIn)
     {
         super(renderManagerIn);
         this.scale = scaleIn;
@@ -41,8 +42,8 @@ public class RenderFireball extends Render<EntityFireball>
         float f4 = 1.0F;
         float f5 = 0.5F;
         float f6 = 0.25F;
-        GlStateManager.rotate(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate(-this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
+        GlStateManager.rotate(180.0F - this.renderManager.getPlayerViewY(), 0.0F, 1.0F, 0.0F);
+        GlStateManager.rotate(-this.renderManager.getPlayerViewX(), 1.0F, 0.0F, 0.0F);
         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_NORMAL);
         worldrenderer.pos(-0.5D, -0.25D, 0.0D).tex((double)f, (double)f3).normal(0.0F, 1.0F, 0.0F).endVertex();
         worldrenderer.pos(0.5D, -0.25D, 0.0D).tex((double)f1, (double)f3).normal(0.0F, 1.0F, 0.0F).endVertex();
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderFish.java b/src/main/java/net/minecraft/client/renderer/entity/RenderFish.java
index f87d78d..4d43710 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderFish.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderFish.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.Tessellator;
@@ -14,7 +15,7 @@ public class RenderFish extends Render<EntityFishHook>
 {
     private static final ResourceLocation FISH_PARTICLES = new ResourceLocation("textures/particle/particles.png");
 
-    public RenderFish(RenderManager renderManagerIn)
+    public RenderFish(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
     }
@@ -40,8 +41,8 @@ public class RenderFish extends Render<EntityFishHook>
         float f4 = 1.0F;
         float f5 = 0.5F;
         float f6 = 0.5F;
-        GlStateManager.rotate(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate(-this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
+        GlStateManager.rotate(180.0F - this.renderManager.getPlayerViewY(), 0.0F, 1.0F, 0.0F);
+        GlStateManager.rotate(-this.renderManager.getPlayerViewX(), 1.0F, 0.0F, 0.0F);
         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX_NORMAL);
         worldrenderer.pos(-0.5D, -0.5D, 0.0D).tex(0.0625D, 0.1875D).normal(0.0F, 1.0F, 0.0F).endVertex();
         worldrenderer.pos(0.5D, -0.5D, 0.0D).tex(0.125D, 0.1875D).normal(0.0F, 1.0F, 0.0F).endVertex();
@@ -65,7 +66,7 @@ public class RenderFish extends Render<EntityFishHook>
             double d2 = entity.angler.prevPosZ + (entity.angler.posZ - entity.angler.prevPosZ) * (double)partialTicks + vec3.zCoord;
             double d3 = (double)entity.angler.getEyeHeight();
 
-            if (this.renderManager.options != null && this.renderManager.options.showDebugInfo > 0 || entity.angler != Minecraft.getMinecraft().thePlayer)
+            if (this.renderManager.getOptions() != null && this.renderManager.getOptions().showDebugInfo > 0 || entity.angler != Minecraft.getMinecraft().thePlayer)
             {
                 float f9 = (entity.angler.prevRenderYawOffset + (entity.angler.renderYawOffset - entity.angler.prevRenderYawOffset) * partialTicks) * (float)Math.PI / 180.0F;
                 double d4 = (double)MathHelper.sin(f9);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderGhast.java b/src/main/java/net/minecraft/client/renderer/entity/RenderGhast.java
index e230651..921de17 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderGhast.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderGhast.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelGhast;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.monster.EntityGhast;
@@ -10,7 +11,7 @@ public class RenderGhast extends RenderLiving<EntityGhast>
     private static final ResourceLocation ghastTextures = new ResourceLocation("textures/entity/ghast/ghast.png");
     private static final ResourceLocation ghastShootingTextures = new ResourceLocation("textures/entity/ghast/ghast_shooting.png");
 
-    public RenderGhast(RenderManager renderManagerIn)
+    public RenderGhast(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelGhast(), 0.5F);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderGiantZombie.java b/src/main/java/net/minecraft/client/renderer/entity/RenderGiantZombie.java
index b4a8325..00f26a6 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderGiantZombie.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderGiantZombie.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelZombie;
 import net.minecraft.client.renderer.GlStateManager;
@@ -15,7 +16,7 @@ public class RenderGiantZombie extends RenderLiving<EntityGiantZombie>
     /** Scale of the model to use */
     private float scale;
 
-    public RenderGiantZombie(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn, float scaleIn)
+    public RenderGiantZombie(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn, float scaleIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn * scaleIn);
         this.scale = scaleIn;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderGuardian.java b/src/main/java/net/minecraft/client/renderer/entity/RenderGuardian.java
index 63ef96d..4893317 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderGuardian.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderGuardian.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelGuardian;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
@@ -21,7 +22,7 @@ public class RenderGuardian extends RenderLiving<EntityGuardian>
     private static final ResourceLocation GUARDIAN_BEAM_TEXTURE = new ResourceLocation("textures/entity/guardian_beam.png");
     int field_177115_a;
 
-    public RenderGuardian(RenderManager renderManagerIn)
+    public RenderGuardian(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelGuardian(), 0.5F);
         this.field_177115_a = ((ModelGuardian)this.mainModel).func_178706_a();
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderHorse.java b/src/main/java/net/minecraft/client/renderer/entity/RenderHorse.java
index d4b1fff..7c7e1ba 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderHorse.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderHorse.java
@@ -2,6 +2,8 @@ package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.Maps;
 import java.util.Map;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelHorse;
 import net.minecraft.client.renderer.GlStateManager;
@@ -18,7 +20,7 @@ public class RenderHorse extends RenderLiving<EntityHorse>
     private static final ResourceLocation zombieHorseTextures = new ResourceLocation("textures/entity/horse/horse_zombie.png");
     private static final ResourceLocation skeletonHorseTextures = new ResourceLocation("textures/entity/horse/horse_skeleton.png");
 
-    public RenderHorse(RenderManager rendermanagerIn, ModelHorse model, float shadowSizeIn)
+    public RenderHorse(IRenderManager rendermanagerIn, ModelHorse model, float shadowSizeIn)
     {
         super(rendermanagerIn, model, shadowSizeIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderIronGolem.java b/src/main/java/net/minecraft/client/renderer/entity/RenderIronGolem.java
index cce0f55..402cb99 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderIronGolem.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderIronGolem.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelIronGolem;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.entity.layers.LayerIronGolemFlower;
@@ -10,7 +11,7 @@ public class RenderIronGolem extends RenderLiving<EntityIronGolem>
 {
     private static final ResourceLocation ironGolemTextures = new ResourceLocation("textures/entity/iron_golem.png");
 
-    public RenderIronGolem(RenderManager renderManagerIn)
+    public RenderIronGolem(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelIronGolem(), 0.5F);
         this.addLayer(new LayerIronGolemFlower(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderItem.java b/src/main/java/net/minecraft/client/renderer/entity/RenderItem.java
index ec0d4fd..99719ca 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderItem.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderItem.java
@@ -1,34 +1,9 @@
 package net.minecraft.client.renderer.entity;
 
-import java.util.List;
-import java.util.concurrent.Callable;
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockDirt;
-import net.minecraft.block.BlockDoublePlant;
-import net.minecraft.block.BlockFlower;
-import net.minecraft.block.BlockHugeMushroom;
-import net.minecraft.block.BlockPlanks;
-import net.minecraft.block.BlockPrismarine;
-import net.minecraft.block.BlockQuartz;
-import net.minecraft.block.BlockRedSandstone;
-import net.minecraft.block.BlockSand;
-import net.minecraft.block.BlockSandStone;
-import net.minecraft.block.BlockSilverfish;
-import net.minecraft.block.BlockStone;
-import net.minecraft.block.BlockStoneBrick;
-import net.minecraft.block.BlockStoneSlab;
-import net.minecraft.block.BlockStoneSlabNew;
-import net.minecraft.block.BlockTallGrass;
-import net.minecraft.block.BlockWall;
+import net.minecraft.block.*;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
-import net.minecraft.client.renderer.EntityRenderer;
-import net.minecraft.client.renderer.GlStateManager;
-import net.minecraft.client.renderer.ItemMeshDefinition;
-import net.minecraft.client.renderer.ItemModelMesher;
-import net.minecraft.client.renderer.OpenGlHelper;
-import net.minecraft.client.renderer.Tessellator;
-import net.minecraft.client.renderer.WorldRenderer;
+import net.minecraft.client.renderer.*;
 import net.minecraft.client.renderer.block.model.BakedQuad;
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
 import net.minecraft.client.renderer.block.model.ItemTransformVec3f;
@@ -48,18 +23,9 @@ import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
-import net.minecraft.item.EnumDyeColor;
-import net.minecraft.item.Item;
-import net.minecraft.item.ItemFishFood;
-import net.minecraft.item.ItemPotion;
-import net.minecraft.item.ItemStack;
+import net.minecraft.item.*;
 import net.minecraft.src.Config;
-import net.minecraft.util.EnumChatFormatting;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumWorldBlockLayer;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.Vec3i;
+import net.minecraft.util.*;
 import net.optifine.CustomColors;
 import net.optifine.CustomItems;
 import net.optifine.reflect.Reflector;
@@ -67,14 +33,20 @@ import net.optifine.reflect.ReflectorForge;
 import net.optifine.shaders.Shaders;
 import net.optifine.shaders.ShadersRender;
 
-public class RenderItem implements IResourceManagerReloadListener
-{
+import java.util.List;
+import java.util.concurrent.Callable;
+
+public class RenderItem implements IResourceManagerReloadListener {
     private static final ResourceLocation RES_ITEM_GLINT = new ResourceLocation("textures/misc/enchanted_item_glint.png");
 
-    /** False when the renderer is rendering the item's effects into a GUI */
+    /**
+     * False when the renderer is rendering the item's effects into a GUI
+     */
     private boolean notRenderingEffectsInGUI = true;
 
-    /** Defines the zLevel of rendering of item on GUI. */
+    /**
+     * Defines the zLevel of rendering of item on GUI.
+     */
     public float zLevel;
     private final ItemModelMesher itemModelMesher;
     private final TextureManager textureManager;
@@ -84,17 +56,13 @@ public class RenderItem implements IResourceManagerReloadListener
     private boolean renderModelHasEmissive = false;
     private boolean renderModelEmissive = false;
 
-    public RenderItem(TextureManager textureManager, ModelManager modelManager)
-    {
+    public RenderItem(TextureManager textureManager, ModelManager modelManager) {
         this.textureManager = textureManager;
         this.modelManager = modelManager;
 
-        if (Reflector.ItemModelMesherForge_Constructor.exists())
-        {
-            this.itemModelMesher = (ItemModelMesher)Reflector.newInstance(Reflector.ItemModelMesherForge_Constructor, new Object[] {modelManager});
-        }
-        else
-        {
+        if (Reflector.ItemModelMesherForge_Constructor.exists()) {
+            this.itemModelMesher = (ItemModelMesher) Reflector.newInstance(Reflector.ItemModelMesherForge_Constructor, new Object[]{modelManager});
+        } else {
             this.itemModelMesher = new ItemModelMesher(modelManager);
         }
 
@@ -103,107 +71,94 @@ public class RenderItem implements IResourceManagerReloadListener
 
     /**
      * False when the renderer is rendering the item's effects into a GUI
-     *  
+     *
      * @param isNot If the renderer is not rendering the effects in a GUI
      */
-    public void isNotRenderingEffectsInGUI(boolean isNot)
-    {
+    public void isNotRenderingEffectsInGUI(boolean isNot) {
         this.notRenderingEffectsInGUI = isNot;
     }
 
-    public ItemModelMesher getItemModelMesher()
-    {
+    public ItemModelMesher getItemModelMesher() {
         return this.itemModelMesher;
     }
 
-    protected void registerItem(Item itm, int subType, String identifier)
-    {
+    protected void registerItem(Item itm, int subType, String identifier) {
         this.itemModelMesher.register(itm, subType, new ModelResourceLocation(identifier, "inventory"));
     }
 
-    protected void registerBlock(Block blk, int subType, String identifier)
-    {
+    protected void registerBlock(Block blk, int subType, String identifier) {
         this.registerItem(Item.getItemFromBlock(blk), subType, identifier);
     }
 
-    private void registerBlock(Block blk, String identifier)
-    {
+    private void registerBlock(Block blk, String identifier) {
         this.registerBlock(blk, 0, identifier);
     }
 
-    private void registerItem(Item itm, String identifier)
-    {
+    private void registerItem(Item itm, String identifier) {
         this.registerItem(itm, 0, identifier);
     }
 
-    private void renderModel(IBakedModel model, ItemStack stack)
-    {
+    private void renderModel(IBakedModel model, ItemStack stack) {
         this.renderModel(model, -1, stack);
     }
 
-    public void renderModel(IBakedModel model, int color)
-    {
-        this.renderModel(model, color, (ItemStack)null);
+    public void renderModel(IBakedModel model, int color) {
+        this.renderModel(model, color, (ItemStack) null);
     }
 
-    private void renderModel(IBakedModel model, int color, ItemStack stack)
-    {
+    private void renderModel(IBakedModel model, int color, ItemStack stack) {
         Tessellator tessellator = Tessellator.getInstance();
         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
         boolean flag = Minecraft.getMinecraft().getTextureMapBlocks().isTextureBound();
         boolean flag1 = Config.isMultiTexture() && flag;
 
-        if (flag1)
-        {
+        if (flag1) {
             worldrenderer.setBlockLayer(EnumWorldBlockLayer.SOLID);
         }
 
         worldrenderer.begin(7, DefaultVertexFormats.ITEM);
 
-        for (EnumFacing enumfacing : EnumFacing.VALUES)
-        {
+        for (EnumFacing enumfacing : EnumFacing.VALUES) {
             this.renderQuads(worldrenderer, model.getFaceQuads(enumfacing), color, stack);
         }
 
-        this.renderQuads(worldrenderer, model.getGeneralQuads(), color, stack);
+        if (stack.getItem() == Items.diamond_sword) {
+            List<BakedQuad> quads = model.getGeneralQuads();
+//            quads = quads.subList(2, 1000);
+            this.renderQuads(worldrenderer, quads, color, stack);
+        } else {
+            this.renderQuads(worldrenderer, model.getGeneralQuads(), color, stack);
+        }
         tessellator.draw();
 
-        if (flag1)
-        {
-            worldrenderer.setBlockLayer((EnumWorldBlockLayer)null);
+        if (flag1) {
+            worldrenderer.setBlockLayer((EnumWorldBlockLayer) null);
             GlStateManager.bindCurrentTexture();
         }
     }
 
-    public void renderItem(ItemStack stack, IBakedModel model)
-    {
-        if (stack != null)
-        {
+    public void renderItem(ItemStack stack, IBakedModel model) {
+        if (stack != null) {
             GlStateManager.pushMatrix();
             GlStateManager.scale(0.5F, 0.5F, 0.5F);
 
-            if (model.isBuiltInRenderer())
-            {
+            if (model.isBuiltInRenderer()) {
                 GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
                 GlStateManager.translate(-0.5F, -0.5F, -0.5F);
                 GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
                 GlStateManager.enableRescaleNormal();
                 TileEntityItemStackRenderer.instance.renderByItem(stack);
-            }
-            else
-            {
+            } else {
                 GlStateManager.translate(-0.5F, -0.5F, -0.5F);
 
-                if (Config.isCustomItems())
-                {
+                if (Config.isCustomItems()) {
                     model = CustomItems.getCustomItemModel(stack, model, this.modelLocation, false);
                 }
 
                 this.renderModelHasEmissive = false;
                 this.renderModel(model, stack);
 
-                if (this.renderModelHasEmissive)
-                {
+                if (this.renderModelHasEmissive) {
                     float f = OpenGlHelper.lastBrightnessX;
                     float f1 = OpenGlHelper.lastBrightnessY;
                     OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, 240.0F, f1);
@@ -213,8 +168,7 @@ public class RenderItem implements IResourceManagerReloadListener
                     OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, f, f1);
                 }
 
-                if (stack.hasEffect() && (!Config.isCustomItems() || !CustomItems.renderCustomEffect(this, stack, model)))
-                {
+                if (stack.hasEffect() && (!Config.isCustomItems() || !CustomItems.renderCustomEffect(this, stack, model))) {
                     this.renderEffect(model);
                 }
             }
@@ -223,34 +177,30 @@ public class RenderItem implements IResourceManagerReloadListener
         }
     }
 
-    private void renderEffect(IBakedModel model)
-    {
-        if (!Config.isCustomItems() || CustomItems.isUseGlint())
-        {
-            if (!Config.isShaders() || !Shaders.isShadowPass)
-            {
+    private void renderEffect(IBakedModel model) {
+        if (!Config.isCustomItems() || CustomItems.isUseGlint()) {
+            if (!Config.isShaders() || !Shaders.isShadowPass) {
                 GlStateManager.depthMask(false);
                 GlStateManager.depthFunc(514);
                 GlStateManager.disableLighting();
                 GlStateManager.blendFunc(768, 1);
                 this.textureManager.bindTexture(RES_ITEM_GLINT);
 
-                if (Config.isShaders() && !this.renderItemGui)
-                {
+                if (Config.isShaders() && !this.renderItemGui) {
                     ShadersRender.renderEnchantedGlintBegin();
                 }
 
                 GlStateManager.matrixMode(5890);
                 GlStateManager.pushMatrix();
                 GlStateManager.scale(8.0F, 8.0F, 8.0F);
-                float f = (float)(Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
+                float f = (float) (Minecraft.getSystemTime() % 3000L) / 3000.0F / 8.0F;
                 GlStateManager.translate(f, 0.0F, 0.0F);
                 GlStateManager.rotate(-50.0F, 0.0F, 0.0F, 1.0F);
                 this.renderModel(model, -8372020);
                 GlStateManager.popMatrix();
                 GlStateManager.pushMatrix();
                 GlStateManager.scale(8.0F, 8.0F, 8.0F);
-                float f1 = (float)(Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
+                float f1 = (float) (Minecraft.getSystemTime() % 4873L) / 4873.0F / 8.0F;
                 GlStateManager.translate(-f1, 0.0F, 0.0F);
                 GlStateManager.rotate(10.0F, 0.0F, 0.0F, 1.0F);
                 this.renderModel(model, -8372020);
@@ -262,80 +212,62 @@ public class RenderItem implements IResourceManagerReloadListener
                 GlStateManager.depthMask(true);
                 this.textureManager.bindTexture(TextureMap.locationBlocksTexture);
 
-                if (Config.isShaders() && !this.renderItemGui)
-                {
+                if (Config.isShaders() && !this.renderItemGui) {
                     ShadersRender.renderEnchantedGlintEnd();
                 }
             }
         }
     }
 
-    private void putQuadNormal(WorldRenderer renderer, BakedQuad quad)
-    {
+    private void putQuadNormal(WorldRenderer renderer, BakedQuad quad) {
         Vec3i vec3i = quad.getFace().getDirectionVec();
-        renderer.putNormal((float)vec3i.getX(), (float)vec3i.getY(), (float)vec3i.getZ());
+        renderer.putNormal((float) vec3i.getX(), (float) vec3i.getY(), (float) vec3i.getZ());
     }
 
-    private void renderQuad(WorldRenderer renderer, BakedQuad quad, int color)
-    {
-        if (this.renderModelEmissive)
-        {
-            if (quad.getQuadEmissive() == null)
-            {
+    private void renderQuad(WorldRenderer renderer, BakedQuad quad, int color) {
+        if (this.renderModelEmissive) {
+            if (quad.getQuadEmissive() == null) {
                 return;
             }
 
             quad = quad.getQuadEmissive();
-        }
-        else if (quad.getQuadEmissive() != null)
-        {
+        } else if (quad.getQuadEmissive() != null) {
             this.renderModelHasEmissive = true;
         }
 
-        if (renderer.isMultiTexture())
-        {
+        if (renderer.isMultiTexture()) {
             renderer.addVertexData(quad.getVertexDataSingle());
-        }
-        else
-        {
+        } else {
             renderer.addVertexData(quad.getVertexData());
         }
 
         renderer.putSprite(quad.getSprite());
 
-        if (Reflector.IColoredBakedQuad.exists() && Reflector.IColoredBakedQuad.isInstance(quad))
-        {
+        if (Reflector.IColoredBakedQuad.exists() && Reflector.IColoredBakedQuad.isInstance(quad)) {
             forgeHooksClient_putQuadColor(renderer, quad, color);
-        }
-        else
-        {
+        } else {
             renderer.putColor4(color);
         }
 
         this.putQuadNormal(renderer, quad);
     }
 
-    private void renderQuads(WorldRenderer renderer, List<BakedQuad> quads, int color, ItemStack stack)
-    {
+    private void renderQuads(WorldRenderer renderer, List<BakedQuad> quads, int color, ItemStack stack) {
         boolean flag = color == -1 && stack != null;
         int i = 0;
 
-        for (int j = quads.size(); i < j; ++i)
-        {
-            BakedQuad bakedquad = (BakedQuad)quads.get(i);
+        for (int j = quads.size(); i < j; ++i) {
+            BakedQuad bakedquad = (BakedQuad) quads.get(i);
             int k = color;
 
-            if (flag && bakedquad.hasTintIndex())
-            {
+            if (flag && bakedquad.hasTintIndex()) {
                 k = stack.getItem().getColorFromItemStack(stack, bakedquad.getTintIndex());
 
-                if (Config.isCustomColors())
-                {
+                if (Config.isCustomColors()) {
                     k = CustomColors.getColorFromItemStack(stack, bakedquad.getTintIndex(), k);
                 }
 
-                if (EntityRenderer.anaglyphEnable)
-                {
+                if (EntityRenderer.anaglyphEnable) {
                     k = TextureUtil.anaglyphColor(k);
                 }
 
@@ -346,23 +278,19 @@ public class RenderItem implements IResourceManagerReloadListener
         }
     }
 
-    public boolean shouldRenderItemIn3D(ItemStack stack)
-    {
+    public boolean shouldRenderItemIn3D(ItemStack stack) {
         IBakedModel ibakedmodel = this.itemModelMesher.getItemModel(stack);
         return ibakedmodel == null ? false : ibakedmodel.isGui3d();
     }
 
-    private void preTransform(ItemStack stack)
-    {
+    private void preTransform(ItemStack stack) {
         IBakedModel ibakedmodel = this.itemModelMesher.getItemModel(stack);
         Item item = stack.getItem();
 
-        if (item != null)
-        {
+        if (item != null) {
             boolean flag = ibakedmodel.isGui3d();
 
-            if (!flag)
-            {
+            if (!flag) {
                 GlStateManager.scale(2.0F, 2.0F, 2.0F);
             }
 
@@ -370,55 +298,39 @@ public class RenderItem implements IResourceManagerReloadListener
         }
     }
 
-    public void renderItem(ItemStack stack, ItemCameraTransforms.TransformType cameraTransformType)
-    {
-        if (stack != null)
-        {
+    public void renderItem(ItemStack stack, ItemCameraTransforms.TransformType cameraTransformType) {
+        if (stack != null) {
             IBakedModel ibakedmodel = this.itemModelMesher.getItemModel(stack);
             this.renderItemModelTransform(stack, ibakedmodel, cameraTransformType);
         }
     }
 
-    public void renderItemModelForEntity(ItemStack stack, EntityLivingBase entityToRenderFor, ItemCameraTransforms.TransformType cameraTransformType)
-    {
-        if (stack != null && entityToRenderFor != null)
-        {
+    public void renderItemModelForEntity(ItemStack stack, EntityLivingBase entityToRenderFor, ItemCameraTransforms.TransformType cameraTransformType) {
+        if (stack != null && entityToRenderFor != null) {
             IBakedModel ibakedmodel = this.itemModelMesher.getItemModel(stack);
 
-            if (entityToRenderFor instanceof EntityPlayer)
-            {
-                EntityPlayer entityplayer = (EntityPlayer)entityToRenderFor;
+            if (entityToRenderFor instanceof EntityPlayer) {
+                EntityPlayer entityplayer = (EntityPlayer) entityToRenderFor;
                 Item item = stack.getItem();
                 ModelResourceLocation modelresourcelocation = null;
 
-                if (item == Items.fishing_rod && entityplayer.fishEntity != null)
-                {
+                if (item == Items.fishing_rod && entityplayer.fishEntity != null) {
                     modelresourcelocation = new ModelResourceLocation("fishing_rod_cast", "inventory");
-                }
-                else if (item == Items.bow && entityplayer.getItemInUse() != null)
-                {
+                } else if (item == Items.bow && entityplayer.getItemInUse() != null) {
                     int i = stack.getMaxItemUseDuration() - entityplayer.getItemInUseCount();
 
-                    if (i >= 18)
-                    {
+                    if (i >= 18) {
                         modelresourcelocation = new ModelResourceLocation("bow_pulling_2", "inventory");
-                    }
-                    else if (i > 13)
-                    {
+                    } else if (i > 13) {
                         modelresourcelocation = new ModelResourceLocation("bow_pulling_1", "inventory");
-                    }
-                    else if (i > 0)
-                    {
+                    } else if (i > 0) {
                         modelresourcelocation = new ModelResourceLocation("bow_pulling_0", "inventory");
                     }
-                }
-                else if (Reflector.ForgeItem_getModel.exists())
-                {
-                    modelresourcelocation = (ModelResourceLocation)Reflector.call(item, Reflector.ForgeItem_getModel, new Object[] {stack, entityplayer, Integer.valueOf(entityplayer.getItemInUseCount())});
+                } else if (Reflector.ForgeItem_getModel.exists()) {
+                    modelresourcelocation = (ModelResourceLocation) Reflector.call(item, Reflector.ForgeItem_getModel, new Object[]{stack, entityplayer, Integer.valueOf(entityplayer.getItemInUseCount())});
                 }
 
-                if (modelresourcelocation != null)
-                {
+                if (modelresourcelocation != null) {
                     ibakedmodel = this.itemModelMesher.getModelManager().getModel(modelresourcelocation);
                     this.modelLocation = modelresourcelocation;
                 }
@@ -429,8 +341,7 @@ public class RenderItem implements IResourceManagerReloadListener
         }
     }
 
-    protected void renderItemModelTransform(ItemStack stack, IBakedModel model, ItemCameraTransforms.TransformType cameraTransformType)
-    {
+    protected void renderItemModelTransform(ItemStack stack, IBakedModel model, ItemCameraTransforms.TransformType cameraTransformType) {
         this.textureManager.bindTexture(TextureMap.locationBlocksTexture);
         this.textureManager.getTexture(TextureMap.locationBlocksTexture).setBlurMipmap(false, false);
         this.preTransform(stack);
@@ -440,17 +351,13 @@ public class RenderItem implements IResourceManagerReloadListener
         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
         GlStateManager.pushMatrix();
 
-        if (Reflector.ForgeHooksClient_handleCameraTransforms.exists())
-        {
-            model = (IBakedModel)Reflector.call(Reflector.ForgeHooksClient_handleCameraTransforms, new Object[] {model, cameraTransformType});
-        }
-        else
-        {
+        if (Reflector.ForgeHooksClient_handleCameraTransforms.exists()) {
+            model = (IBakedModel) Reflector.call(Reflector.ForgeHooksClient_handleCameraTransforms, new Object[]{model, cameraTransformType});
+        } else {
             ItemCameraTransforms itemcameratransforms = model.getItemCameraTransforms();
             itemcameratransforms.applyTransform(cameraTransformType);
 
-            if (this.isThereOneNegativeScale(itemcameratransforms.getTransform(cameraTransformType)))
-            {
+            if (this.isThereOneNegativeScale(itemcameratransforms.getTransform(cameraTransformType))) {
                 GlStateManager.cullFace(1028);
             }
         }
@@ -466,16 +373,14 @@ public class RenderItem implements IResourceManagerReloadListener
 
     /**
      * Return true if only one scale is negative
-     *  
+     *
      * @param itemTranformVec The ItemTransformVec3f instance
      */
-    private boolean isThereOneNegativeScale(ItemTransformVec3f itemTranformVec)
-    {
+    private boolean isThereOneNegativeScale(ItemTransformVec3f itemTranformVec) {
         return itemTranformVec.scale.x < 0.0F ^ itemTranformVec.scale.y < 0.0F ^ itemTranformVec.scale.z < 0.0F;
     }
 
-    public void renderItemIntoGUI(ItemStack stack, int x, int y)
-    {
+    public void renderItemIntoGUI(ItemStack stack, int x, int y) {
         this.renderItemGui = true;
         IBakedModel ibakedmodel = this.itemModelMesher.getItemModel(stack);
         GlStateManager.pushMatrix();
@@ -489,12 +394,9 @@ public class RenderItem implements IResourceManagerReloadListener
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         this.setupGuiTransform(x, y, ibakedmodel.isGui3d());
 
-        if (Reflector.ForgeHooksClient_handleCameraTransforms.exists())
-        {
-            ibakedmodel = (IBakedModel)Reflector.call(Reflector.ForgeHooksClient_handleCameraTransforms, new Object[] {ibakedmodel, ItemCameraTransforms.TransformType.GUI});
-        }
-        else
-        {
+        if (Reflector.ForgeHooksClient_handleCameraTransforms.exists()) {
+            ibakedmodel = (IBakedModel) Reflector.call(Reflector.ForgeHooksClient_handleCameraTransforms, new Object[]{ibakedmodel, ItemCameraTransforms.TransformType.GUI});
+        } else {
             ibakedmodel.getItemCameraTransforms().applyTransform(ItemCameraTransforms.TransformType.GUI);
         }
 
@@ -508,67 +410,50 @@ public class RenderItem implements IResourceManagerReloadListener
         this.renderItemGui = false;
     }
 
-    private void setupGuiTransform(int xPosition, int yPosition, boolean isGui3d)
-    {
-        GlStateManager.translate((float)xPosition, (float)yPosition, 100.0F + this.zLevel);
+    private void setupGuiTransform(int xPosition, int yPosition, boolean isGui3d) {
+        GlStateManager.translate((float) xPosition, (float) yPosition, 100.0F + this.zLevel);
         GlStateManager.translate(8.0F, 8.0F, 0.0F);
         GlStateManager.scale(1.0F, 1.0F, -1.0F);
         GlStateManager.scale(0.5F, 0.5F, 0.5F);
 
-        if (isGui3d)
-        {
+        if (isGui3d) {
             GlStateManager.scale(40.0F, 40.0F, 40.0F);
             GlStateManager.rotate(210.0F, 1.0F, 0.0F, 0.0F);
             GlStateManager.rotate(-135.0F, 0.0F, 1.0F, 0.0F);
             GlStateManager.enableLighting();
-        }
-        else
-        {
+        } else {
             GlStateManager.scale(64.0F, 64.0F, 64.0F);
             GlStateManager.rotate(180.0F, 1.0F, 0.0F, 0.0F);
             GlStateManager.disableLighting();
         }
     }
 
-    public void renderItemAndEffectIntoGUI(final ItemStack stack, int xPosition, int yPosition)
-    {
-        if (stack != null && stack.getItem() != null)
-        {
+    public void renderItemAndEffectIntoGUI(final ItemStack stack, int xPosition, int yPosition) {
+        if (stack != null && stack.getItem() != null) {
             this.zLevel += 50.0F;
 
-            try
-            {
+            try {
                 this.renderItemIntoGUI(stack, xPosition, yPosition);
-            }
-            catch (Throwable throwable)
-            {
+            } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering item");
                 CrashReportCategory crashreportcategory = crashreport.makeCategory("Item being rendered");
-                crashreportcategory.addCrashSectionCallable("Item Type", new Callable<String>()
-                {
-                    public String call() throws Exception
-                    {
-                        return String.valueOf((Object)stack.getItem());
+                crashreportcategory.addCrashSectionCallable("Item Type", new Callable<String>() {
+                    public String call() throws Exception {
+                        return String.valueOf((Object) stack.getItem());
                     }
                 });
-                crashreportcategory.addCrashSectionCallable("Item Aux", new Callable<String>()
-                {
-                    public String call() throws Exception
-                    {
+                crashreportcategory.addCrashSectionCallable("Item Aux", new Callable<String>() {
+                    public String call() throws Exception {
                         return String.valueOf(stack.getMetadata());
                     }
                 });
-                crashreportcategory.addCrashSectionCallable("Item NBT", new Callable<String>()
-                {
-                    public String call() throws Exception
-                    {
-                        return String.valueOf((Object)stack.getTagCompound());
+                crashreportcategory.addCrashSectionCallable("Item NBT", new Callable<String>() {
+                    public String call() throws Exception {
+                        return String.valueOf((Object) stack.getTagCompound());
                     }
                 });
-                crashreportcategory.addCrashSectionCallable("Item Foil", new Callable<String>()
-                {
-                    public String call() throws Exception
-                    {
+                crashreportcategory.addCrashSectionCallable("Item Foil", new Callable<String>() {
+                    public String call() throws Exception {
                         return String.valueOf(stack.hasEffect());
                     }
                 });
@@ -579,46 +464,39 @@ public class RenderItem implements IResourceManagerReloadListener
         }
     }
 
-    public void renderItemOverlays(FontRenderer fr, ItemStack stack, int xPosition, int yPosition)
-    {
-        this.renderItemOverlayIntoGUI(fr, stack, xPosition, yPosition, (String)null);
+    public void renderItemOverlays(FontRenderer fr, ItemStack stack, int xPosition, int yPosition) {
+        this.renderItemOverlayIntoGUI(fr, stack, xPosition, yPosition, (String) null);
     }
 
     /**
      * Renders the stack size and/or damage bar for the given ItemStack.
      */
-    public void renderItemOverlayIntoGUI(FontRenderer fr, ItemStack stack, int xPosition, int yPosition, String text)
-    {
-        if (stack != null)
-        {
-            if (stack.stackSize != 1 || text != null)
-            {
+    public void renderItemOverlayIntoGUI(FontRenderer fr, ItemStack stack, int xPosition, int yPosition, String text) {
+        if (stack != null) {
+            if (stack.stackSize != 1 || text != null) {
                 String s = text == null ? String.valueOf(stack.stackSize) : text;
 
-                if (text == null && stack.stackSize < 1)
-                {
+                if (text == null && stack.stackSize < 1) {
                     s = EnumChatFormatting.RED + String.valueOf(stack.stackSize);
                 }
 
                 GlStateManager.disableLighting();
                 GlStateManager.disableDepth();
                 GlStateManager.disableBlend();
-                fr.drawStringWithShadow(s, (float)(xPosition + 19 - 2 - fr.getStringWidth(s)), (float)(yPosition + 6 + 3), 16777215);
+                fr.drawStringWithShadow(s, (float) (xPosition + 19 - 2 - fr.getStringWidth(s)), (float) (yPosition + 6 + 3), 16777215);
                 GlStateManager.enableLighting();
                 GlStateManager.enableDepth();
                 GlStateManager.enableBlend();
             }
 
-            if (ReflectorForge.isItemDamaged(stack))
-            {
-                int j1 = (int)Math.round(13.0D - (double)stack.getItemDamage() * 13.0D / (double)stack.getMaxDamage());
-                int i = (int)Math.round(255.0D - (double)stack.getItemDamage() * 255.0D / (double)stack.getMaxDamage());
+            if (ReflectorForge.isItemDamaged(stack)) {
+                int j1 = (int) Math.round(13.0D - (double) stack.getItemDamage() * 13.0D / (double) stack.getMaxDamage());
+                int i = (int) Math.round(255.0D - (double) stack.getItemDamage() * 255.0D / (double) stack.getMaxDamage());
 
-                if (Reflector.ForgeItem_getDurabilityForDisplay.exists())
-                {
-                    double d0 = Reflector.callDouble(stack.getItem(), Reflector.ForgeItem_getDurabilityForDisplay, new Object[] {stack});
-                    j1 = (int)Math.round(13.0D - d0 * 13.0D);
-                    i = (int)Math.round(255.0D - d0 * 255.0D);
+                if (Reflector.ForgeItem_getDurabilityForDisplay.exists()) {
+                    double d0 = Reflector.callDouble(stack.getItem(), Reflector.ForgeItem_getDurabilityForDisplay, new Object[]{stack});
+                    j1 = (int) Math.round(13.0D - d0 * 13.0D);
+                    i = (int) Math.round(255.0D - d0 * 255.0D);
                 }
 
                 GlStateManager.disableLighting();
@@ -634,12 +512,10 @@ public class RenderItem implements IResourceManagerReloadListener
                 int k = i;
                 int l = 0;
 
-                if (Config.isCustomColors())
-                {
+                if (Config.isCustomColors()) {
                     int i1 = CustomColors.getDurabilityColor(i);
 
-                    if (i1 >= 0)
-                    {
+                    if (i1 >= 0) {
                         j = i1 >> 16 & 255;
                         k = i1 >> 8 & 255;
                         l = i1 >> 0 & 255;
@@ -658,29 +534,27 @@ public class RenderItem implements IResourceManagerReloadListener
 
     /**
      * Draw with the WorldRenderer
-     *  
+     *
      * @param renderer The WorldRenderer's instance
-     * @param x X position where the render begin
-     * @param y Y position where the render begin
-     * @param width The width of the render
-     * @param height The height of the render
-     * @param red Red component of the color
-     * @param green Green component of the color
-     * @param blue Blue component of the color
-     * @param alpha Alpha component of the color
+     * @param x        X position where the render begin
+     * @param y        Y position where the render begin
+     * @param width    The width of the render
+     * @param height   The height of the render
+     * @param red      Red component of the color
+     * @param green    Green component of the color
+     * @param blue     Blue component of the color
+     * @param alpha    Alpha component of the color
      */
-    private void draw(WorldRenderer renderer, int x, int y, int width, int height, int red, int green, int blue, int alpha)
-    {
+    private void draw(WorldRenderer renderer, int x, int y, int width, int height, int red, int green, int blue, int alpha) {
         renderer.begin(7, DefaultVertexFormats.POSITION_COLOR);
-        renderer.pos((double)(x + 0), (double)(y + 0), 0.0D).color(red, green, blue, alpha).endVertex();
-        renderer.pos((double)(x + 0), (double)(y + height), 0.0D).color(red, green, blue, alpha).endVertex();
-        renderer.pos((double)(x + width), (double)(y + height), 0.0D).color(red, green, blue, alpha).endVertex();
-        renderer.pos((double)(x + width), (double)(y + 0), 0.0D).color(red, green, blue, alpha).endVertex();
+        renderer.pos((double) (x + 0), (double) (y + 0), 0.0D).color(red, green, blue, alpha).endVertex();
+        renderer.pos((double) (x + 0), (double) (y + height), 0.0D).color(red, green, blue, alpha).endVertex();
+        renderer.pos((double) (x + width), (double) (y + height), 0.0D).color(red, green, blue, alpha).endVertex();
+        renderer.pos((double) (x + width), (double) (y + 0), 0.0D).color(red, green, blue, alpha).endVertex();
         Tessellator.getInstance().draw();
     }
 
-    private void registerItems()
-    {
+    private void registerItems() {
         this.registerBlock(Blocks.anvil, "anvil_intact");
         this.registerBlock(Blocks.anvil, 1, "anvil_slightly_damaged");
         this.registerBlock(Blocks.anvil, 2, "anvil_very_damaged");
@@ -1126,10 +1000,8 @@ public class RenderItem implements IResourceManagerReloadListener
         this.registerItem(Items.ghast_tear, "ghast_tear");
         this.registerItem(Items.gold_nugget, "gold_nugget");
         this.registerItem(Items.nether_wart, "nether_wart");
-        this.itemModelMesher.register(Items.potionitem, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.potionitem, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return ItemPotion.isSplash(stack.getMetadata()) ? new ModelResourceLocation("bottle_splash", "inventory") : new ModelResourceLocation("bottle_drinkable", "inventory");
             }
         });
@@ -1142,10 +1014,8 @@ public class RenderItem implements IResourceManagerReloadListener
         this.registerItem(Items.cauldron, "cauldron");
         this.registerItem(Items.ender_eye, "ender_eye");
         this.registerItem(Items.speckled_melon, "speckled_melon");
-        this.itemModelMesher.register(Items.spawn_egg, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.spawn_egg, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return new ModelResourceLocation("spawn_egg", "inventory");
             }
         });
@@ -1181,10 +1051,8 @@ public class RenderItem implements IResourceManagerReloadListener
         this.registerItem(Items.diamond_horse_armor, "diamond_horse_armor");
         this.registerItem(Items.lead, "lead");
         this.registerItem(Items.name_tag, "name_tag");
-        this.itemModelMesher.register(Items.banner, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.banner, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return new ModelResourceLocation("banner", "inventory");
             }
         });
@@ -1202,17 +1070,13 @@ public class RenderItem implements IResourceManagerReloadListener
         this.registerItem(Items.record_wait, "record_wait");
         this.registerItem(Items.prismarine_shard, "prismarine_shard");
         this.registerItem(Items.prismarine_crystals, "prismarine_crystals");
-        this.itemModelMesher.register(Items.enchanted_book, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.enchanted_book, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return new ModelResourceLocation("enchanted_book", "inventory");
             }
         });
-        this.itemModelMesher.register(Items.filled_map, new ItemMeshDefinition()
-        {
-            public ModelResourceLocation getModelLocation(ItemStack stack)
-            {
+        this.itemModelMesher.register(Items.filled_map, new ItemMeshDefinition() {
+            public ModelResourceLocation getModelLocation(ItemStack stack) {
                 return new ModelResourceLocation("filled_map", "inventory");
             }
         });
@@ -1226,37 +1090,33 @@ public class RenderItem implements IResourceManagerReloadListener
         this.registerBlock(Blocks.red_mushroom_block, BlockHugeMushroom.EnumType.ALL_INSIDE.getMetadata(), "red_mushroom_block");
         this.registerBlock(Blocks.dragon_egg, "dragon_egg");
 
-        if (Reflector.ModelLoader_onRegisterItems.exists())
-        {
-            Reflector.call(Reflector.ModelLoader_onRegisterItems, new Object[] {this.itemModelMesher});
+        if (Reflector.ModelLoader_onRegisterItems.exists()) {
+            Reflector.call(Reflector.ModelLoader_onRegisterItems, new Object[]{this.itemModelMesher});
         }
     }
 
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
+    public void onResourceManagerReload(IResourceManager resourceManager) {
         this.itemModelMesher.rebuildCache();
     }
 
-    public static void forgeHooksClient_putQuadColor(WorldRenderer p_forgeHooksClient_putQuadColor_0_, BakedQuad p_forgeHooksClient_putQuadColor_1_, int p_forgeHooksClient_putQuadColor_2_)
-    {
-        float f = (float)(p_forgeHooksClient_putQuadColor_2_ & 255);
-        float f1 = (float)(p_forgeHooksClient_putQuadColor_2_ >>> 8 & 255);
-        float f2 = (float)(p_forgeHooksClient_putQuadColor_2_ >>> 16 & 255);
-        float f3 = (float)(p_forgeHooksClient_putQuadColor_2_ >>> 24 & 255);
+    public static void forgeHooksClient_putQuadColor(WorldRenderer p_forgeHooksClient_putQuadColor_0_, BakedQuad p_forgeHooksClient_putQuadColor_1_, int p_forgeHooksClient_putQuadColor_2_) {
+        float f = (float) (p_forgeHooksClient_putQuadColor_2_ & 255);
+        float f1 = (float) (p_forgeHooksClient_putQuadColor_2_ >>> 8 & 255);
+        float f2 = (float) (p_forgeHooksClient_putQuadColor_2_ >>> 16 & 255);
+        float f3 = (float) (p_forgeHooksClient_putQuadColor_2_ >>> 24 & 255);
         int[] aint = p_forgeHooksClient_putQuadColor_1_.getVertexData();
         int i = aint.length / 4;
 
-        for (int j = 0; j < 4; ++j)
-        {
+        for (int j = 0; j < 4; ++j) {
             int k = aint[3 + i * j];
-            float f4 = (float)(k & 255);
-            float f5 = (float)(k >>> 8 & 255);
-            float f6 = (float)(k >>> 16 & 255);
-            float f7 = (float)(k >>> 24 & 255);
-            int l = Math.min(255, (int)(f * f4 / 255.0F));
-            int i1 = Math.min(255, (int)(f1 * f5 / 255.0F));
-            int j1 = Math.min(255, (int)(f2 * f6 / 255.0F));
-            int k1 = Math.min(255, (int)(f3 * f7 / 255.0F));
+            float f4 = (float) (k & 255);
+            float f5 = (float) (k >>> 8 & 255);
+            float f6 = (float) (k >>> 16 & 255);
+            float f7 = (float) (k >>> 24 & 255);
+            int l = Math.min(255, (int) (f * f4 / 255.0F));
+            int i1 = Math.min(255, (int) (f1 * f5 / 255.0F));
+            int j1 = Math.min(255, (int) (f2 * f6 / 255.0F));
+            int k1 = Math.min(255, (int) (f3 * f7 / 255.0F));
             p_forgeHooksClient_putQuadColor_0_.putColorRGBA(p_forgeHooksClient_putQuadColor_0_.getColorIndex(4 - j), l, i1, j1, k1);
         }
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderLeashKnot.java b/src/main/java/net/minecraft/client/renderer/entity/RenderLeashKnot.java
index e1516bd..0183b94 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderLeashKnot.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderLeashKnot.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelLeashKnot;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.EntityLeashKnot;
@@ -10,7 +11,7 @@ public class RenderLeashKnot extends Render<EntityLeashKnot>
     private static final ResourceLocation leashKnotTextures = new ResourceLocation("textures/entity/lead_knot.png");
     private ModelLeashKnot leashKnotModel = new ModelLeashKnot();
 
-    public RenderLeashKnot(RenderManager renderManagerIn)
+    public RenderLeashKnot(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderLightningBolt.java b/src/main/java/net/minecraft/client/renderer/entity/RenderLightningBolt.java
index 5773554..18d82ae 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderLightningBolt.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderLightningBolt.java
@@ -1,6 +1,8 @@
 package net.minecraft.client.renderer.entity;
 
 import java.util.Random;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.Tessellator;
 import net.minecraft.client.renderer.WorldRenderer;
@@ -10,7 +12,7 @@ import net.minecraft.util.ResourceLocation;
 
 public class RenderLightningBolt extends Render<EntityLightningBolt>
 {
-    public RenderLightningBolt(RenderManager renderManagerIn)
+    public RenderLightningBolt(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderLiving.java b/src/main/java/net/minecraft/client/renderer/entity/RenderLiving.java
index d4e35d3..a722d38 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderLiving.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderLiving.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
@@ -15,14 +16,14 @@ import net.optifine.shaders.Shaders;
 
 public abstract class RenderLiving<T extends EntityLiving> extends RendererLivingEntity<T>
 {
-    public RenderLiving(RenderManager rendermanagerIn, ModelBase modelbaseIn, float shadowsizeIn)
+    public RenderLiving(IRenderManager rendermanagerIn, ModelBase modelbaseIn, float shadowsizeIn)
     {
         super(rendermanagerIn, modelbaseIn, shadowsizeIn);
     }
 
     protected boolean canRenderName(T entity)
     {
-        return super.canRenderName(entity) && (entity.getAlwaysRenderNameTagForRender() || entity.hasCustomName() && entity == this.renderManager.pointedEntity);
+        return super.canRenderName(entity) && (entity.getAlwaysRenderNameTagForRender() || entity.hasCustomName() && entity == this.renderManager.getPointedEntity());
     }
 
     public boolean shouldRender(T livingEntity, ICamera camera, double camX, double camY, double camZ)
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderMagmaCube.java b/src/main/java/net/minecraft/client/renderer/entity/RenderMagmaCube.java
index 5b839a4..673f8c1 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderMagmaCube.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderMagmaCube.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelMagmaCube;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.monster.EntityMagmaCube;
@@ -9,7 +10,7 @@ public class RenderMagmaCube extends RenderLiving<EntityMagmaCube>
 {
     private static final ResourceLocation magmaCubeTextures = new ResourceLocation("textures/entity/slime/magmacube.png");
 
-    public RenderMagmaCube(RenderManager renderManagerIn)
+    public RenderMagmaCube(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelMagmaCube(), 0.25F);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderManager.java b/src/main/java/net/minecraft/client/renderer/entity/RenderManager.java
index 9574c0d..6d32042 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderManager.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderManager.java
@@ -3,6 +3,8 @@ package net.minecraft.client.renderer.entity;
 import com.google.common.collect.Maps;
 import java.util.Collections;
 import java.util.Map;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
 import net.minecraft.block.state.IBlockState;
@@ -106,7 +108,7 @@ import net.optifine.player.PlayerItemsLayer;
 import net.optifine.reflect.Reflector;
 import net.optifine.shaders.Shaders;
 
-public class RenderManager
+public class RenderManager implements IRenderManager
 {
     private Map<Class , Render> entityRenderMap = Maps.newHashMap();
     private Map<String, RenderPlayer> skinMap = Maps.<String, RenderPlayer>newHashMap();
@@ -537,4 +539,45 @@ public class RenderManager
     {
         return Collections.<String, RenderPlayer>unmodifiableMap(this.skinMap);
     }
+
+
+    @Override
+    public TextureManager getRenderEngine() {
+        return renderEngine;
+    }
+
+    @Override
+    public Entity getPointedEntity() {
+        return pointedEntity;
+    }
+
+    @Override
+    public Entity getLivingPlayer() {
+        return livingPlayer;
+    }
+
+    @Override
+    public float getPlayerViewY() {
+        return playerViewY;
+    }
+
+    @Override
+    public float getPlayerViewX() {
+        return playerViewX;
+    }
+
+    @Override
+    public World getWorldObj() {
+        return worldObj;
+    }
+
+    @Override
+    public GameSettings getOptions() {
+        return options;
+    }
+
+    @Override
+    public Render getRenderRender() {
+        return renderRender;
+    }
 }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderMinecart.java b/src/main/java/net/minecraft/client/renderer/entity/RenderMinecart.java
index 4a36310..8647d91 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderMinecart.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderMinecart.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
@@ -18,7 +19,7 @@ public class RenderMinecart<T extends EntityMinecart> extends Render<T>
     /** instance of ModelMinecart for rendering */
     protected ModelBase modelMinecart = new ModelMinecart();
 
-    public RenderMinecart(RenderManager renderManagerIn)
+    public RenderMinecart(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
         this.shadowSize = 0.5F;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderMinecartMobSpawner.java b/src/main/java/net/minecraft/client/renderer/entity/RenderMinecartMobSpawner.java
index 7d2257e..1104529 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderMinecartMobSpawner.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderMinecartMobSpawner.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.tileentity.TileEntityMobSpawnerRenderer;
 import net.minecraft.entity.ai.EntityMinecartMobSpawner;
@@ -7,7 +8,7 @@ import net.minecraft.init.Blocks;
 
 public class RenderMinecartMobSpawner extends RenderMinecart<EntityMinecartMobSpawner>
 {
-    public RenderMinecartMobSpawner(RenderManager renderManagerIn)
+    public RenderMinecartMobSpawner(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderMooshroom.java b/src/main/java/net/minecraft/client/renderer/entity/RenderMooshroom.java
index f6b1c6e..2577be6 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderMooshroom.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderMooshroom.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.entity.layers.LayerMooshroomMushroom;
 import net.minecraft.entity.passive.EntityMooshroom;
@@ -9,7 +10,7 @@ public class RenderMooshroom extends RenderLiving<EntityMooshroom>
 {
     private static final ResourceLocation mooshroomTextures = new ResourceLocation("textures/entity/cow/mooshroom.png");
 
-    public RenderMooshroom(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RenderMooshroom(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn);
         this.addLayer(new LayerMooshroomMushroom(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderOcelot.java b/src/main/java/net/minecraft/client/renderer/entity/RenderOcelot.java
index de19259..cfa204e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderOcelot.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderOcelot.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.passive.EntityOcelot;
@@ -12,7 +13,7 @@ public class RenderOcelot extends RenderLiving<EntityOcelot>
     private static final ResourceLocation redOcelotTextures = new ResourceLocation("textures/entity/cat/red.png");
     private static final ResourceLocation siameseOcelotTextures = new ResourceLocation("textures/entity/cat/siamese.png");
 
-    public RenderOcelot(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RenderOcelot(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderPainting.java b/src/main/java/net/minecraft/client/renderer/entity/RenderPainting.java
index 309bb5f..00ce838 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderPainting.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderPainting.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.Tessellator;
@@ -15,7 +16,7 @@ public class RenderPainting extends Render<EntityPainting>
 {
     private static final ResourceLocation KRISTOFFER_PAINTING_TEXTURE = new ResourceLocation("textures/painting/paintings_kristoffer_zetterstrand.png");
 
-    public RenderPainting(RenderManager renderManagerIn)
+    public RenderPainting(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
     }
@@ -137,7 +138,7 @@ public class RenderPainting extends Render<EntityPainting>
             k = MathHelper.floor_double(painting.posZ + (double)(p_77008_2_ / 16.0F));
         }
 
-        int l = this.renderManager.worldObj.getCombinedLight(new BlockPos(i, j, k), 0);
+        int l = this.renderManager.getWorldObj().getCombinedLight(new BlockPos(i, j, k), 0);
         int i1 = l % 65536;
         int j1 = l / 65536;
         OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)i1, (float)j1);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderPig.java b/src/main/java/net/minecraft/client/renderer/entity/RenderPig.java
index 5e11077..cfcc5f5 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderPig.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderPig.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.entity.layers.LayerSaddle;
 import net.minecraft.entity.passive.EntityPig;
@@ -9,7 +10,7 @@ public class RenderPig extends RenderLiving<EntityPig>
 {
     private static final ResourceLocation pigTextures = new ResourceLocation("textures/entity/pig/pig.png");
 
-    public RenderPig(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RenderPig(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn);
         this.addLayer(new LayerSaddle(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderPigZombie.java b/src/main/java/net/minecraft/client/renderer/entity/RenderPigZombie.java
index 82bfc92..5f7d9f6 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderPigZombie.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderPigZombie.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelZombie;
 import net.minecraft.client.renderer.entity.layers.LayerBipedArmor;
 import net.minecraft.client.renderer.entity.layers.LayerHeldItem;
@@ -10,7 +11,7 @@ public class RenderPigZombie extends RenderBiped<EntityPigZombie>
 {
     private static final ResourceLocation ZOMBIE_PIGMAN_TEXTURE = new ResourceLocation("textures/entity/zombie_pigman.png");
 
-    public RenderPigZombie(RenderManager renderManagerIn)
+    public RenderPigZombie(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelZombie(), 0.5F, 1.0F);
         this.addLayer(new LayerHeldItem(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderPlayer.java b/src/main/java/net/minecraft/client/renderer/entity/RenderPlayer.java
index 1264c4d..cecece1 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderPlayer.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderPlayer.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.entity.AbstractClientPlayer;
 import net.minecraft.client.entity.EntityPlayerSP;
 import net.minecraft.client.model.ModelPlayer;
@@ -23,12 +24,12 @@ public class RenderPlayer extends RendererLivingEntity<AbstractClientPlayer>
     /** this field is used to indicate the 3-pixel wide arms */
     private boolean smallArms;
 
-    public RenderPlayer(RenderManager renderManager)
+    public RenderPlayer(IRenderManager renderManager)
     {
         this(renderManager, false);
     }
 
-    public RenderPlayer(RenderManager renderManager, boolean useSmallArms)
+    public RenderPlayer(IRenderManager renderManager, boolean useSmallArms)
     {
         super(renderManager, new ModelPlayer(0.0F, useSmallArms), 0.5F);
         this.smallArms = useSmallArms;
@@ -50,7 +51,7 @@ public class RenderPlayer extends RendererLivingEntity<AbstractClientPlayer>
      */
     public void doRender(AbstractClientPlayer entity, double x, double y, double z, float entityYaw, float partialTicks)
     {
-        if (!entity.isUser() || this.renderManager.livingPlayer == entity)
+        if (!entity.isUser() || this.renderManager.getLivingPlayer() == entity)
         {
             double d0 = y;
 
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderPotion.java b/src/main/java/net/minecraft/client/renderer/entity/RenderPotion.java
index cbf94d8..f6592d9 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderPotion.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderPotion.java
@@ -1,12 +1,13 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.entity.projectile.EntityPotion;
 import net.minecraft.init.Items;
 import net.minecraft.item.ItemStack;
 
 public class RenderPotion extends RenderSnowball<EntityPotion>
 {
-    public RenderPotion(RenderManager renderManagerIn, RenderItem itemRendererIn)
+    public RenderPotion(IRenderManager renderManagerIn, RenderItem itemRendererIn)
     {
         super(renderManagerIn, Items.potionitem, itemRendererIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderRabbit.java b/src/main/java/net/minecraft/client/renderer/entity/RenderRabbit.java
index 5ad6a40..2fbb8b4 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderRabbit.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderRabbit.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.entity.passive.EntityRabbit;
 import net.minecraft.util.EnumChatFormatting;
@@ -16,7 +17,7 @@ public class RenderRabbit extends RenderLiving<EntityRabbit>
     private static final ResourceLocation TOAST = new ResourceLocation("textures/entity/rabbit/toast.png");
     private static final ResourceLocation CAERBANNOG = new ResourceLocation("textures/entity/rabbit/caerbannog.png");
 
-    public RenderRabbit(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RenderRabbit(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderSheep.java b/src/main/java/net/minecraft/client/renderer/entity/RenderSheep.java
index cfb488e..0f328c2 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderSheep.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderSheep.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.entity.layers.LayerSheepWool;
 import net.minecraft.entity.passive.EntitySheep;
@@ -9,7 +10,7 @@ public class RenderSheep extends RenderLiving<EntitySheep>
 {
     private static final ResourceLocation shearedSheepTextures = new ResourceLocation("textures/entity/sheep/sheep.png");
 
-    public RenderSheep(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RenderSheep(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn);
         this.addLayer(new LayerSheepWool(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderSilverfish.java b/src/main/java/net/minecraft/client/renderer/entity/RenderSilverfish.java
index b9cac04..3c0c4b9 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderSilverfish.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderSilverfish.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelSilverfish;
 import net.minecraft.entity.monster.EntitySilverfish;
 import net.minecraft.util.ResourceLocation;
@@ -8,7 +9,7 @@ public class RenderSilverfish extends RenderLiving<EntitySilverfish>
 {
     private static final ResourceLocation silverfishTextures = new ResourceLocation("textures/entity/silverfish.png");
 
-    public RenderSilverfish(RenderManager renderManagerIn)
+    public RenderSilverfish(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelSilverfish(), 0.3F);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderSkeleton.java b/src/main/java/net/minecraft/client/renderer/entity/RenderSkeleton.java
index df335fa..b9cc5f9 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderSkeleton.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderSkeleton.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelSkeleton;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.entity.layers.LayerBipedArmor;
@@ -12,7 +13,7 @@ public class RenderSkeleton extends RenderBiped<EntitySkeleton>
     private static final ResourceLocation skeletonTextures = new ResourceLocation("textures/entity/skeleton/skeleton.png");
     private static final ResourceLocation witherSkeletonTextures = new ResourceLocation("textures/entity/skeleton/wither_skeleton.png");
 
-    public RenderSkeleton(RenderManager renderManagerIn)
+    public RenderSkeleton(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelSkeleton(), 0.5F);
         this.addLayer(new LayerHeldItem(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderSlime.java b/src/main/java/net/minecraft/client/renderer/entity/RenderSlime.java
index 2321dc6..20fe0e6 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderSlime.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderSlime.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.entity.layers.LayerSlimeGel;
@@ -10,7 +11,7 @@ public class RenderSlime extends RenderLiving<EntitySlime>
 {
     private static final ResourceLocation slimeTextures = new ResourceLocation("textures/entity/slime/slime.png");
 
-    public RenderSlime(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RenderSlime(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn);
         this.addLayer(new LayerSlimeGel(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderSnowMan.java b/src/main/java/net/minecraft/client/renderer/entity/RenderSnowMan.java
index 3b0a9eb..e68209f 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderSnowMan.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderSnowMan.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelSnowMan;
 import net.minecraft.client.renderer.entity.layers.LayerSnowmanHead;
 import net.minecraft.entity.monster.EntitySnowman;
@@ -9,7 +10,7 @@ public class RenderSnowMan extends RenderLiving<EntitySnowman>
 {
     private static final ResourceLocation snowManTextures = new ResourceLocation("textures/entity/snowman.png");
 
-    public RenderSnowMan(RenderManager renderManagerIn)
+    public RenderSnowMan(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelSnowMan(), 0.5F);
         this.addLayer(new LayerSnowmanHead(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderSnowball.java b/src/main/java/net/minecraft/client/renderer/entity/RenderSnowball.java
index f1ea96e..a728070 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderSnowball.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderSnowball.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
 import net.minecraft.client.renderer.texture.TextureMap;
@@ -13,7 +14,7 @@ public class RenderSnowball<T extends Entity> extends Render<T>
     protected final Item field_177084_a;
     private final RenderItem field_177083_e;
 
-    public RenderSnowball(RenderManager renderManagerIn, Item p_i46137_2_, RenderItem p_i46137_3_)
+    public RenderSnowball(IRenderManager renderManagerIn, Item p_i46137_2_, RenderItem p_i46137_3_)
     {
         super(renderManagerIn);
         this.field_177084_a = p_i46137_2_;
@@ -29,8 +30,8 @@ public class RenderSnowball<T extends Entity> extends Render<T>
         GlStateManager.translate((float)x, (float)y, (float)z);
         GlStateManager.enableRescaleNormal();
         GlStateManager.scale(0.5F, 0.5F, 0.5F);
-        GlStateManager.rotate(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
+        GlStateManager.rotate(-this.renderManager.getPlayerViewY(), 0.0F, 1.0F, 0.0F);
+        GlStateManager.rotate(this.renderManager.getPlayerViewX(), 1.0F, 0.0F, 0.0F);
         this.bindTexture(TextureMap.locationBlocksTexture);
         this.field_177083_e.renderItem(this.func_177082_d(entity), ItemCameraTransforms.TransformType.GROUND);
         GlStateManager.disableRescaleNormal();
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderSpider.java b/src/main/java/net/minecraft/client/renderer/entity/RenderSpider.java
index 5935379..75dab0a 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderSpider.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderSpider.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelSpider;
 import net.minecraft.client.renderer.entity.layers.LayerSpiderEyes;
 import net.minecraft.entity.monster.EntitySpider;
@@ -9,7 +10,7 @@ public class RenderSpider<T extends EntitySpider> extends RenderLiving<T>
 {
     private static final ResourceLocation spiderTextures = new ResourceLocation("textures/entity/spider/spider.png");
 
-    public RenderSpider(RenderManager renderManagerIn)
+    public RenderSpider(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelSpider(), 1.0F);
         this.addLayer(new LayerSpiderEyes(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderSquid.java b/src/main/java/net/minecraft/client/renderer/entity/RenderSquid.java
index 88c2b7d..de49244 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderSquid.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderSquid.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.entity.passive.EntitySquid;
@@ -9,7 +10,7 @@ public class RenderSquid extends RenderLiving<EntitySquid>
 {
     private static final ResourceLocation squidTextures = new ResourceLocation("textures/entity/squid.png");
 
-    public RenderSquid(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RenderSquid(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderTNTPrimed.java b/src/main/java/net/minecraft/client/renderer/entity/RenderTNTPrimed.java
index 51f4cef..927e027 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderTNTPrimed.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderTNTPrimed.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.BlockRendererDispatcher;
 import net.minecraft.client.renderer.GlStateManager;
@@ -11,7 +12,7 @@ import net.minecraft.util.ResourceLocation;
 
 public class RenderTNTPrimed extends Render<EntityTNTPrimed>
 {
-    public RenderTNTPrimed(RenderManager renderManagerIn)
+    public RenderTNTPrimed(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
         this.shadowSize = 0.5F;
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderTntMinecart.java b/src/main/java/net/minecraft/client/renderer/entity/RenderTntMinecart.java
index 36ef75e..800b099 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderTntMinecart.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderTntMinecart.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.BlockRendererDispatcher;
@@ -10,7 +11,7 @@ import net.minecraft.util.MathHelper;
 
 public class RenderTntMinecart extends RenderMinecart<EntityMinecartTNT>
 {
-    public RenderTntMinecart(RenderManager renderManagerIn)
+    public RenderTntMinecart(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
     }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderVillager.java b/src/main/java/net/minecraft/client/renderer/entity/RenderVillager.java
index a7e209c..425d443 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderVillager.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderVillager.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelVillager;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.entity.layers.LayerCustomHead;
@@ -15,7 +16,7 @@ public class RenderVillager extends RenderLiving<EntityVillager>
     private static final ResourceLocation smithVillagerTextures = new ResourceLocation("textures/entity/villager/smith.png");
     private static final ResourceLocation butcherVillagerTextures = new ResourceLocation("textures/entity/villager/butcher.png");
 
-    public RenderVillager(RenderManager renderManagerIn)
+    public RenderVillager(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelVillager(0.0F), 0.5F);
         this.addLayer(new LayerCustomHead(this.getMainModel().villagerHead));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderWitch.java b/src/main/java/net/minecraft/client/renderer/entity/RenderWitch.java
index 837d677..fc4ae08 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderWitch.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderWitch.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelWitch;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.entity.layers.LayerHeldItemWitch;
@@ -10,7 +11,7 @@ public class RenderWitch extends RenderLiving<EntityWitch>
 {
     private static final ResourceLocation witchTextures = new ResourceLocation("textures/entity/witch.png");
 
-    public RenderWitch(RenderManager renderManagerIn)
+    public RenderWitch(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelWitch(0.0F), 0.5F);
         this.addLayer(new LayerHeldItemWitch(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderWither.java b/src/main/java/net/minecraft/client/renderer/entity/RenderWither.java
index 1b4ccb0..5cf12c5 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderWither.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderWither.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelWither;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.entity.layers.LayerWitherAura;
@@ -12,7 +13,7 @@ public class RenderWither extends RenderLiving<EntityWither>
     private static final ResourceLocation invulnerableWitherTextures = new ResourceLocation("textures/entity/wither/wither_invulnerable.png");
     private static final ResourceLocation witherTextures = new ResourceLocation("textures/entity/wither/wither.png");
 
-    public RenderWither(RenderManager renderManagerIn)
+    public RenderWither(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelWither(0.0F), 1.0F);
         this.addLayer(new LayerWitherAura(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderWolf.java b/src/main/java/net/minecraft/client/renderer/entity/RenderWolf.java
index ac9a7a8..2ffc03e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderWolf.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderWolf.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.entity.layers.LayerWolfCollar;
@@ -12,7 +13,7 @@ public class RenderWolf extends RenderLiving<EntityWolf>
     private static final ResourceLocation tamedWolfTextures = new ResourceLocation("textures/entity/wolf/wolf_tame.png");
     private static final ResourceLocation anrgyWolfTextures = new ResourceLocation("textures/entity/wolf/wolf_angry.png");
 
-    public RenderWolf(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RenderWolf(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn, modelBaseIn, shadowSizeIn);
         this.addLayer(new LayerWolfCollar(this));
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderXPOrb.java b/src/main/java/net/minecraft/client/renderer/entity/RenderXPOrb.java
index 3a58ece..8e34cd0 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderXPOrb.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderXPOrb.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.entity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.Tessellator;
@@ -15,7 +16,7 @@ public class RenderXPOrb extends Render<EntityXPOrb>
 {
     private static final ResourceLocation experienceOrbTextures = new ResourceLocation("textures/entity/experience_orb.png");
 
-    public RenderXPOrb(RenderManager renderManagerIn)
+    public RenderXPOrb(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
         this.shadowSize = 0.15F;
@@ -54,8 +55,8 @@ public class RenderXPOrb extends Render<EntityXPOrb>
         l = (int)((MathHelper.sin(f8 + 0.0F) + 1.0F) * 0.5F * 255.0F);
         int i1 = 255;
         int j1 = (int)((MathHelper.sin(f8 + 4.1887903F) + 1.0F) * 0.1F * 255.0F);
-        GlStateManager.rotate(180.0F - this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-        GlStateManager.rotate(-this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
+        GlStateManager.rotate(180.0F - this.renderManager.getPlayerViewY(), 0.0F, 1.0F, 0.0F);
+        GlStateManager.rotate(-this.renderManager.getPlayerViewX(), 1.0F, 0.0F, 0.0F);
         float f9 = 0.3F;
         GlStateManager.scale(0.3F, 0.3F, 0.3F);
         Tessellator tessellator = Tessellator.getInstance();
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderZombie.java b/src/main/java/net/minecraft/client/renderer/entity/RenderZombie.java
index 13d126b..4e7f860 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderZombie.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderZombie.java
@@ -2,6 +2,8 @@ package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.Lists;
 import java.util.List;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBiped;
 import net.minecraft.client.model.ModelZombie;
 import net.minecraft.client.model.ModelZombieVillager;
@@ -22,7 +24,7 @@ public class RenderZombie extends RenderBiped<EntityZombie>
     private final List<LayerRenderer<EntityZombie>> field_177121_n;
     private final List<LayerRenderer<EntityZombie>> field_177122_o;
 
-    public RenderZombie(RenderManager renderManagerIn)
+    public RenderZombie(IRenderManager renderManagerIn)
     {
         super(renderManagerIn, new ModelZombie(), 0.5F, 1.0F);
         LayerRenderer layerrenderer = (LayerRenderer)this.layerRenderers.get(0);
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RendererLivingEntity.java b/src/main/java/net/minecraft/client/renderer/entity/RendererLivingEntity.java
index a150c95..37eba2e 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RendererLivingEntity.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RendererLivingEntity.java
@@ -3,6 +3,8 @@ package net.minecraft.client.renderer.entity;
 import com.google.common.collect.Lists;
 import java.nio.FloatBuffer;
 import java.util.List;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.EntityPlayerSP;
 import net.minecraft.client.gui.FontRenderer;
@@ -54,7 +56,7 @@ public abstract class RendererLivingEntity<T extends EntityLivingBase> extends R
     private boolean renderLayersPushMatrix;
     public static final boolean animateModelLiving = Boolean.getBoolean("animate.model.living");
 
-    public RendererLivingEntity(RenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
+    public RendererLivingEntity(IRenderManager renderManagerIn, ModelBase modelBaseIn, float shadowSizeIn)
     {
         super(renderManagerIn);
         this.mainModel = modelBaseIn;
@@ -632,7 +634,7 @@ public abstract class RendererLivingEntity<T extends EntityLivingBase> extends R
         {
             if (this.canRenderName(entity))
             {
-                double d0 = entity.getDistanceSqToEntity(this.renderManager.livingPlayer);
+                double d0 = entity.getDistanceSqToEntity(this.renderManager.getLivingPlayer());
                 float f = entity.isSneaking() ? NAME_TAG_RANGE_SNEAK : NAME_TAG_RANGE;
 
                 if (d0 < (double)(f * f))
@@ -647,8 +649,8 @@ public abstract class RendererLivingEntity<T extends EntityLivingBase> extends R
                         GlStateManager.pushMatrix();
                         GlStateManager.translate((float)x, (float)y + entity.height + 0.5F - (entity.isChild() ? entity.height / 2.0F : 0.0F), (float)z);
                         GL11.glNormal3f(0.0F, 1.0F, 0.0F);
-                        GlStateManager.rotate(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-                        GlStateManager.rotate(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
+                        GlStateManager.rotate(-this.renderManager.getPlayerViewY(), 0.0F, 1.0F, 0.0F);
+                        GlStateManager.rotate(this.renderManager.getPlayerViewX(), 1.0F, 0.0F, 0.0F);
                         GlStateManager.scale(-0.02666667F, -0.02666667F, 0.02666667F);
                         GlStateManager.translate(0.0F, 9.374999F, 0.0F);
                         GlStateManager.disableLighting();
@@ -720,7 +722,7 @@ public abstract class RendererLivingEntity<T extends EntityLivingBase> extends R
             }
         }
 
-        return Minecraft.isGuiEnabled() && entity != this.renderManager.livingPlayer && !entity.isInvisibleToPlayer(entityplayersp) && entity.riddenByEntity == null;
+        return Minecraft.isGuiEnabled() && entity != this.renderManager.getLivingPlayer() && !entity.isInvisibleToPlayer(entityplayersp) && entity.riddenByEntity == null;
     }
 
     public void setRenderOutlines(boolean renderOutlinesIn)
diff --git a/src/main/java/net/minecraft/client/renderer/tileentity/RenderEnderCrystal.java b/src/main/java/net/minecraft/client/renderer/tileentity/RenderEnderCrystal.java
index 62db1de..d355f97 100644
--- a/src/main/java/net/minecraft/client/renderer/tileentity/RenderEnderCrystal.java
+++ b/src/main/java/net/minecraft/client/renderer/tileentity/RenderEnderCrystal.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.tileentity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelEnderCrystal;
 import net.minecraft.client.renderer.GlStateManager;
@@ -14,7 +15,7 @@ public class RenderEnderCrystal extends Render<EntityEnderCrystal>
     private static final ResourceLocation enderCrystalTextures = new ResourceLocation("textures/entity/endercrystal/endercrystal.png");
     private ModelBase modelEnderCrystal = new ModelEnderCrystal(0.0F, true);
 
-    public RenderEnderCrystal(RenderManager renderManagerIn)
+    public RenderEnderCrystal(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
         this.shadowSize = 0.5F;
diff --git a/src/main/java/net/minecraft/client/renderer/tileentity/RenderItemFrame.java b/src/main/java/net/minecraft/client/renderer/tileentity/RenderItemFrame.java
index 7af3442..011791c 100644
--- a/src/main/java/net/minecraft/client/renderer/tileentity/RenderItemFrame.java
+++ b/src/main/java/net/minecraft/client/renderer/tileentity/RenderItemFrame.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.tileentity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.renderer.BlockRendererDispatcher;
@@ -44,7 +45,7 @@ public class RenderItemFrame extends Render<EntityItemFrame>
     private RenderItem itemRenderer;
     private static double itemRenderDistanceSq = 4096.0D;
 
-    public RenderItemFrame(RenderManager renderManagerIn, RenderItem itemRendererIn)
+    public RenderItemFrame(IRenderManager renderManagerIn, RenderItem itemRendererIn)
     {
         super(renderManagerIn);
         this.itemRenderer = itemRendererIn;
@@ -62,7 +63,7 @@ public class RenderItemFrame extends Render<EntityItemFrame>
         double d2 = (double)blockpos.getZ() - entity.posZ + z;
         GlStateManager.translate(d0 + 0.5D, d1 + 0.5D, d2 + 0.5D);
         GlStateManager.rotate(180.0F - entity.rotationYaw, 0.0F, 1.0F, 0.0F);
-        this.renderManager.renderEngine.bindTexture(TextureMap.locationBlocksTexture);
+        this.renderManager.getRenderEngine().bindTexture(TextureMap.locationBlocksTexture);
         BlockRendererDispatcher blockrendererdispatcher = this.mc.getBlockRendererDispatcher();
         ModelManager modelmanager = blockrendererdispatcher.getBlockModelShapes().getModelManager();
         IBakedModel ibakedmodel;
@@ -135,7 +136,7 @@ public class RenderItemFrame extends Render<EntityItemFrame>
             {
                 if (item instanceof ItemMap)
                 {
-                    this.renderManager.renderEngine.bindTexture(mapBackgroundTextures);
+                    this.renderManager.getRenderEngine().bindTexture(mapBackgroundTextures);
                     GlStateManager.rotate(180.0F, 0.0F, 0.0F, 1.0F);
                     float f = 0.0078125F;
                     GlStateManager.scale(f, f, f);
@@ -198,13 +199,13 @@ public class RenderItemFrame extends Render<EntityItemFrame>
         }
     }
 
-    protected void renderName(EntityItemFrame entity, double x, double y, double z)
+    public void renderName(EntityItemFrame entity, double x, double y, double z)
     {
-        if (Minecraft.isGuiEnabled() && entity.getDisplayedItem() != null && entity.getDisplayedItem().hasDisplayName() && this.renderManager.pointedEntity == entity)
+        if (Minecraft.isGuiEnabled() && entity.getDisplayedItem() != null && entity.getDisplayedItem().hasDisplayName() && this.renderManager.getPointedEntity() == entity)
         {
             float f = 1.6F;
             float f1 = 0.016666668F * f;
-            double d0 = entity.getDistanceSqToEntity(this.renderManager.livingPlayer);
+            double d0 = entity.getDistanceSqToEntity(this.renderManager.getLivingPlayer());
             float f2 = entity.isSneaking() ? 32.0F : 64.0F;
 
             if (d0 < (double)(f2 * f2))
@@ -217,8 +218,8 @@ public class RenderItemFrame extends Render<EntityItemFrame>
                     GlStateManager.pushMatrix();
                     GlStateManager.translate((float)x + 0.0F, (float)y + entity.height + 0.5F, (float)z);
                     GL11.glNormal3f(0.0F, 1.0F, 0.0F);
-                    GlStateManager.rotate(-this.renderManager.playerViewY, 0.0F, 1.0F, 0.0F);
-                    GlStateManager.rotate(this.renderManager.playerViewX, 1.0F, 0.0F, 0.0F);
+                    GlStateManager.rotate(-this.renderManager.getPlayerViewY(), 0.0F, 1.0F, 0.0F);
+                    GlStateManager.rotate(this.renderManager.getPlayerViewX(), 1.0F, 0.0F, 0.0F);
                     GlStateManager.scale(-f1, -f1, f1);
                     GlStateManager.disableLighting();
                     GlStateManager.translate(0.0F, 0.25F / f1, 0.0F);
diff --git a/src/main/java/net/minecraft/client/renderer/tileentity/RenderWitherSkull.java b/src/main/java/net/minecraft/client/renderer/tileentity/RenderWitherSkull.java
index 338595a..39136f3 100644
--- a/src/main/java/net/minecraft/client/renderer/tileentity/RenderWitherSkull.java
+++ b/src/main/java/net/minecraft/client/renderer/tileentity/RenderWitherSkull.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.renderer.tileentity;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.model.ModelSkeletonHead;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.entity.Render;
@@ -15,7 +16,7 @@ public class RenderWitherSkull extends Render<EntityWitherSkull>
     /** The Skeleton's head model. */
     private final ModelSkeletonHead skeletonHeadModel = new ModelSkeletonHead();
 
-    public RenderWitherSkull(RenderManager renderManagerIn)
+    public RenderWitherSkull(IRenderManager renderManagerIn)
     {
         super(renderManagerIn);
     }
diff --git a/src/main/java/net/minecraft/entity/EntityLivingBase.java b/src/main/java/net/minecraft/entity/EntityLivingBase.java
index 9db4829..9c3eddb 100644
--- a/src/main/java/net/minecraft/entity/EntityLivingBase.java
+++ b/src/main/java/net/minecraft/entity/EntityLivingBase.java
@@ -3,21 +3,11 @@ package net.minecraft.entity;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.common.collect.Maps;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.UUID;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
-import net.minecraft.entity.ai.attributes.AttributeModifier;
-import net.minecraft.entity.ai.attributes.BaseAttributeMap;
-import net.minecraft.entity.ai.attributes.IAttribute;
-import net.minecraft.entity.ai.attributes.IAttributeInstance;
-import net.minecraft.entity.ai.attributes.ServersideAttributeMap;
+import net.minecraft.entity.ai.attributes.*;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.item.EntityXPOrb;
 import net.minecraft.entity.passive.EntityWolf;
@@ -28,11 +18,7 @@ import net.minecraft.init.Blocks;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemStack;
-import net.minecraft.nbt.NBTBase;
-import net.minecraft.nbt.NBTTagCompound;
-import net.minecraft.nbt.NBTTagFloat;
-import net.minecraft.nbt.NBTTagList;
-import net.minecraft.nbt.NBTTagShort;
+import net.minecraft.nbt.*;
 import net.minecraft.network.play.server.S04PacketEntityEquipment;
 import net.minecraft.network.play.server.S0BPacketAnimation;
 import net.minecraft.network.play.server.S0DPacketCollectItem;
@@ -40,29 +26,27 @@ import net.minecraft.potion.Potion;
 import net.minecraft.potion.PotionEffect;
 import net.minecraft.potion.PotionHelper;
 import net.minecraft.scoreboard.Team;
-import net.minecraft.util.AxisAlignedBB;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.CombatTracker;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.EntitySelectors;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.Vec3;
+import net.minecraft.util.*;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 
-public abstract class EntityLivingBase extends Entity
-{
+import java.util.*;
+
+public abstract class EntityLivingBase extends Entity {
     private static final UUID sprintingSpeedBoostModifierUUID = UUID.fromString("662A6B8D-DA3E-4C1C-8813-96EA6097278D");
     private static final AttributeModifier sprintingSpeedBoostModifier = (new AttributeModifier(sprintingSpeedBoostModifierUUID, "Sprinting speed boost", 0.30000001192092896D, 2)).setSaved(false);
     private BaseAttributeMap attributeMap;
     private final CombatTracker _combatTracker = new CombatTracker(this);
     private final Map<Integer, PotionEffect> activePotionsMap = Maps.<Integer, PotionEffect>newHashMap();
 
-    /** The equipment this mob was previously wearing, used for syncing. */
+    /**
+     * The equipment this mob was previously wearing, used for syncing.
+     */
     private final ItemStack[] previousEquipment = new ItemStack[5];
 
-    /** Whether an arm swing is currently in progress. */
+    /**
+     * Whether an arm swing is currently in progress.
+     */
     public boolean isSwingInProgress;
     public int swingProgressInt;
     public int arrowHitTimer;
@@ -72,10 +56,14 @@ public abstract class EntityLivingBase extends Entity
      */
     public int hurtTime;
 
-    /** What the hurt time was max set to last. */
+    /**
+     * What the hurt time was max set to last.
+     */
     public int maxHurtTime;
 
-    /** The yaw at which this entity was last attacked from. */
+    /**
+     * The yaw at which this entity was last attacked from.
+     */
     public float attackedAtYaw;
 
     /**
@@ -100,10 +88,14 @@ public abstract class EntityLivingBase extends Entity
     public float renderYawOffset;
     public float prevRenderYawOffset;
 
-    /** Entity head rotation yaw */
+    /**
+     * Entity head rotation yaw
+     */
     public float rotationYawHead;
 
-    /** Entity head rotation yaw at previous tick */
+    /**
+     * Entity head rotation yaw at previous tick
+     */
     public float prevRotationYawHead;
 
     /**
@@ -111,7 +103,9 @@ public abstract class EntityLivingBase extends Entity
      */
     public float jumpMovementFactor = 0.02F;
 
-    /** The most recent player that has attacked this entity */
+    /**
+     * The most recent player that has attacked this entity
+     */
     protected EntityPlayer attackingPlayer;
 
     /**
@@ -125,7 +119,9 @@ public abstract class EntityLivingBase extends Entity
      */
     protected boolean dead;
 
-    /** The age of this EntityLiving (used to determine when it dies) */
+    /**
+     * The age of this EntityLiving (used to determine when it dies)
+     */
     protected int entityAge;
     protected float prevOnGroundSpeedFactor;
     protected float onGroundSpeedFactor;
@@ -133,7 +129,9 @@ public abstract class EntityLivingBase extends Entity
     protected float prevMovedDistance;
     protected float unused180;
 
-    /** The score value of the Mob, the amount of points the mob is worth. */
+    /**
+     * The score value of the Mob, the amount of points the mob is worth.
+     */
     protected int scoreValue;
 
     /**
@@ -141,7 +139,9 @@ public abstract class EntityLivingBase extends Entity
      */
     protected float lastDamage;
 
-    /** used to check whether entity is jumping. */
+    /**
+     * used to check whether entity is jumping.
+     */
     protected boolean isJumping;
     public float moveStrafing;
     public float moveForward;
@@ -152,28 +152,42 @@ public abstract class EntityLivingBase extends Entity
      */
     protected int newPosRotationIncrements;
 
-    /** The new X position to be applied to the entity. */
+    /**
+     * The new X position to be applied to the entity.
+     */
     protected double newPosX;
 
-    /** The new Y position to be applied to the entity. */
+    /**
+     * The new Y position to be applied to the entity.
+     */
     protected double newPosY;
     protected double newPosZ;
 
-    /** The new yaw rotation to be applied to the entity. */
+    /**
+     * The new yaw rotation to be applied to the entity.
+     */
     protected double newRotationYaw;
 
-    /** The new yaw rotation to be applied to the entity. */
+    /**
+     * The new yaw rotation to be applied to the entity.
+     */
     protected double newRotationPitch;
 
-    /** Whether the DataWatcher needs to be updated with the active potions */
+    /**
+     * Whether the DataWatcher needs to be updated with the active potions
+     */
     private boolean potionsNeedUpdate = true;
 
-    /** is only being set, has no uses as of MC 1.1 */
+    /**
+     * is only being set, has no uses as of MC 1.1
+     */
     private EntityLivingBase entityLivingToAttack;
     private int revengeTimer;
     private EntityLivingBase lastAttacker;
 
-    /** Holds the value of ticksExisted when setLastAttacker was last called. */
+    /**
+     * Holds the value of ticksExisted when setLastAttacker was last called.
+     */
     private int lastAttackerTime;
 
     /**
@@ -182,196 +196,161 @@ public abstract class EntityLivingBase extends Entity
      */
     private float landMovementFactor;
 
-    /** Number of ticks since last jump */
+    /**
+     * Number of ticks since last jump
+     */
     private int jumpTicks;
     private float absorptionAmount;
 
     /**
      * Called by the /kill command.
      */
-    public void onKillCommand()
-    {
+    public void onKillCommand() {
         this.attackEntityFrom(DamageSource.outOfWorld, Float.MAX_VALUE);
     }
 
-    public EntityLivingBase(World worldIn)
-    {
+    public EntityLivingBase(World worldIn) {
         super(worldIn);
         this.applyEntityAttributes();
         this.setHealth(this.getMaxHealth());
         this.preventEntitySpawning = true;
-        this.randomUnused1 = (float)((Math.random() + 1.0D) * 0.009999999776482582D);
+        this.randomUnused1 = (float) ((Math.random() + 1.0D) * 0.009999999776482582D);
         this.setPosition(this.posX, this.posY, this.posZ);
-        this.randomUnused2 = (float)Math.random() * 12398.0F;
-        this.rotationYaw = (float)(Math.random() * Math.PI * 2.0D);
+        this.randomUnused2 = (float) Math.random() * 12398.0F;
+        this.rotationYaw = (float) (Math.random() * Math.PI * 2.0D);
         this.rotationYawHead = this.rotationYaw;
         this.stepHeight = 0.6F;
     }
 
-    protected void entityInit()
-    {
+    protected void entityInit() {
         this.dataWatcher.addObject(7, Integer.valueOf(0));
-        this.dataWatcher.addObject(8, Byte.valueOf((byte)0));
-        this.dataWatcher.addObject(9, Byte.valueOf((byte)0));
+        this.dataWatcher.addObject(8, Byte.valueOf((byte) 0));
+        this.dataWatcher.addObject(9, Byte.valueOf((byte) 0));
         this.dataWatcher.addObject(6, Float.valueOf(1.0F));
     }
 
-    protected void applyEntityAttributes()
-    {
+    protected void applyEntityAttributes() {
         this.getAttributeMap().registerAttribute(SharedMonsterAttributes.maxHealth);
         this.getAttributeMap().registerAttribute(SharedMonsterAttributes.knockbackResistance);
         this.getAttributeMap().registerAttribute(SharedMonsterAttributes.movementSpeed);
     }
 
-    protected void updateFallState(double y, boolean onGroundIn, Block blockIn, BlockPos pos)
-    {
-        if (!this.isInWater())
-        {
+    protected void updateFallState(double y, boolean onGroundIn, Block blockIn, BlockPos pos) {
+        if (!this.isInWater()) {
             this.handleWaterMovement();
         }
 
-        if (!this.worldObj.isRemote && this.fallDistance > 3.0F && onGroundIn)
-        {
+        if (!this.worldObj.isRemote && this.fallDistance > 3.0F && onGroundIn) {
             IBlockState iblockstate = this.worldObj.getBlockState(pos);
             Block block = iblockstate.getBlock();
-            float f = (float)MathHelper.ceiling_float_int(this.fallDistance - 3.0F);
+            float f = (float) MathHelper.ceiling_float_int(this.fallDistance - 3.0F);
 
-            if (block.getMaterial() != Material.air)
-            {
-                double d0 = (double)Math.min(0.2F + f / 15.0F, 10.0F);
+            if (block.getMaterial() != Material.air) {
+                double d0 = (double) Math.min(0.2F + f / 15.0F, 10.0F);
 
-                if (d0 > 2.5D)
-                {
+                if (d0 > 2.5D) {
                     d0 = 2.5D;
                 }
 
-                int i = (int)(150.0D * d0);
-                ((WorldServer)this.worldObj).spawnParticle(EnumParticleTypes.BLOCK_DUST, this.posX, this.posY, this.posZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[] {Block.getStateId(iblockstate)});
+                int i = (int) (150.0D * d0);
+                ((WorldServer) this.worldObj).spawnParticle(EnumParticleTypes.BLOCK_DUST, this.posX, this.posY, this.posZ, i, 0.0D, 0.0D, 0.0D, 0.15000000596046448D, new int[]{Block.getStateId(iblockstate)});
             }
         }
 
         super.updateFallState(y, onGroundIn, blockIn, pos);
     }
 
-    public boolean canBreatheUnderwater()
-    {
+    public boolean canBreatheUnderwater() {
         return false;
     }
 
     /**
      * Gets called every tick from main Entity class
      */
-    public void onEntityUpdate()
-    {
+    public void onEntityUpdate() {
         this.prevSwingProgress = this.swingProgress;
         super.onEntityUpdate();
         this.worldObj.theProfiler.startSection("livingEntityBaseTick");
         boolean flag = this instanceof EntityPlayer;
 
-        if (this.isEntityAlive())
-        {
-            if (this.isEntityInsideOpaqueBlock())
-            {
+        if (this.isEntityAlive()) {
+            if (this.isEntityInsideOpaqueBlock()) {
                 this.attackEntityFrom(DamageSource.inWall, 1.0F);
-            }
-            else if (flag && !this.worldObj.getWorldBorder().contains(this.getEntityBoundingBox()))
-            {
+            } else if (flag && !this.worldObj.getWorldBorder().contains(this.getEntityBoundingBox())) {
                 double d0 = this.worldObj.getWorldBorder().getClosestDistance(this) + this.worldObj.getWorldBorder().getDamageBuffer();
 
-                if (d0 < 0.0D)
-                {
-                    this.attackEntityFrom(DamageSource.inWall, (float)Math.max(1, MathHelper.floor_double(-d0 * this.worldObj.getWorldBorder().getDamageAmount())));
+                if (d0 < 0.0D) {
+                    this.attackEntityFrom(DamageSource.inWall, (float) Math.max(1, MathHelper.floor_double(-d0 * this.worldObj.getWorldBorder().getDamageAmount())));
                 }
             }
         }
 
-        if (this.isImmuneToFire() || this.worldObj.isRemote)
-        {
+        if (this.isImmuneToFire() || this.worldObj.isRemote) {
             this.extinguish();
         }
 
-        boolean flag1 = flag && ((EntityPlayer)this).capabilities.disableDamage;
+        boolean flag1 = flag && ((EntityPlayer) this).capabilities.disableDamage;
 
-        if (this.isEntityAlive())
-        {
-            if (this.isInsideOfMaterial(Material.water))
-            {
-                if (!this.canBreatheUnderwater() && !this.isPotionActive(Potion.waterBreathing.id) && !flag1)
-                {
+        if (this.isEntityAlive()) {
+            if (this.isInsideOfMaterial(Material.water)) {
+                if (!this.canBreatheUnderwater() && !this.isPotionActive(Potion.waterBreathing.id) && !flag1) {
                     this.setAir(this.decreaseAirSupply(this.getAir()));
 
-                    if (this.getAir() == -20)
-                    {
+                    if (this.getAir() == -20) {
                         this.setAir(0);
 
-                        for (int i = 0; i < 8; ++i)
-                        {
+                        for (int i = 0; i < 8; ++i) {
                             float f = this.rand.nextFloat() - this.rand.nextFloat();
                             float f1 = this.rand.nextFloat() - this.rand.nextFloat();
                             float f2 = this.rand.nextFloat() - this.rand.nextFloat();
-                            this.worldObj.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX + (double)f, this.posY + (double)f1, this.posZ + (double)f2, this.motionX, this.motionY, this.motionZ, new int[0]);
+                            this.worldObj.spawnParticle(EnumParticleTypes.WATER_BUBBLE, this.posX + (double) f, this.posY + (double) f1, this.posZ + (double) f2, this.motionX, this.motionY, this.motionZ, new int[0]);
                         }
 
                         this.attackEntityFrom(DamageSource.drown, 2.0F);
                     }
                 }
 
-                if (!this.worldObj.isRemote && this.isRiding() && this.ridingEntity instanceof EntityLivingBase)
-                {
-                    this.mountEntity((Entity)null);
+                if (!this.worldObj.isRemote && this.isRiding() && this.ridingEntity instanceof EntityLivingBase) {
+                    this.mountEntity((Entity) null);
                 }
-            }
-            else
-            {
+            } else {
                 this.setAir(300);
             }
         }
 
-        if (this.isEntityAlive() && this.isWet())
-        {
+        if (this.isEntityAlive() && this.isWet()) {
             this.extinguish();
         }
 
         this.prevCameraPitch = this.cameraPitch;
 
-        if (this.hurtTime > 0)
-        {
+        if (this.hurtTime > 0) {
             --this.hurtTime;
         }
 
-        if (this.hurtResistantTime > 0 && !(this instanceof EntityPlayerMP))
-        {
+        if (this.hurtResistantTime > 0 && !(this instanceof EntityPlayerMP)) {
             --this.hurtResistantTime;
         }
 
-        if (this.getHealth() <= 0.0F)
-        {
+        if (this.getHealth() <= 0.0F) {
             this.onDeathUpdate();
         }
 
-        if (this.recentlyHit > 0)
-        {
+        if (this.recentlyHit > 0) {
             --this.recentlyHit;
-        }
-        else
-        {
+        } else {
             this.attackingPlayer = null;
         }
 
-        if (this.lastAttacker != null && !this.lastAttacker.isEntityAlive())
-        {
+        if (this.lastAttacker != null && !this.lastAttacker.isEntityAlive()) {
             this.lastAttacker = null;
         }
 
-        if (this.entityLivingToAttack != null)
-        {
-            if (!this.entityLivingToAttack.isEntityAlive())
-            {
-                this.setRevengeTarget((EntityLivingBase)null);
-            }
-            else if (this.ticksExisted - this.revengeTimer > 100)
-            {
-                this.setRevengeTarget((EntityLivingBase)null);
+        if (this.entityLivingToAttack != null) {
+            if (!this.entityLivingToAttack.isEntityAlive()) {
+                this.setRevengeTarget((EntityLivingBase) null);
+            } else if (this.ticksExisted - this.revengeTimer > 100) {
+                this.setRevengeTarget((EntityLivingBase) null);
             }
         }
 
@@ -387,26 +366,21 @@ public abstract class EntityLivingBase extends Entity
     /**
      * If Animal, checks if the age timer is negative
      */
-    public boolean isChild()
-    {
+    public boolean isChild() {
         return false;
     }
 
     /**
      * handles entity death timer, experience orb and particle creation
      */
-    protected void onDeathUpdate()
-    {
+    protected void onDeathUpdate() {
         ++this.deathTime;
 
-        if (this.deathTime == 20)
-        {
-            if (!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && this.canDropLoot() && this.worldObj.getGameRules().getBoolean("doMobLoot"))
-            {
+        if (this.deathTime == 20) {
+            if (!this.worldObj.isRemote && (this.recentlyHit > 0 || this.isPlayer()) && this.canDropLoot() && this.worldObj.getGameRules().getBoolean("doMobLoot")) {
                 int i = this.getExperiencePoints(this.attackingPlayer);
 
-                while (i > 0)
-                {
+                while (i > 0) {
                     int j = EntityXPOrb.getXPSplit(i);
                     i -= j;
                     this.worldObj.spawnEntityInWorld(new EntityXPOrb(this.worldObj, this.posX, this.posY, this.posZ, j));
@@ -415,12 +389,11 @@ public abstract class EntityLivingBase extends Entity
 
             this.setDead();
 
-            for (int k = 0; k < 20; ++k)
-            {
+            for (int k = 0; k < 20; ++k) {
                 double d2 = this.rand.nextGaussian() * 0.02D;
                 double d0 = this.rand.nextGaussian() * 0.02D;
                 double d1 = this.rand.nextGaussian() * 0.02D;
-                this.worldObj.spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, this.posY + (double)(this.rand.nextFloat() * this.height), this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width, d2, d0, d1, new int[0]);
+                this.worldObj.spawnParticle(EnumParticleTypes.EXPLOSION_NORMAL, this.posX + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width, this.posY + (double) (this.rand.nextFloat() * this.height), this.posZ + (double) (this.rand.nextFloat() * this.width * 2.0F) - (double) this.width, d2, d0, d1, new int[0]);
             }
         }
     }
@@ -428,16 +401,14 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Entity won't drop items or experience points if this returns false
      */
-    protected boolean canDropLoot()
-    {
+    protected boolean canDropLoot() {
         return !this.isChild();
     }
 
     /**
      * Decrements the entity's air supply when underwater
      */
-    protected int decreaseAirSupply(int p_70682_1_)
-    {
+    protected int decreaseAirSupply(int p_70682_1_) {
         int i = EnchantmentHelper.getRespiration(this);
         return i > 0 && this.rand.nextInt(i + 1) > 0 ? p_70682_1_ : p_70682_1_ - 1;
     }
@@ -445,105 +416,85 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Get the experience points the entity currently has.
      */
-    protected int getExperiencePoints(EntityPlayer player)
-    {
+    protected int getExperiencePoints(EntityPlayer player) {
         return 0;
     }
 
     /**
      * Only use is to identify if class is an instance of player for experience dropping
      */
-    protected boolean isPlayer()
-    {
+    protected boolean isPlayer() {
         return false;
     }
 
-    public Random getRNG()
-    {
+    public Random getRNG() {
         return this.rand;
     }
 
-    public EntityLivingBase getAITarget()
-    {
+    public EntityLivingBase getAITarget() {
         return this.entityLivingToAttack;
     }
 
-    public int getRevengeTimer()
-    {
+    public int getRevengeTimer() {
         return this.revengeTimer;
     }
 
-    public void setRevengeTarget(EntityLivingBase livingBase)
-    {
+    public void setRevengeTarget(EntityLivingBase livingBase) {
         this.entityLivingToAttack = livingBase;
         this.revengeTimer = this.ticksExisted;
     }
 
-    public EntityLivingBase getLastAttacker()
-    {
+    public EntityLivingBase getLastAttacker() {
         return this.lastAttacker;
     }
 
-    public int getLastAttackerTime()
-    {
+    public int getLastAttackerTime() {
         return this.lastAttackerTime;
     }
 
-    public void setLastAttacker(Entity entityIn)
-    {
-        if (entityIn instanceof EntityLivingBase)
-        {
-            this.lastAttacker = (EntityLivingBase)entityIn;
-        }
-        else
-        {
+    public void setLastAttacker(Entity entityIn) {
+        if (entityIn instanceof EntityLivingBase) {
+            this.lastAttacker = (EntityLivingBase) entityIn;
+        } else {
             this.lastAttacker = null;
         }
 
         this.lastAttackerTime = this.ticksExisted;
     }
 
-    public int getAge()
-    {
+    public int getAge() {
         return this.entityAge;
     }
 
     /**
      * (abstract) Protected helper method to write subclass entity data to NBT.
      */
-    public void writeEntityToNBT(NBTTagCompound tagCompound)
-    {
+    public void writeEntityToNBT(NBTTagCompound tagCompound) {
         tagCompound.setFloat("HealF", this.getHealth());
-        tagCompound.setShort("Health", (short)((int)Math.ceil((double)this.getHealth())));
-        tagCompound.setShort("HurtTime", (short)this.hurtTime);
+        tagCompound.setShort("Health", (short) ((int) Math.ceil((double) this.getHealth())));
+        tagCompound.setShort("HurtTime", (short) this.hurtTime);
         tagCompound.setInteger("HurtByTimestamp", this.revengeTimer);
-        tagCompound.setShort("DeathTime", (short)this.deathTime);
+        tagCompound.setShort("DeathTime", (short) this.deathTime);
         tagCompound.setFloat("AbsorptionAmount", this.getAbsorptionAmount());
 
-        for (ItemStack itemstack : this.getInventory())
-        {
-            if (itemstack != null)
-            {
+        for (ItemStack itemstack : this.getInventory()) {
+            if (itemstack != null) {
                 this.attributeMap.removeAttributeModifiers(itemstack.getAttributeModifiers());
             }
         }
 
         tagCompound.setTag("Attributes", SharedMonsterAttributes.writeBaseAttributeMapToNBT(this.getAttributeMap()));
 
-        for (ItemStack itemstack1 : this.getInventory())
-        {
-            if (itemstack1 != null)
-            {
+        for (ItemStack itemstack1 : this.getInventory()) {
+            if (itemstack1 != null) {
                 this.attributeMap.applyAttributeModifiers(itemstack1.getAttributeModifiers());
             }
         }
 
-        if (!this.activePotionsMap.isEmpty())
-        {
+        if (!this.activePotionsMap.isEmpty()) {
             NBTTagList nbttaglist = new NBTTagList();
 
-            for (PotionEffect potioneffect : this.activePotionsMap.values())
-            {
+            for (PotionEffect potioneffect : this.activePotionsMap.values()) {
                 nbttaglist.appendTag(potioneffect.writeCustomPotionEffectToNBT(new NBTTagCompound()));
             }
 
@@ -554,50 +505,37 @@ public abstract class EntityLivingBase extends Entity
     /**
      * (abstract) Protected helper method to read subclass entity data from NBT.
      */
-    public void readEntityFromNBT(NBTTagCompound tagCompund)
-    {
+    public void readEntityFromNBT(NBTTagCompound tagCompund) {
         this.setAbsorptionAmount(tagCompund.getFloat("AbsorptionAmount"));
 
-        if (tagCompund.hasKey("Attributes", 9) && this.worldObj != null && !this.worldObj.isRemote)
-        {
+        if (tagCompund.hasKey("Attributes", 9) && this.worldObj != null && !this.worldObj.isRemote) {
             SharedMonsterAttributes.setAttributeModifiers(this.getAttributeMap(), tagCompund.getTagList("Attributes", 10));
         }
 
-        if (tagCompund.hasKey("ActiveEffects", 9))
-        {
+        if (tagCompund.hasKey("ActiveEffects", 9)) {
             NBTTagList nbttaglist = tagCompund.getTagList("ActiveEffects", 10);
 
-            for (int i = 0; i < nbttaglist.tagCount(); ++i)
-            {
+            for (int i = 0; i < nbttaglist.tagCount(); ++i) {
                 NBTTagCompound nbttagcompound = nbttaglist.getCompoundTagAt(i);
                 PotionEffect potioneffect = PotionEffect.readCustomPotionEffectFromNBT(nbttagcompound);
 
-                if (potioneffect != null)
-                {
+                if (potioneffect != null) {
                     this.activePotionsMap.put(Integer.valueOf(potioneffect.getPotionID()), potioneffect);
                 }
             }
         }
 
-        if (tagCompund.hasKey("HealF", 99))
-        {
+        if (tagCompund.hasKey("HealF", 99)) {
             this.setHealth(tagCompund.getFloat("HealF"));
-        }
-        else
-        {
+        } else {
             NBTBase nbtbase = tagCompund.getTag("Health");
 
-            if (nbtbase == null)
-            {
+            if (nbtbase == null) {
                 this.setHealth(this.getMaxHealth());
-            }
-            else if (nbtbase.getId() == 5)
-            {
-                this.setHealth(((NBTTagFloat)nbtbase).getFloat());
-            }
-            else if (nbtbase.getId() == 2)
-            {
-                this.setHealth((float)((NBTTagShort)nbtbase).getShort());
+            } else if (nbtbase.getId() == 5) {
+                this.setHealth(((NBTTagFloat) nbtbase).getFloat());
+            } else if (nbtbase.getId() == 2) {
+                this.setHealth((float) ((NBTTagShort) nbtbase).getShort());
             }
         }
 
@@ -606,33 +544,25 @@ public abstract class EntityLivingBase extends Entity
         this.revengeTimer = tagCompund.getInteger("HurtByTimestamp");
     }
 
-    protected void updatePotionEffects()
-    {
+    protected void updatePotionEffects() {
         Iterator<Integer> iterator = this.activePotionsMap.keySet().iterator();
 
-        while (iterator.hasNext())
-        {
-            Integer integer = (Integer)iterator.next();
-            PotionEffect potioneffect = (PotionEffect)this.activePotionsMap.get(integer);
+        while (iterator.hasNext()) {
+            Integer integer = (Integer) iterator.next();
+            PotionEffect potioneffect = (PotionEffect) this.activePotionsMap.get(integer);
 
-            if (!potioneffect.onUpdate(this))
-            {
-                if (!this.worldObj.isRemote)
-                {
+            if (!potioneffect.onUpdate(this)) {
+                if (!this.worldObj.isRemote) {
                     iterator.remove();
                     this.onFinishedPotionEffect(potioneffect);
                 }
-            }
-            else if (potioneffect.getDuration() % 600 == 0)
-            {
+            } else if (potioneffect.getDuration() % 600 == 0) {
                 this.onChangedPotionEffect(potioneffect, false);
             }
         }
 
-        if (this.potionsNeedUpdate)
-        {
-            if (!this.worldObj.isRemote)
-            {
+        if (this.potionsNeedUpdate) {
+            if (!this.worldObj.isRemote) {
                 this.updatePotionMetadata();
             }
 
@@ -642,30 +572,24 @@ public abstract class EntityLivingBase extends Entity
         int i = this.dataWatcher.getWatchableObjectInt(7);
         boolean flag1 = this.dataWatcher.getWatchableObjectByte(8) > 0;
 
-        if (i > 0)
-        {
+        if (i > 0) {
             boolean flag = false;
 
-            if (!this.isInvisible())
-            {
+            if (!this.isInvisible()) {
                 flag = this.rand.nextBoolean();
-            }
-            else
-            {
+            } else {
                 flag = this.rand.nextInt(15) == 0;
             }
 
-            if (flag1)
-            {
+            if (flag1) {
                 flag &= this.rand.nextInt(5) == 0;
             }
 
-            if (flag && i > 0)
-            {
-                double d0 = (double)(i >> 16 & 255) / 255.0D;
-                double d1 = (double)(i >> 8 & 255) / 255.0D;
-                double d2 = (double)(i >> 0 & 255) / 255.0D;
-                this.worldObj.spawnParticle(flag1 ? EnumParticleTypes.SPELL_MOB_AMBIENT : EnumParticleTypes.SPELL_MOB, this.posX + (this.rand.nextDouble() - 0.5D) * (double)this.width, this.posY + this.rand.nextDouble() * (double)this.height, this.posZ + (this.rand.nextDouble() - 0.5D) * (double)this.width, d0, d1, d2, new int[0]);
+            if (flag && i > 0) {
+                double d0 = (double) (i >> 16 & 255) / 255.0D;
+                double d1 = (double) (i >> 8 & 255) / 255.0D;
+                double d2 = (double) (i >> 0 & 255) / 255.0D;
+                this.worldObj.spawnParticle(flag1 ? EnumParticleTypes.SPELL_MOB_AMBIENT : EnumParticleTypes.SPELL_MOB, this.posX + (this.rand.nextDouble() - 0.5D) * (double) this.width, this.posY + this.rand.nextDouble() * (double) this.height, this.posZ + (this.rand.nextDouble() - 0.5D) * (double) this.width, d0, d1, d2, new int[0]);
             }
         }
     }
@@ -674,17 +598,13 @@ public abstract class EntityLivingBase extends Entity
      * Clears potion metadata values if the entity has no potion effects. Otherwise, updates potion effect color,
      * ambience, and invisibility metadata values
      */
-    protected void updatePotionMetadata()
-    {
-        if (this.activePotionsMap.isEmpty())
-        {
+    protected void updatePotionMetadata() {
+        if (this.activePotionsMap.isEmpty()) {
             this.resetPotionEffectMetadata();
             this.setInvisible(false);
-        }
-        else
-        {
+        } else {
             int i = PotionHelper.calcPotionLiquidColor(this.activePotionsMap.values());
-            this.dataWatcher.updateObject(8, Byte.valueOf((byte)(PotionHelper.getAreAmbient(this.activePotionsMap.values()) ? 1 : 0)));
+            this.dataWatcher.updateObject(8, Byte.valueOf((byte) (PotionHelper.getAreAmbient(this.activePotionsMap.values()) ? 1 : 0)));
             this.dataWatcher.updateObject(7, Integer.valueOf(i));
             this.setInvisible(this.isPotionActive(Potion.invisibility.id));
         }
@@ -693,80 +613,64 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Resets the potion effect color and ambience metadata values
      */
-    protected void resetPotionEffectMetadata()
-    {
-        this.dataWatcher.updateObject(8, Byte.valueOf((byte)0));
+    protected void resetPotionEffectMetadata() {
+        this.dataWatcher.updateObject(8, Byte.valueOf((byte) 0));
         this.dataWatcher.updateObject(7, Integer.valueOf(0));
     }
 
-    public void clearActivePotions()
-    {
+    public void clearActivePotions() {
         Iterator<Integer> iterator = this.activePotionsMap.keySet().iterator();
 
-        while (iterator.hasNext())
-        {
-            Integer integer = (Integer)iterator.next();
-            PotionEffect potioneffect = (PotionEffect)this.activePotionsMap.get(integer);
+        while (iterator.hasNext()) {
+            Integer integer = (Integer) iterator.next();
+            PotionEffect potioneffect = (PotionEffect) this.activePotionsMap.get(integer);
 
-            if (!this.worldObj.isRemote)
-            {
+            if (!this.worldObj.isRemote) {
                 iterator.remove();
                 this.onFinishedPotionEffect(potioneffect);
             }
         }
     }
 
-    public Collection<PotionEffect> getActivePotionEffects()
-    {
+    public Collection<PotionEffect> getActivePotionEffects() {
         return this.activePotionsMap.values();
     }
 
-    public boolean isPotionActive(int potionId)
-    {
+    public boolean isPotionActive(int potionId) {
         return this.activePotionsMap.containsKey(Integer.valueOf(potionId));
     }
 
-    public boolean isPotionActive(Potion potionIn)
-    {
+    public boolean isPotionActive(Potion potionIn) {
         return this.activePotionsMap.containsKey(Integer.valueOf(potionIn.id));
     }
 
     /**
      * returns the PotionEffect for the supplied Potion if it is active, null otherwise.
      */
-    public PotionEffect getActivePotionEffect(Potion potionIn)
-    {
-        return (PotionEffect)this.activePotionsMap.get(Integer.valueOf(potionIn.id));
+    public PotionEffect getActivePotionEffect(Potion potionIn) {
+        return (PotionEffect) this.activePotionsMap.get(Integer.valueOf(potionIn.id));
     }
 
     /**
      * adds a PotionEffect to the entity
      */
-    public void addPotionEffect(PotionEffect potioneffectIn)
-    {
-        if (this.isPotionApplicable(potioneffectIn))
-        {
-            if (this.activePotionsMap.containsKey(Integer.valueOf(potioneffectIn.getPotionID())))
-            {
-                ((PotionEffect)this.activePotionsMap.get(Integer.valueOf(potioneffectIn.getPotionID()))).combine(potioneffectIn);
-                this.onChangedPotionEffect((PotionEffect)this.activePotionsMap.get(Integer.valueOf(potioneffectIn.getPotionID())), true);
-            }
-            else
-            {
+    public void addPotionEffect(PotionEffect potioneffectIn) {
+        if (this.isPotionApplicable(potioneffectIn)) {
+            if (this.activePotionsMap.containsKey(Integer.valueOf(potioneffectIn.getPotionID()))) {
+                ((PotionEffect) this.activePotionsMap.get(Integer.valueOf(potioneffectIn.getPotionID()))).combine(potioneffectIn);
+                this.onChangedPotionEffect((PotionEffect) this.activePotionsMap.get(Integer.valueOf(potioneffectIn.getPotionID())), true);
+            } else {
                 this.activePotionsMap.put(Integer.valueOf(potioneffectIn.getPotionID()), potioneffectIn);
                 this.onNewPotionEffect(potioneffectIn);
             }
         }
     }
 
-    public boolean isPotionApplicable(PotionEffect potioneffectIn)
-    {
-        if (this.getCreatureAttribute() == EnumCreatureAttribute.UNDEAD)
-        {
+    public boolean isPotionApplicable(PotionEffect potioneffectIn) {
+        if (this.getCreatureAttribute() == EnumCreatureAttribute.UNDEAD) {
             int i = potioneffectIn.getPotionID();
 
-            if (i == Potion.regeneration.id || i == Potion.poison.id)
-            {
+            if (i == Potion.regeneration.id || i == Potion.poison.id) {
                 return false;
             }
         }
@@ -777,59 +681,49 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Returns true if this entity is undead.
      */
-    public boolean isEntityUndead()
-    {
+    public boolean isEntityUndead() {
         return this.getCreatureAttribute() == EnumCreatureAttribute.UNDEAD;
     }
 
     /**
      * Remove the speified potion effect from this entity.
      */
-    public void removePotionEffectClient(int potionId)
-    {
+    public void removePotionEffectClient(int potionId) {
         this.activePotionsMap.remove(Integer.valueOf(potionId));
     }
 
     /**
      * Remove the specified potion effect from this entity.
      */
-    public void removePotionEffect(int potionId)
-    {
-        PotionEffect potioneffect = (PotionEffect)this.activePotionsMap.remove(Integer.valueOf(potionId));
+    public void removePotionEffect(int potionId) {
+        PotionEffect potioneffect = (PotionEffect) this.activePotionsMap.remove(Integer.valueOf(potionId));
 
-        if (potioneffect != null)
-        {
+        if (potioneffect != null) {
             this.onFinishedPotionEffect(potioneffect);
         }
     }
 
-    protected void onNewPotionEffect(PotionEffect id)
-    {
+    protected void onNewPotionEffect(PotionEffect id) {
         this.potionsNeedUpdate = true;
 
-        if (!this.worldObj.isRemote)
-        {
+        if (!this.worldObj.isRemote) {
             Potion.potionTypes[id.getPotionID()].applyAttributesModifiersToEntity(this, this.getAttributeMap(), id.getAmplifier());
         }
     }
 
-    protected void onChangedPotionEffect(PotionEffect id, boolean p_70695_2_)
-    {
+    protected void onChangedPotionEffect(PotionEffect id, boolean p_70695_2_) {
         this.potionsNeedUpdate = true;
 
-        if (p_70695_2_ && !this.worldObj.isRemote)
-        {
+        if (p_70695_2_ && !this.worldObj.isRemote) {
             Potion.potionTypes[id.getPotionID()].removeAttributesModifiersFromEntity(this, this.getAttributeMap(), id.getAmplifier());
             Potion.potionTypes[id.getPotionID()].applyAttributesModifiersToEntity(this, this.getAttributeMap(), id.getAmplifier());
         }
     }
 
-    protected void onFinishedPotionEffect(PotionEffect effect)
-    {
+    protected void onFinishedPotionEffect(PotionEffect effect) {
         this.potionsNeedUpdate = true;
 
-        if (!this.worldObj.isRemote)
-        {
+        if (!this.worldObj.isRemote) {
             Potion.potionTypes[effect.getPotionID()].removeAttributesModifiersFromEntity(this, this.getAttributeMap(), effect.getAmplifier());
         }
     }
@@ -837,75 +731,55 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Heal living entity (param: amount of half-hearts)
      */
-    public void heal(float healAmount)
-    {
+    public void heal(float healAmount) {
         float f = this.getHealth();
 
-        if (f > 0.0F)
-        {
+        if (f > 0.0F) {
             this.setHealth(f + healAmount);
         }
     }
 
-    public final float getHealth()
-    {
+    public final float getHealth() {
         return this.dataWatcher.getWatchableObjectFloat(6);
     }
 
-    public void setHealth(float health)
-    {
+    public void setHealth(float health) {
         this.dataWatcher.updateObject(6, Float.valueOf(MathHelper.clamp_float(health, 0.0F, this.getMaxHealth())));
     }
 
     /**
      * Called when the entity is attacked.
      */
-    public boolean attackEntityFrom(DamageSource source, float amount)
-    {
-        if (this.isEntityInvulnerable(source))
-        {
+    public boolean attackEntityFrom(DamageSource source, float amount) {
+        if (this.isEntityInvulnerable(source)) {
             return false;
-        }
-        else if (this.worldObj.isRemote)
-        {
+        } else if (this.worldObj.isRemote) {
             return false;
-        }
-        else
-        {
+        } else {
             this.entityAge = 0;
 
-            if (this.getHealth() <= 0.0F)
-            {
+            if (this.getHealth() <= 0.0F) {
                 return false;
-            }
-            else if (source.isFireDamage() && this.isPotionActive(Potion.fireResistance))
-            {
+            } else if (source.isFireDamage() && this.isPotionActive(Potion.fireResistance)) {
                 return false;
-            }
-            else
-            {
-                if ((source == DamageSource.anvil || source == DamageSource.fallingBlock) && this.getEquipmentInSlot(4) != null)
-                {
-                    this.getEquipmentInSlot(4).damageItem((int)(amount * 4.0F + this.rand.nextFloat() * amount * 2.0F), this);
+            } else {
+                if ((source == DamageSource.anvil || source == DamageSource.fallingBlock) && this.getEquipmentInSlot(4) != null) {
+                    this.getEquipmentInSlot(4).damageItem((int) (amount * 4.0F + this.rand.nextFloat() * amount * 2.0F), this);
                     amount *= 0.75F;
                 }
 
                 this.limbSwingAmount = 1.5F;
                 boolean flag = true;
 
-                if ((float)this.hurtResistantTime > (float)this.maxHurtResistantTime / 2.0F)
-                {
-                    if (amount <= this.lastDamage)
-                    {
+                if ((float) this.hurtResistantTime > (float) this.maxHurtResistantTime / 2.0F) {
+                    if (amount <= this.lastDamage) {
                         return false;
                     }
 
                     this.damageEntity(source, amount - this.lastDamage);
                     this.lastDamage = amount;
                     flag = false;
-                }
-                else
-                {
+                } else {
                     this.lastDamage = amount;
                     this.hurtResistantTime = this.maxHurtResistantTime;
                     this.damageEntity(source, amount);
@@ -915,75 +789,58 @@ public abstract class EntityLivingBase extends Entity
                 this.attackedAtYaw = 0.0F;
                 Entity entity = source.getEntity();
 
-                if (entity != null)
-                {
-                    if (entity instanceof EntityLivingBase)
-                    {
-                        this.setRevengeTarget((EntityLivingBase)entity);
+                if (entity != null) {
+                    if (entity instanceof EntityLivingBase) {
+                        this.setRevengeTarget((EntityLivingBase) entity);
                     }
 
-                    if (entity instanceof EntityPlayer)
-                    {
+                    if (entity instanceof EntityPlayer) {
                         this.recentlyHit = 100;
-                        this.attackingPlayer = (EntityPlayer)entity;
-                    }
-                    else if (entity instanceof EntityWolf)
-                    {
-                        EntityWolf entitywolf = (EntityWolf)entity;
+                        this.attackingPlayer = (EntityPlayer) entity;
+                    } else if (entity instanceof EntityWolf) {
+                        EntityWolf entitywolf = (EntityWolf) entity;
 
-                        if (entitywolf.isTamed())
-                        {
+                        if (entitywolf.isTamed()) {
                             this.recentlyHit = 100;
                             this.attackingPlayer = null;
                         }
                     }
                 }
 
-                if (flag)
-                {
-                    this.worldObj.setEntityState(this, (byte)2);
+                if (flag) {
+                    this.worldObj.setEntityState(this, (byte) 2);
 
-                    if (source != DamageSource.drown)
-                    {
+                    if (source != DamageSource.drown) {
                         this.setBeenAttacked();
                     }
 
-                    if (entity != null)
-                    {
+                    if (entity != null) {
                         double d1 = entity.posX - this.posX;
                         double d0;
 
-                        for (d0 = entity.posZ - this.posZ; d1 * d1 + d0 * d0 < 1.0E-4D; d0 = (Math.random() - Math.random()) * 0.01D)
-                        {
+                        for (d0 = entity.posZ - this.posZ; d1 * d1 + d0 * d0 < 1.0E-4D; d0 = (Math.random() - Math.random()) * 0.01D) {
                             d1 = (Math.random() - Math.random()) * 0.01D;
                         }
 
-                        this.attackedAtYaw = (float)(MathHelper.atan2(d0, d1) * 180.0D / Math.PI - (double)this.rotationYaw);
+                        this.attackedAtYaw = (float) (MathHelper.atan2(d0, d1) * 180.0D / Math.PI - (double) this.rotationYaw);
                         this.knockBack(entity, amount, d1, d0);
-                    }
-                    else
-                    {
-                        this.attackedAtYaw = (float)((int)(Math.random() * 2.0D) * 180);
+                    } else {
+                        this.attackedAtYaw = (float) ((int) (Math.random() * 2.0D) * 180);
                     }
                 }
 
-                if (this.getHealth() <= 0.0F)
-                {
+                if (this.getHealth() <= 0.0F) {
                     String s = this.getDeathSound();
 
-                    if (flag && s != null)
-                    {
+                    if (flag && s != null) {
                         this.playSound(s, this.getSoundVolume(), this.getSoundPitch());
                     }
 
                     this.onDeath(source);
-                }
-                else
-                {
+                } else {
                     String s1 = this.getHurtSound();
 
-                    if (flag && s1 != null)
-                    {
+                    if (flag && s1 != null) {
                         this.playSound(s1, this.getSoundVolume(), this.getSoundPitch());
                     }
                 }
@@ -996,99 +853,86 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Renders broken item particles using the given ItemStack
      */
-    public void renderBrokenItemStack(ItemStack stack)
-    {
+    public void renderBrokenItemStack(ItemStack stack) {
         this.playSound("random.break", 0.8F, 0.8F + this.worldObj.rand.nextFloat() * 0.4F);
 
-        for (int i = 0; i < 5; ++i)
-        {
-            Vec3 vec3 = new Vec3(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
-            vec3 = vec3.rotatePitch(-this.rotationPitch * (float)Math.PI / 180.0F);
-            vec3 = vec3.rotateYaw(-this.rotationYaw * (float)Math.PI / 180.0F);
-            double d0 = (double)(-this.rand.nextFloat()) * 0.6D - 0.3D;
-            Vec3 vec31 = new Vec3(((double)this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
-            vec31 = vec31.rotatePitch(-this.rotationPitch * (float)Math.PI / 180.0F);
-            vec31 = vec31.rotateYaw(-this.rotationYaw * (float)Math.PI / 180.0F);
-            vec31 = vec31.addVector(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ);
-            this.worldObj.spawnParticle(EnumParticleTypes.ITEM_CRACK, vec31.xCoord, vec31.yCoord, vec31.zCoord, vec3.xCoord, vec3.yCoord + 0.05D, vec3.zCoord, new int[] {Item.getIdFromItem(stack.getItem())});
+        for (int i = 0; i < 5; ++i) {
+            Vec3 vec3 = new Vec3(((double) this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+            vec3 = vec3.rotatePitch(-this.rotationPitch * (float) Math.PI / 180.0F);
+            vec3 = vec3.rotateYaw(-this.rotationYaw * (float) Math.PI / 180.0F);
+            double d0 = (double) (-this.rand.nextFloat()) * 0.6D - 0.3D;
+            Vec3 vec31 = new Vec3(((double) this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+            vec31 = vec31.rotatePitch(-this.rotationPitch * (float) Math.PI / 180.0F);
+            vec31 = vec31.rotateYaw(-this.rotationYaw * (float) Math.PI / 180.0F);
+            vec31 = vec31.addVector(this.posX, this.posY + (double) this.getEyeHeight(), this.posZ);
+            this.worldObj.spawnParticle(EnumParticleTypes.ITEM_CRACK, vec31.xCoord, vec31.yCoord, vec31.zCoord, vec3.xCoord, vec3.yCoord + 0.05D, vec3.zCoord, new int[]{Item.getIdFromItem(stack.getItem())});
         }
     }
 
     /**
      * Called when the mob's health reaches 0.
      */
-    public void onDeath(DamageSource cause)
-    {
+    public void onDeath(DamageSource cause) {
         Entity entity = cause.getEntity();
         EntityLivingBase entitylivingbase = this.getAttackingEntity();
 
-        if (this.scoreValue >= 0 && entitylivingbase != null)
-        {
+        if (this.scoreValue >= 0 && entitylivingbase != null) {
             entitylivingbase.addToPlayerScore(this, this.scoreValue);
         }
 
-        if (entity != null)
-        {
+        if (entity != null) {
             entity.onKillEntity(this);
         }
 
         this.dead = true;
         this.getCombatTracker().reset();
 
-        if (!this.worldObj.isRemote)
-        {
+        if (!this.worldObj.isRemote) {
             int i = 0;
 
-            if (entity instanceof EntityPlayer)
-            {
-                i = EnchantmentHelper.getLootingModifier((EntityLivingBase)entity);
+            if (entity instanceof EntityPlayer) {
+                i = EnchantmentHelper.getLootingModifier((EntityLivingBase) entity);
             }
 
-            if (this.canDropLoot() && this.worldObj.getGameRules().getBoolean("doMobLoot"))
-            {
+            if (this.canDropLoot() && this.worldObj.getGameRules().getBoolean("doMobLoot")) {
                 this.dropFewItems(this.recentlyHit > 0, i);
                 this.dropEquipment(this.recentlyHit > 0, i);
 
-                if (this.recentlyHit > 0 && this.rand.nextFloat() < 0.025F + (float)i * 0.01F)
-                {
+                if (this.recentlyHit > 0 && this.rand.nextFloat() < 0.025F + (float) i * 0.01F) {
                     this.addRandomDrop();
                 }
             }
         }
 
-        this.worldObj.setEntityState(this, (byte)3);
+        this.worldObj.setEntityState(this, (byte) 3);
     }
 
     /**
      * Drop the equipment for this entity.
-     *  
-     * @param wasRecentlyHit true if this this entity was recently hit by appropriate entity (generally only if player
-     * or tameable)
+     *
+     * @param wasRecentlyHit  true if this this entity was recently hit by appropriate entity (generally only if player
+     *                        or tameable)
      * @param lootingModifier level of enchanment to be applied to this drop
      */
-    protected void dropEquipment(boolean wasRecentlyHit, int lootingModifier)
-    {
+    protected void dropEquipment(boolean wasRecentlyHit, int lootingModifier) {
     }
 
     /**
      * knocks back this entity
      */
-    public void knockBack(Entity entityIn, float p_70653_2_, double p_70653_3_, double p_70653_5_)
-    {
-        if (this.rand.nextDouble() >= this.getEntityAttribute(SharedMonsterAttributes.knockbackResistance).getAttributeValue())
-        {
+    public void knockBack(Entity entityIn, float p_70653_2_, double p_70653_3_, double p_70653_5_) {
+        if (this.rand.nextDouble() >= this.getEntityAttribute(SharedMonsterAttributes.knockbackResistance).getAttributeValue()) {
             this.isAirBorne = true;
             float f = MathHelper.sqrt_double(p_70653_3_ * p_70653_3_ + p_70653_5_ * p_70653_5_);
             float f1 = 0.4F;
             this.motionX /= 2.0D;
             this.motionY /= 2.0D;
             this.motionZ /= 2.0D;
-            this.motionX -= p_70653_3_ / (double)f * (double)f1;
-            this.motionY += (double)f1;
-            this.motionZ -= p_70653_5_ / (double)f * (double)f1;
+            this.motionX -= p_70653_3_ / (double) f * (double) f1;
+            this.motionY += (double) f1;
+            this.motionZ -= p_70653_5_ / (double) f * (double) f1;
 
-            if (this.motionY > 0.4000000059604645D)
-            {
+            if (this.motionY > 0.4000000059604645D) {
                 this.motionY = 0.4000000059604645D;
             }
         }
@@ -1097,91 +941,80 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Returns the sound this mob makes when it is hurt.
      */
-    protected String getHurtSound()
-    {
+    protected String getHurtSound() {
         return "game.neutral.hurt";
     }
 
     /**
      * Returns the sound this mob makes on death.
      */
-    protected String getDeathSound()
-    {
+    protected String getDeathSound() {
         return "game.neutral.die";
     }
 
     /**
      * Causes this Entity to drop a random item.
      */
-    protected void addRandomDrop()
-    {
+    protected void addRandomDrop() {
     }
 
     /**
      * Drop 0-2 items of this living's type
-     *  
-     * @param wasRecentlyHit true if this this entity was recently hit by appropriate entity (generally only if player
-     * or tameable)
+     *
+     * @param wasRecentlyHit  true if this this entity was recently hit by appropriate entity (generally only if player
+     *                        or tameable)
      * @param lootingModifier level of enchanment to be applied to this drop
      */
-    protected void dropFewItems(boolean wasRecentlyHit, int lootingModifier)
-    {
+    protected void dropFewItems(boolean wasRecentlyHit, int lootingModifier) {
     }
 
     /**
      * returns true if this entity is by a ladder, false otherwise
      */
-    public boolean isOnLadder()
-    {
+    public boolean isOnLadder() {
         int i = MathHelper.floor_double(this.posX);
         int j = MathHelper.floor_double(this.getEntityBoundingBox().minY);
         int k = MathHelper.floor_double(this.posZ);
         Block block = this.worldObj.getBlockState(new BlockPos(i, j, k)).getBlock();
-        return (block == Blocks.ladder || block == Blocks.vine) && (!(this instanceof EntityPlayer) || !((EntityPlayer)this).isSpectator());
+        return (block == Blocks.ladder || block == Blocks.vine) && (!(this instanceof EntityPlayer) || !((EntityPlayer) this).isSpectator());
     }
 
     /**
      * Checks whether target entity is alive.
      */
-    public boolean isEntityAlive()
-    {
+    public boolean isEntityAlive() {
         return !this.isDead && this.getHealth() > 0.0F;
     }
 
-    public void fall(float distance, float damageMultiplier)
-    {
+    public void fall(float distance, float damageMultiplier) {
         super.fall(distance, damageMultiplier);
         PotionEffect potioneffect = this.getActivePotionEffect(Potion.jump);
-        float f = potioneffect != null ? (float)(potioneffect.getAmplifier() + 1) : 0.0F;
+        float f = potioneffect != null ? (float) (potioneffect.getAmplifier() + 1) : 0.0F;
         int i = MathHelper.ceiling_float_int((distance - 3.0F - f) * damageMultiplier);
 
-        if (i > 0)
-        {
+        if (i > 0) {
             this.playSound(this.getFallSoundString(i), 1.0F, 1.0F);
-            this.attackEntityFrom(DamageSource.fall, (float)i);
+            this.attackEntityFrom(DamageSource.fall, (float) i);
             int j = MathHelper.floor_double(this.posX);
             int k = MathHelper.floor_double(this.posY - 0.20000000298023224D);
             int l = MathHelper.floor_double(this.posZ);
             Block block = this.worldObj.getBlockState(new BlockPos(j, k, l)).getBlock();
 
-            if (block.getMaterial() != Material.air)
-            {
+            if (block.getMaterial() != Material.air) {
                 Block.SoundType block$soundtype = block.stepSound;
                 this.playSound(block$soundtype.getStepSound(), block$soundtype.getVolume() * 0.5F, block$soundtype.getFrequency() * 0.75F);
             }
         }
     }
 
-    protected String getFallSoundString(int damageValue)
-    {
+    protected String getFallSoundString(int damageValue) {
         return damageValue > 4 ? "game.neutral.hurt.fall.big" : "game.neutral.hurt.fall.small";
     }
 
     /**
      * Setups the entity to do the hurt animation. Only used by packets in multiplayer.
      */
-    public void performHurtAnimation()
-    {
+    public void performHurtAnimation() {
         this.hurtTime = this.maxHurtTime = 10;
         this.attackedAtYaw = 0.0F;
     }
@@ -1189,15 +1022,12 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Returns the current armor value as determined by a call to InventoryPlayer.getTotalArmorValue
      */
-    public int getTotalArmorValue()
-    {
+    public int getTotalArmorValue() {
         int i = 0;
 
-        for (ItemStack itemstack : this.getInventory())
-        {
-            if (itemstack != null && itemstack.getItem() instanceof ItemArmor)
-            {
-                int j = ((ItemArmor)itemstack.getItem()).damageReduceAmount;
+        for (ItemStack itemstack : this.getInventory()) {
+            if (itemstack != null && itemstack.getItem() instanceof ItemArmor) {
+                int j = ((ItemArmor) itemstack.getItem()).damageReduceAmount;
                 i += j;
             }
         }
@@ -1205,19 +1035,16 @@ public abstract class EntityLivingBase extends Entity
         return i;
     }
 
-    protected void damageArmor(float p_70675_1_)
-    {
+    protected void damageArmor(float p_70675_1_) {
     }
 
     /**
      * Reduces damage, depending on armor
      */
-    protected float applyArmorCalculations(DamageSource source, float damage)
-    {
-        if (!source.isUnblockable())
-        {
+    protected float applyArmorCalculations(DamageSource source, float damage) {
+        if (!source.isUnblockable()) {
             int i = 25 - this.getTotalArmorValue();
-            float f = damage * (float)i;
+            float f = damage * (float) i;
             this.damageArmor(damage);
             damage = f / 25.0F;
         }
@@ -1228,39 +1055,29 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Reduces damage, depending on potions
      */
-    protected float applyPotionDamageCalculations(DamageSource source, float damage)
-    {
-        if (source.isDamageAbsolute())
-        {
+    protected float applyPotionDamageCalculations(DamageSource source, float damage) {
+        if (source.isDamageAbsolute()) {
             return damage;
-        }
-        else
-        {
-            if (this.isPotionActive(Potion.resistance) && source != DamageSource.outOfWorld)
-            {
+        } else {
+            if (this.isPotionActive(Potion.resistance) && source != DamageSource.outOfWorld) {
                 int i = (this.getActivePotionEffect(Potion.resistance).getAmplifier() + 1) * 5;
                 int j = 25 - i;
-                float f = damage * (float)j;
+                float f = damage * (float) j;
                 damage = f / 25.0F;
             }
 
-            if (damage <= 0.0F)
-            {
+            if (damage <= 0.0F) {
                 return 0.0F;
-            }
-            else
-            {
+            } else {
                 int k = EnchantmentHelper.getEnchantmentModifierDamage(this.getInventory(), source);
 
-                if (k > 20)
-                {
+                if (k > 20) {
                     k = 20;
                 }
 
-                if (k > 0 && k <= 20)
-                {
+                if (k > 0 && k <= 20) {
                     int l = 25 - k;
-                    float f1 = damage * (float)l;
+                    float f1 = damage * (float) l;
                     damage = f1 / 25.0F;
                 }
 
@@ -1273,18 +1090,15 @@ public abstract class EntityLivingBase extends Entity
      * Deals damage to the entity. If its a EntityPlayer then will take damage from the armor first and then health
      * second with the reduced value. Args: damageAmount
      */
-    protected void damageEntity(DamageSource damageSrc, float damageAmount)
-    {
-        if (!this.isEntityInvulnerable(damageSrc))
-        {
+    protected void damageEntity(DamageSource damageSrc, float damageAmount) {
+        if (!this.isEntityInvulnerable(damageSrc)) {
             damageAmount = this.applyArmorCalculations(damageSrc, damageAmount);
             damageAmount = this.applyPotionDamageCalculations(damageSrc, damageAmount);
             float f = damageAmount;
             damageAmount = Math.max(damageAmount - this.getAbsorptionAmount(), 0.0F);
             this.setAbsorptionAmount(this.getAbsorptionAmount() - (f - damageAmount));
 
-            if (damageAmount != 0.0F)
-            {
+            if (damageAmount != 0.0F) {
                 float f1 = this.getHealth();
                 this.setHealth(f1 - damageAmount);
                 this.getCombatTracker().trackDamage(damageSrc, f1, damageAmount);
@@ -1296,94 +1110,77 @@ public abstract class EntityLivingBase extends Entity
     /**
      * 1.8.9
      */
-    public CombatTracker getCombatTracker()
-    {
+    public CombatTracker getCombatTracker() {
         return this._combatTracker;
     }
 
-    public EntityLivingBase getAttackingEntity()
-    {
-        return (EntityLivingBase)(this._combatTracker.func_94550_c() != null ? this._combatTracker.func_94550_c() : (this.attackingPlayer != null ? this.attackingPlayer : (this.entityLivingToAttack != null ? this.entityLivingToAttack : null)));
+    public EntityLivingBase getAttackingEntity() {
+        return (EntityLivingBase) (this._combatTracker.func_94550_c() != null ? this._combatTracker.func_94550_c() : (this.attackingPlayer != null ? this.attackingPlayer : (this.entityLivingToAttack != null ? this.entityLivingToAttack : null)));
     }
 
-    public final float getMaxHealth()
-    {
-        return (float)this.getEntityAttribute(SharedMonsterAttributes.maxHealth).getAttributeValue();
+    public final float getMaxHealth() {
+        return (float) this.getEntityAttribute(SharedMonsterAttributes.maxHealth).getAttributeValue();
     }
 
     /**
      * counts the amount of arrows stuck in the entity. getting hit by arrows increases this, used in rendering
      */
-    public final int getArrowCountInEntity()
-    {
+    public final int getArrowCountInEntity() {
         return this.dataWatcher.getWatchableObjectByte(9);
     }
 
     /**
      * sets the amount of arrows stuck in the entity. used for rendering those
      */
-    public final void setArrowCountInEntity(int count)
-    {
-        this.dataWatcher.updateObject(9, Byte.valueOf((byte)count));
+    public final void setArrowCountInEntity(int count) {
+        this.dataWatcher.updateObject(9, Byte.valueOf((byte) count));
     }
 
     /**
      * Returns an integer indicating the end point of the swing animation, used by {@link #swingProgress} to provide a
      * progress indicator. Takes dig speed enchantments into account.
      */
-    private int getArmSwingAnimationEnd()
-    {
+    public int getArmSwingAnimationEnd() {
         return this.isPotionActive(Potion.digSpeed) ? 6 - (1 + this.getActivePotionEffect(Potion.digSpeed).getAmplifier()) * 1 : (this.isPotionActive(Potion.digSlowdown) ? 6 + (1 + this.getActivePotionEffect(Potion.digSlowdown).getAmplifier()) * 2 : 6);
     }
 
     /**
      * Swings the item the player is holding.
      */
-    public void swingItem()
-    {
-        if (!this.isSwingInProgress || this.swingProgressInt >= this.getArmSwingAnimationEnd() / 2 || this.swingProgressInt < 0)
-        {
+    public void swingItem() {
+        if (!this.isSwingInProgress || this.swingProgressInt >= this.getArmSwingAnimationEnd() / 2 || this.swingProgressInt < 0) {
             this.swingProgressInt = -1;
             this.isSwingInProgress = true;
 
-            if (this.worldObj instanceof WorldServer)
-            {
-                ((WorldServer)this.worldObj).getEntityTracker().sendToAllTrackingEntity(this, new S0BPacketAnimation(this, 0));
+            if (this.worldObj instanceof WorldServer) {
+                ((WorldServer) this.worldObj).getEntityTracker().sendToAllTrackingEntity(this, new S0BPacketAnimation(this, 0));
             }
         }
     }
 
-    public void handleStatusUpdate(byte id)
-    {
-        if (id == 2)
-        {
+    public void handleStatusUpdate(byte id) {
+        if (id == 2) {
             this.limbSwingAmount = 1.5F;
             this.hurtResistantTime = this.maxHurtResistantTime;
             this.hurtTime = this.maxHurtTime = 10;
             this.attackedAtYaw = 0.0F;
             String s = this.getHurtSound();
 
-            if (s != null)
-            {
+            if (s != null) {
                 this.playSound(this.getHurtSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
             }
 
             this.attackEntityFrom(DamageSource.generic, 0.0F);
-        }
-        else if (id == 3)
-        {
+        } else if (id == 3) {
             String s1 = this.getDeathSound();
 
-            if (s1 != null)
-            {
+            if (s1 != null) {
                 this.playSound(this.getDeathSound(), this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
             }
 
             this.setHealth(0.0F);
             this.onDeath(DamageSource.generic);
-        }
-        else
-        {
+        } else {
             super.handleStatusUpdate(id);
         }
     }
@@ -1391,45 +1188,36 @@ public abstract class EntityLivingBase extends Entity
     /**
      * sets the dead flag. Used when you fall off the bottom of the world.
      */
-    protected void kill()
-    {
+    protected void kill() {
         this.attackEntityFrom(DamageSource.outOfWorld, 4.0F);
     }
 
     /**
      * Updates the arm swing progress counters and animation progress
      */
-    protected void updateArmSwingProgress()
-    {
+    protected void updateArmSwingProgress() {
         int i = this.getArmSwingAnimationEnd();
 
-        if (this.isSwingInProgress)
-        {
+        if (this.isSwingInProgress) {
             ++this.swingProgressInt;
 
-            if (this.swingProgressInt >= i)
-            {
+            if (this.swingProgressInt >= i) {
                 this.swingProgressInt = 0;
                 this.isSwingInProgress = false;
             }
-        }
-        else
-        {
+        } else {
             this.swingProgressInt = 0;
         }
 
-        this.swingProgress = (float)this.swingProgressInt / (float)i;
+        this.swingProgress = (float) this.swingProgressInt / (float) i;
     }
 
-    public IAttributeInstance getEntityAttribute(IAttribute attribute)
-    {
+    public IAttributeInstance getEntityAttribute(IAttribute attribute) {
         return this.getAttributeMap().getAttributeInstance(attribute);
     }
 
-    public BaseAttributeMap getAttributeMap()
-    {
-        if (this.attributeMap == null)
-        {
+    public BaseAttributeMap getAttributeMap() {
+        if (this.attributeMap == null) {
             this.attributeMap = new ServersideAttributeMap();
         }
 
@@ -1439,8 +1227,7 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Get this Entity's EnumCreatureAttribute
      */
-    public EnumCreatureAttribute getCreatureAttribute()
-    {
+    public EnumCreatureAttribute getCreatureAttribute() {
         return EnumCreatureAttribute.UNDEFINED;
     }
 
@@ -1464,18 +1251,15 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Set sprinting switch for Entity.
      */
-    public void setSprinting(boolean sprinting)
-    {
+    public void setSprinting(boolean sprinting) {
         super.setSprinting(sprinting);
         IAttributeInstance iattributeinstance = this.getEntityAttribute(SharedMonsterAttributes.movementSpeed);
 
-        if (iattributeinstance.getModifier(sprintingSpeedBoostModifierUUID) != null)
-        {
+        if (iattributeinstance.getModifier(sprintingSpeedBoostModifierUUID) != null) {
             iattributeinstance.removeModifier(sprintingSpeedBoostModifier);
         }
 
-        if (sprinting)
-        {
+        if (sprinting) {
             iattributeinstance.applyModifier(sprintingSpeedBoostModifier);
         }
     }
@@ -1488,60 +1272,50 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Returns the volume for the sounds this mob makes.
      */
-    protected float getSoundVolume()
-    {
+    protected float getSoundVolume() {
         return 1.0F;
     }
 
     /**
      * Gets the pitch of living sounds in living entities.
      */
-    protected float getSoundPitch()
-    {
+    protected float getSoundPitch() {
         return this.isChild() ? (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.5F : (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F;
     }
 
     /**
      * Dead and sleeping entities cannot move
      */
-    protected boolean isMovementBlocked()
-    {
+    protected boolean isMovementBlocked() {
         return this.getHealth() <= 0.0F;
     }
 
     /**
      * Moves the entity to a position out of the way of its mount.
      */
-    public void dismountEntity(Entity entityIn)
-    {
+    public void dismountEntity(Entity entityIn) {
         double d0 = entityIn.posX;
-        double d1 = entityIn.getEntityBoundingBox().minY + (double)entityIn.height;
+        double d1 = entityIn.getEntityBoundingBox().minY + (double) entityIn.height;
         double d2 = entityIn.posZ;
         int i = 1;
 
-        for (int j = -i; j <= i; ++j)
-        {
-            for (int k = -i; k < i; ++k)
-            {
-                if (j != 0 || k != 0)
-                {
-                    int l = (int)(this.posX + (double)j);
-                    int i1 = (int)(this.posZ + (double)k);
-                    AxisAlignedBB axisalignedbb = this.getEntityBoundingBox().offset((double)j, 1.0D, (double)k);
-
-                    if (this.worldObj.getCollisionBoxes(axisalignedbb).isEmpty())
-                    {
-                        if (World.doesBlockHaveSolidTopSurface(this.worldObj, new BlockPos(l, (int)this.posY, i1)))
-                        {
-                            this.setPositionAndUpdate(this.posX + (double)j, this.posY + 1.0D, this.posZ + (double)k);
+        for (int j = -i; j <= i; ++j) {
+            for (int k = -i; k < i; ++k) {
+                if (j != 0 || k != 0) {
+                    int l = (int) (this.posX + (double) j);
+                    int i1 = (int) (this.posZ + (double) k);
+                    AxisAlignedBB axisalignedbb = this.getEntityBoundingBox().offset((double) j, 1.0D, (double) k);
+
+                    if (this.worldObj.getCollisionBoxes(axisalignedbb).isEmpty()) {
+                        if (World.doesBlockHaveSolidTopSurface(this.worldObj, new BlockPos(l, (int) this.posY, i1))) {
+                            this.setPositionAndUpdate(this.posX + (double) j, this.posY + 1.0D, this.posZ + (double) k);
                             return;
                         }
 
-                        if (World.doesBlockHaveSolidTopSurface(this.worldObj, new BlockPos(l, (int)this.posY - 1, i1)) || this.worldObj.getBlockState(new BlockPos(l, (int)this.posY - 1, i1)).getBlock().getMaterial() == Material.water)
-                        {
-                            d0 = this.posX + (double)j;
+                        if (World.doesBlockHaveSolidTopSurface(this.worldObj, new BlockPos(l, (int) this.posY - 1, i1)) || this.worldObj.getBlockState(new BlockPos(l, (int) this.posY - 1, i1)).getBlock().getMaterial() == Material.water) {
+                            d0 = this.posX + (double) j;
                             d1 = this.posY + 1.0D;
-                            d2 = this.posZ + (double)k;
+                            d2 = this.posZ + (double) k;
                         }
                     }
                 }
@@ -1551,33 +1325,28 @@ public abstract class EntityLivingBase extends Entity
         this.setPositionAndUpdate(d0, d1, d2);
     }
 
-    public boolean getAlwaysRenderNameTagForRender()
-    {
+    public boolean getAlwaysRenderNameTagForRender() {
         return false;
     }
 
-    protected float getJumpUpwardsMotion()
-    {
+    protected float getJumpUpwardsMotion() {
         return 0.42F;
     }
 
     /**
      * Causes this entity to do an upwards motion (jumping).
      */
-    protected void jump()
-    {
-        this.motionY = (double)this.getJumpUpwardsMotion();
+    protected void jump() {
+        this.motionY = (double) this.getJumpUpwardsMotion();
 
-        if (this.isPotionActive(Potion.jump))
-        {
-            this.motionY += (double)((float)(this.getActivePotionEffect(Potion.jump).getAmplifier() + 1) * 0.1F);
+        if (this.isPotionActive(Potion.jump)) {
+            this.motionY += (double) ((float) (this.getActivePotionEffect(Potion.jump).getAmplifier() + 1) * 0.1F);
         }
 
-        if (this.isSprinting())
-        {
+        if (this.isSprinting()) {
             float f = this.rotationYaw * 0.017453292F;
-            this.motionX -= (double)(MathHelper.sin(f) * 0.2F);
-            this.motionZ += (double)(MathHelper.cos(f) * 0.2F);
+            this.motionX -= (double) (MathHelper.sin(f) * 0.2F);
+            this.motionZ += (double) (MathHelper.cos(f) * 0.2F);
         }
 
         this.isAirBorne = true;
@@ -1586,103 +1355,81 @@ public abstract class EntityLivingBase extends Entity
     /**
      * main AI tick function, replaces updateEntityActionState
      */
-    protected void updateAITick()
-    {
+    protected void updateAITick() {
         this.motionY += 0.03999999910593033D;
     }
 
-    protected void handleJumpLava()
-    {
+    protected void handleJumpLava() {
         this.motionY += 0.03999999910593033D;
     }
 
     /**
      * Moves the entity based on the specified heading.  Args: strafe, forward
      */
-    public void moveEntityWithHeading(float strafe, float forward)
-    {
-        if (this.isServerWorld())
-        {
-            if (!this.isInWater() || this instanceof EntityPlayer && ((EntityPlayer)this).capabilities.isFlying)
-            {
-                if (!this.isInLava() || this instanceof EntityPlayer && ((EntityPlayer)this).capabilities.isFlying)
-                {
+    public void moveEntityWithHeading(float strafe, float forward) {
+
+        if (this.isServerWorld()) {
+            if (!this.isInWater() || this instanceof EntityPlayer && ((EntityPlayer) this).capabilities.isFlying) {
+                if (!this.isInLava() || this instanceof EntityPlayer && ((EntityPlayer) this).capabilities.isFlying) {
                     float f4 = 0.91F;
 
-                    if (this.onGround)
-                    {
+                    if (this.onGround) {
                         f4 = this.worldObj.getBlockState(new BlockPos(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.getEntityBoundingBox().minY) - 1, MathHelper.floor_double(this.posZ))).getBlock().slipperiness * 0.91F;
                     }
 
                     float f = 0.16277136F / (f4 * f4 * f4);
                     float f5;
 
-                    if (this.onGround)
-                    {
+                    if (this.onGround) {
                         f5 = this.getAIMoveSpeed() * f;
-                    }
-                    else
-                    {
+                    } else {
                         f5 = this.jumpMovementFactor;
                     }
 
                     this.moveFlying(strafe, forward, f5);
                     f4 = 0.91F;
 
-                    if (this.onGround)
-                    {
+                    if (this.onGround) {
                         f4 = this.worldObj.getBlockState(new BlockPos(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.getEntityBoundingBox().minY) - 1, MathHelper.floor_double(this.posZ))).getBlock().slipperiness * 0.91F;
                     }
 
-                    if (this.isOnLadder())
-                    {
+                    if (this.isOnLadder()) {
                         float f6 = 0.15F;
-                        this.motionX = MathHelper.clamp_double(this.motionX, (double)(-f6), (double)f6);
-                        this.motionZ = MathHelper.clamp_double(this.motionZ, (double)(-f6), (double)f6);
+                        this.motionX = MathHelper.clamp_double(this.motionX, (double) (-f6), (double) f6);
+                        this.motionZ = MathHelper.clamp_double(this.motionZ, (double) (-f6), (double) f6);
                         this.fallDistance = 0.0F;
 
-                        if (this.motionY < -0.15D)
-                        {
+                        if (this.motionY < -0.15D) {
                             this.motionY = -0.15D;
                         }
 
                         boolean flag = this.isSneaking() && this instanceof EntityPlayer;
 
-                        if (flag && this.motionY < 0.0D)
-                        {
+                        if (flag && this.motionY < 0.0D) {
                             this.motionY = 0.0D;
                         }
                     }
 
                     this.moveEntity(this.motionX, this.motionY, this.motionZ);
 
-                    if (this.isCollidedHorizontally && this.isOnLadder())
-                    {
+                    if (this.isCollidedHorizontally && this.isOnLadder()) {
                         this.motionY = 0.2D;
                     }
 
-                    if (this.worldObj.isRemote && (!this.worldObj.isBlockLoaded(new BlockPos((int)this.posX, 0, (int)this.posZ)) || !this.worldObj.getChunkFromBlockCoords(new BlockPos((int)this.posX, 0, (int)this.posZ)).isLoaded()))
-                    {
-                        if (this.posY > 0.0D)
-                        {
+                    if (this.worldObj.isRemote && (!this.worldObj.isBlockLoaded(new BlockPos((int) this.posX, 0, (int) this.posZ)) || !this.worldObj.getChunkFromBlockCoords(new BlockPos((int) this.posX, 0, (int) this.posZ)).isLoaded())) {
+                        if (this.posY > 0.0D) {
                             this.motionY = -0.1D;
-                        }
-                        else
-                        {
+                        } else {
                             this.motionY = 0.0D;
                         }
-                    }
-                    else
-                    {
+                    } else {
                         this.motionY -= 0.08D;
                     }
 
                     this.motionY *= 0.9800000190734863D;
-                    this.motionX *= (double)f4;
-                    this.motionZ *= (double)f4;
-                }
-                else
-                {
+                    this.motionX *= (double) f4;
+                    this.motionZ *= (double) f4;
+                } else {
                     double d1 = this.posY;
                     this.moveFlying(strafe, forward, 0.02F);
                     this.moveEntity(this.motionX, this.motionY, this.motionZ);
@@ -1691,44 +1438,37 @@ public abstract class EntityLivingBase extends Entity
                     this.motionZ *= 0.5D;
                     this.motionY -= 0.02D;
 
-                    if (this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + 0.6000000238418579D - this.posY + d1, this.motionZ))
-                    {
+                    if (this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + 0.6000000238418579D - this.posY + d1, this.motionZ)) {
                         this.motionY = 0.30000001192092896D;
                     }
                 }
-            }
-            else
-            {
+            } else {
                 double d0 = this.posY;
                 float f1 = 0.8F;
                 float f2 = 0.02F;
-                float f3 = (float)EnchantmentHelper.getDepthStriderModifier(this);
+                float f3 = (float) EnchantmentHelper.getDepthStriderModifier(this);
 
-                if (f3 > 3.0F)
-                {
+                if (f3 > 3.0F) {
                     f3 = 3.0F;
                 }
 
-                if (!this.onGround)
-                {
+                if (!this.onGround) {
                     f3 *= 0.5F;
                 }
 
-                if (f3 > 0.0F)
-                {
+                if (f3 > 0.0F) {
                     f1 += (0.54600006F - f1) * f3 / 3.0F;
                     f2 += (this.getAIMoveSpeed() * 1.0F - f2) * f3 / 3.0F;
                 }
 
                 this.moveFlying(strafe, forward, f2);
                 this.moveEntity(this.motionX, this.motionY, this.motionZ);
-                this.motionX *= (double)f1;
+                this.motionX *= (double) f1;
                 this.motionY *= 0.800000011920929D;
-                this.motionZ *= (double)f1;
+                this.motionZ *= (double) f1;
                 this.motionY -= 0.02D;
 
-                if (this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + 0.6000000238418579D - this.posY + d0, this.motionZ))
-                {
+                if (this.isCollidedHorizontally && this.isOffsetPositionInLiquid(this.motionX, this.motionY + 0.6000000238418579D - this.posY + d0, this.motionZ)) {
                     this.motionY = 0.30000001192092896D;
                 }
             }
@@ -1739,8 +1479,7 @@ public abstract class EntityLivingBase extends Entity
         double d3 = this.posZ - this.prevPosZ;
         float f7 = MathHelper.sqrt_double(d2 * d2 + d3 * d3) * 4.0F;
 
-        if (f7 > 1.0F)
-        {
+        if (f7 > 1.0F) {
             f7 = 1.0F;
         }
 
@@ -1751,21 +1490,18 @@ public abstract class EntityLivingBase extends Entity
     /**
      * the movespeed used for the new AI system
      */
-    public float getAIMoveSpeed()
-    {
+    public float getAIMoveSpeed() {
         return this.landMovementFactor;
     }
 
     /**
      * set the movespeed used for the new AI system
      */
-    public void setAIMoveSpeed(float speedIn)
-    {
+    public void setAIMoveSpeed(float speedIn) {
         this.landMovementFactor = speedIn;
     }
 
-    public boolean attackEntityAsMob(Entity entityIn)
-    {
+    public boolean attackEntityAsMob(Entity entityIn) {
         this.setLastAttacker(entityIn);
         return false;
     }
@@ -1773,53 +1509,43 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Returns whether player is sleeping or not
      */
-    public boolean isPlayerSleeping()
-    {
+    public boolean isPlayerSleeping() {
         return false;
     }
 
     /**
      * Called to update the entity's position/logic.
      */
-    public void onUpdate()
-    {
+    public void onUpdate() {
         super.onUpdate();
 
-        if (!this.worldObj.isRemote)
-        {
+        if (!this.worldObj.isRemote) {
             int i = this.getArrowCountInEntity();
 
-            if (i > 0)
-            {
-                if (this.arrowHitTimer <= 0)
-                {
+            if (i > 0) {
+                if (this.arrowHitTimer <= 0) {
                     this.arrowHitTimer = 20 * (30 - i);
                 }
 
                 --this.arrowHitTimer;
 
-                if (this.arrowHitTimer <= 0)
-                {
+                if (this.arrowHitTimer <= 0) {
                     this.setArrowCountInEntity(i - 1);
                 }
             }
 
-            for (int j = 0; j < 5; ++j)
-            {
+            for (int j = 0; j < 5; ++j) {
                 ItemStack itemstack = this.previousEquipment[j];
                 ItemStack itemstack1 = this.getEquipmentInSlot(j);
 
-                if (!ItemStack.areItemStacksEqual(itemstack1, itemstack))
-                {
-                    ((WorldServer)this.worldObj).getEntityTracker().sendToAllTrackingEntity(this, new S04PacketEntityEquipment(this.getEntityId(), j, itemstack1));
+                if (!ItemStack.areItemStacksEqual(itemstack1, itemstack)) {
+                    ((WorldServer) this.worldObj).getEntityTracker().sendToAllTrackingEntity(this, new S04PacketEntityEquipment(this.getEntityId(), j, itemstack1));
 
-                    if (itemstack != null)
-                    {
+                    if (itemstack != null) {
                         this.attributeMap.removeAttributeModifiers(itemstack.getAttributeModifiers());
                     }
 
-                    if (itemstack1 != null)
-                    {
+                    if (itemstack1 != null) {
                         this.attributeMap.applyAttributeModifiers(itemstack1.getAttributeModifiers());
                     }
 
@@ -1827,8 +1553,7 @@ public abstract class EntityLivingBase extends Entity
                 }
             }
 
-            if (this.ticksExisted % 20 == 0)
-            {
+            if (this.ticksExisted % 20 == 0) {
                 this.getCombatTracker().reset();
             }
         }
@@ -1836,26 +1561,23 @@ public abstract class EntityLivingBase extends Entity
         this.onLivingUpdate();
         double d0 = this.posX - this.prevPosX;
         double d1 = this.posZ - this.prevPosZ;
-        float f = (float)(d0 * d0 + d1 * d1);
+        float f = (float) (d0 * d0 + d1 * d1);
         float f1 = this.renderYawOffset;
         float f2 = 0.0F;
         this.prevOnGroundSpeedFactor = this.onGroundSpeedFactor;
         float f3 = 0.0F;
 
-        if (f > 0.0025000002F)
-        {
+        if (f > 0.0025000002F) {
             f3 = 1.0F;
-            f2 = (float)Math.sqrt((double)f) * 3.0F;
-            f1 = (float)MathHelper.atan2(d1, d0) * 180.0F / (float)Math.PI - 90.0F;
+            f2 = (float) Math.sqrt((double) f) * 3.0F;
+            f1 = (float) MathHelper.atan2(d1, d0) * 180.0F / (float) Math.PI - 90.0F;
         }
 
-        if (this.swingProgress > 0.0F)
-        {
+        if (this.swingProgress > 0.0F) {
             f1 = this.rotationYaw;
         }
 
-        if (!this.onGround)
-        {
+        if (!this.onGround) {
             f3 = 0.0F;
         }
 
@@ -1865,43 +1587,35 @@ public abstract class EntityLivingBase extends Entity
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("rangeChecks");
 
-        while (this.rotationYaw - this.prevRotationYaw < -180.0F)
-        {
+        while (this.rotationYaw - this.prevRotationYaw < -180.0F) {
             this.prevRotationYaw -= 360.0F;
         }
 
-        while (this.rotationYaw - this.prevRotationYaw >= 180.0F)
-        {
+        while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {
             this.prevRotationYaw += 360.0F;
         }
 
-        while (this.renderYawOffset - this.prevRenderYawOffset < -180.0F)
-        {
+        while (this.renderYawOffset - this.prevRenderYawOffset < -180.0F) {
             this.prevRenderYawOffset -= 360.0F;
         }
 
-        while (this.renderYawOffset - this.prevRenderYawOffset >= 180.0F)
-        {
+        while (this.renderYawOffset - this.prevRenderYawOffset >= 180.0F) {
             this.prevRenderYawOffset += 360.0F;
         }
 
-        while (this.rotationPitch - this.prevRotationPitch < -180.0F)
-        {
+        while (this.rotationPitch - this.prevRotationPitch < -180.0F) {
             this.prevRotationPitch -= 360.0F;
         }
 
-        while (this.rotationPitch - this.prevRotationPitch >= 180.0F)
-        {
+        while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {
             this.prevRotationPitch += 360.0F;
         }
 
-        while (this.rotationYawHead - this.prevRotationYawHead < -180.0F)
-        {
+        while (this.rotationYawHead - this.prevRotationYawHead < -180.0F) {
             this.prevRotationYawHead -= 360.0F;
         }
 
-        while (this.rotationYawHead - this.prevRotationYawHead >= 180.0F)
-        {
+        while (this.rotationYawHead - this.prevRotationYawHead >= 180.0F) {
             this.prevRotationYawHead += 360.0F;
         }
 
@@ -1909,32 +1623,27 @@ public abstract class EntityLivingBase extends Entity
         this.movedDistance += f2;
     }
 
-    protected float updateDistance(float p_110146_1_, float p_110146_2_)
-    {
+    protected float updateDistance(float p_110146_1_, float p_110146_2_) {
         float f = MathHelper.wrapAngleTo180_float(p_110146_1_ - this.renderYawOffset);
         this.renderYawOffset += f * 0.3F;
         float f1 = MathHelper.wrapAngleTo180_float(this.rotationYaw - this.renderYawOffset);
         boolean flag = f1 < -90.0F || f1 >= 90.0F;
 
-        if (f1 < -75.0F)
-        {
+        if (f1 < -75.0F) {
             f1 = -75.0F;
         }
 
-        if (f1 >= 75.0F)
-        {
+        if (f1 >= 75.0F) {
             f1 = 75.0F;
         }
 
         this.renderYawOffset = this.rotationYaw - f1;
 
-        if (f1 * f1 > 2500.0F)
-        {
+        if (f1 * f1 > 2500.0F) {
             this.renderYawOffset += f1 * 0.2F;
         }
 
-        if (flag)
-        {
+        if (flag) {
             p_110146_2_ *= -1.0F;
         }
 
@@ -1945,58 +1654,47 @@ public abstract class EntityLivingBase extends Entity
      * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons
      * use this to react to sunlight and start to burn.
      */
-    public void onLivingUpdate()
-    {
-        if (this.jumpTicks > 0)
-        {
+    public void onLivingUpdate() {
+        if (this.jumpTicks > 0) {
             --this.jumpTicks;
         }
 
-        if (this.newPosRotationIncrements > 0)
-        {
-            double d0 = this.posX + (this.newPosX - this.posX) / (double)this.newPosRotationIncrements;
-            double d1 = this.posY + (this.newPosY - this.posY) / (double)this.newPosRotationIncrements;
-            double d2 = this.posZ + (this.newPosZ - this.posZ) / (double)this.newPosRotationIncrements;
-            double d3 = MathHelper.wrapAngleTo180_double(this.newRotationYaw - (double)this.rotationYaw);
-            this.rotationYaw = (float)((double)this.rotationYaw + d3 / (double)this.newPosRotationIncrements);
-            this.rotationPitch = (float)((double)this.rotationPitch + (this.newRotationPitch - (double)this.rotationPitch) / (double)this.newPosRotationIncrements);
+        if (this.newPosRotationIncrements > 0) {
+            double d0 = this.posX + (this.newPosX - this.posX) / (double) this.newPosRotationIncrements;
+            double d1 = this.posY + (this.newPosY - this.posY) / (double) this.newPosRotationIncrements;
+            double d2 = this.posZ + (this.newPosZ - this.posZ) / (double) this.newPosRotationIncrements;
+            double d3 = MathHelper.wrapAngleTo180_double(this.newRotationYaw - (double) this.rotationYaw);
+            this.rotationYaw = (float) ((double) this.rotationYaw + d3 / (double) this.newPosRotationIncrements);
+            this.rotationPitch = (float) ((double) this.rotationPitch + (this.newRotationPitch - (double) this.rotationPitch) / (double) this.newPosRotationIncrements);
             --this.newPosRotationIncrements;
             this.setPosition(d0, d1, d2);
             this.setRotation(this.rotationYaw, this.rotationPitch);
-        }
-        else if (!this.isServerWorld())
-        {
+        } else if (!this.isServerWorld()) {
             this.motionX *= 0.98D;
             this.motionY *= 0.98D;
             this.motionZ *= 0.98D;
         }
 
-        if (Math.abs(this.motionX) < 0.005D)
-        {
+        if (Math.abs(this.motionX) < 0.005D) {
             this.motionX = 0.0D;
         }
 
-        if (Math.abs(this.motionY) < 0.005D)
-        {
+        if (Math.abs(this.motionY) < 0.005D) {
             this.motionY = 0.0D;
         }
 
-        if (Math.abs(this.motionZ) < 0.005D)
-        {
+        if (Math.abs(this.motionZ) < 0.005D) {
             this.motionZ = 0.0D;
         }
 
         this.worldObj.theProfiler.startSection("ai");
 
-        if (this.isMovementBlocked())
-        {
+        if (this.isMovementBlocked()) {
             this.isJumping = false;
             this.moveStrafing = 0.0F;
             this.moveForward = 0.0F;
             this.randomYawVelocity = 0.0F;
-        }
-        else if (this.isServerWorld())
-        {
+        } else if (this.isServerWorld()) {
             this.worldObj.theProfiler.startSection("newAi");
             this.updateEntityActionState();
             this.worldObj.theProfiler.endSection();
@@ -2005,24 +1703,16 @@ public abstract class EntityLivingBase extends Entity
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("jump");
 
-        if (this.isJumping)
-        {
-            if (this.isInWater())
-            {
+        if (this.isJumping) {
+            if (this.isInWater()) {
                 this.updateAITick();
-            }
-            else if (this.isInLava())
-            {
+            } else if (this.isInLava()) {
                 this.handleJumpLava();
-            }
-            else if (this.onGround && this.jumpTicks == 0)
-            {
+            } else if (this.onGround && this.jumpTicks == 0) {
                 this.jump();
                 this.jumpTicks = 10;
             }
-        }
-        else
-        {
+        } else {
             this.jumpTicks = 0;
         }
 
@@ -2035,64 +1725,50 @@ public abstract class EntityLivingBase extends Entity
         this.worldObj.theProfiler.endSection();
         this.worldObj.theProfiler.startSection("push");
 
-        if (!this.worldObj.isRemote)
-        {
+        if (!this.worldObj.isRemote) {
             this.collideWithNearbyEntities();
         }
 
         this.worldObj.theProfiler.endSection();
     }
 
-    protected void updateEntityActionState()
-    {
+    protected void updateEntityActionState() {
     }
 
-    protected void collideWithNearbyEntities()
-    {
-        List<Entity> list = this.worldObj.getEntitiesInAABBexcluding(this, this.getEntityBoundingBox().expand(0.20000000298023224D, 0.0D, 0.20000000298023224D), Predicates.<Entity> and (EntitySelectors.NOT_SPECTATING, new Predicate<Entity>()
-        {
-            public boolean apply(Entity p_apply_1_)
-            {
+    protected void collideWithNearbyEntities() {
+        List<Entity> list = this.worldObj.getEntitiesInAABBexcluding(this, this.getEntityBoundingBox().expand(0.20000000298023224D, 0.0D, 0.20000000298023224D), Predicates.<Entity>and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>() {
+            public boolean apply(Entity p_apply_1_) {
                 return p_apply_1_.canBePushed();
             }
         }));
 
-        if (!list.isEmpty())
-        {
-            for (int i = 0; i < list.size(); ++i)
-            {
-                Entity entity = (Entity)list.get(i);
+        if (!list.isEmpty()) {
+            for (int i = 0; i < list.size(); ++i) {
+                Entity entity = (Entity) list.get(i);
                 this.collideWithEntity(entity);
             }
         }
     }
 
-    protected void collideWithEntity(Entity entityIn)
-    {
+    protected void collideWithEntity(Entity entityIn) {
         entityIn.applyEntityCollision(this);
     }
 
     /**
      * Called when a player mounts an entity. e.g. mounts a pig, mounts a boat.
      */
-    public void mountEntity(Entity entityIn)
-    {
-        if (this.ridingEntity != null && entityIn == null)
-        {
-            if (!this.worldObj.isRemote)
-            {
+    public void mountEntity(Entity entityIn) {
+        if (this.ridingEntity != null && entityIn == null) {
+            if (!this.worldObj.isRemote) {
                 this.dismountEntity(this.ridingEntity);
             }
 
-            if (this.ridingEntity != null)
-            {
+            if (this.ridingEntity != null) {
                 this.ridingEntity.riddenByEntity = null;
             }
 
             this.ridingEntity = null;
-        }
-        else
-        {
+        } else {
             super.mountEntity(entityIn);
         }
     }
@@ -2100,50 +1776,42 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Handles updating while being ridden by an entity
      */
-    public void updateRidden()
-    {
+    public void updateRidden() {
         super.updateRidden();
         this.prevOnGroundSpeedFactor = this.onGroundSpeedFactor;
         this.onGroundSpeedFactor = 0.0F;
         this.fallDistance = 0.0F;
     }
 
-    public void setPositionAndRotation2(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean p_180426_10_)
-    {
+    public void setPositionAndRotation2(double x, double y, double z, float yaw, float pitch, int posRotationIncrements, boolean p_180426_10_) {
         this.newPosX = x;
         this.newPosY = y;
         this.newPosZ = z;
-        this.newRotationYaw = (double)yaw;
-        this.newRotationPitch = (double)pitch;
+        this.newRotationYaw = (double) yaw;
+        this.newRotationPitch = (double) pitch;
         this.newPosRotationIncrements = posRotationIncrements;
     }
 
-    public void setJumping(boolean jumping)
-    {
+    public void setJumping(boolean jumping) {
         this.isJumping = jumping;
     }
 
     /**
      * Called whenever an item is picked up from walking over it. Args: pickedUpEntity, stackSize
      */
-    public void onItemPickup(Entity p_71001_1_, int p_71001_2_)
-    {
-        if (!p_71001_1_.isDead && !this.worldObj.isRemote)
-        {
-            EntityTracker entitytracker = ((WorldServer)this.worldObj).getEntityTracker();
+    public void onItemPickup(Entity p_71001_1_, int p_71001_2_) {
+        if (!p_71001_1_.isDead && !this.worldObj.isRemote) {
+            EntityTracker entitytracker = ((WorldServer) this.worldObj).getEntityTracker();
 
-            if (p_71001_1_ instanceof EntityItem)
-            {
+            if (p_71001_1_ instanceof EntityItem) {
                 entitytracker.sendToAllTrackingEntity(p_71001_1_, new S0DPacketCollectItem(p_71001_1_.getEntityId(), this.getEntityId()));
             }
 
-            if (p_71001_1_ instanceof EntityArrow)
-            {
+            if (p_71001_1_ instanceof EntityArrow) {
                 entitytracker.sendToAllTrackingEntity(p_71001_1_, new S0DPacketCollectItem(p_71001_1_.getEntityId(), this.getEntityId()));
             }
 
-            if (p_71001_1_ instanceof EntityXPOrb)
-            {
+            if (p_71001_1_ instanceof EntityXPOrb) {
                 entitytracker.sendToAllTrackingEntity(p_71001_1_, new S0DPacketCollectItem(p_71001_1_.getEntityId(), this.getEntityId()));
             }
         }
@@ -2152,30 +1820,24 @@ public abstract class EntityLivingBase extends Entity
     /**
      * returns true if the entity provided in the argument can be seen. (Raytrace)
      */
-    public boolean canEntityBeSeen(Entity entityIn)
-    {
-        return this.worldObj.rayTraceBlocks(new Vec3(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ), new Vec3(entityIn.posX, entityIn.posY + (double)entityIn.getEyeHeight(), entityIn.posZ)) == null;
+    public boolean canEntityBeSeen(Entity entityIn) {
+        return this.worldObj.rayTraceBlocks(new Vec3(this.posX, this.posY + (double) this.getEyeHeight(), this.posZ), new Vec3(entityIn.posX, entityIn.posY + (double) entityIn.getEyeHeight(), entityIn.posZ)) == null;
     }
 
     /**
      * returns a (normalized) vector of where this entity is looking
      */
-    public Vec3 getLookVec()
-    {
+    public Vec3 getLookVec() {
         return this.getLook(1.0F);
     }
 
     /**
      * interpolated look vector
      */
-    public Vec3 getLook(float partialTicks)
-    {
-        if (partialTicks == 1.0F)
-        {
+    public Vec3 getLook(float partialTicks) {
+        if (partialTicks == 1.0F) {
             return this.getVectorForRotation(this.rotationPitch, this.rotationYawHead);
-        }
-        else
-        {
+        } else {
             float f = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * partialTicks;
             float f1 = this.prevRotationYawHead + (this.rotationYawHead - this.prevRotationYawHead) * partialTicks;
             return this.getVectorForRotation(f, f1);
@@ -2185,12 +1847,10 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Returns where in the swing animation the living entity is (from 0 to 1).  Args: partialTickTime
      */
-    public float getSwingProgress(float partialTickTime)
-    {
+    public float getSwingProgress(float partialTickTime) {
         float f = this.swingProgress - this.prevSwingProgress;
 
-        if (f < 0.0F)
-        {
+        if (f < 0.0F) {
             ++f;
         }
 
@@ -2200,107 +1860,91 @@ public abstract class EntityLivingBase extends Entity
     /**
      * Returns whether the entity is in a server world
      */
-    public boolean isServerWorld()
-    {
+    public boolean isServerWorld() {
         return !this.worldObj.isRemote;
     }
 
     /**
      * Returns true if other Entities should be prevented from moving through this Entity.
      */
-    public boolean canBeCollidedWith()
-    {
+    public boolean canBeCollidedWith() {
         return !this.isDead;
     }
 
     /**
      * Returns true if this entity should push and be pushed by other entities when colliding.
      */
-    public boolean canBePushed()
-    {
+    public boolean canBePushed() {
         return !this.isDead;
     }
 
     /**
      * Sets that this entity has been attacked.
      */
-    protected void setBeenAttacked()
-    {
+    protected void setBeenAttacked() {
         this.velocityChanged = this.rand.nextDouble() >= this.getEntityAttribute(SharedMonsterAttributes.knockbackResistance).getAttributeValue();
     }
 
-    public float getRotationYawHead()
-    {
+    public float getRotationYawHead() {
         return this.rotationYawHead;
     }
 
     /**
      * Sets the head's yaw rotation of the entity.
      */
-    public void setRotationYawHead(float rotation)
-    {
+    public void setRotationYawHead(float rotation) {
         this.rotationYawHead = rotation;
     }
 
     /**
      * Set the render yaw offset
-     *  
+     *
      * @param offset The render yaw offset
      */
-    public void setRenderYawOffset(float offset)
-    {
+    public void setRenderYawOffset(float offset) {
         this.renderYawOffset = offset;
     }
 
-    public float getAbsorptionAmount()
-    {
+    public float getAbsorptionAmount() {
         return this.absorptionAmount;
     }
 
-    public void setAbsorptionAmount(float amount)
-    {
-        if (amount < 0.0F)
-        {
+    public void setAbsorptionAmount(float amount) {
+        if (amount < 0.0F) {
             amount = 0.0F;
         }
 
         this.absorptionAmount = amount;
     }
 
-    public Team getTeam()
-    {
+    public Team getTeam() {
         return this.worldObj.getScoreboard().getPlayersTeam(this.getUniqueID().toString());
     }
 
-    public boolean isOnSameTeam(EntityLivingBase otherEntity)
-    {
+    public boolean isOnSameTeam(EntityLivingBase otherEntity) {
         return this.isOnTeam(otherEntity.getTeam());
     }
 
     /**
      * Returns true if the entity is on a specific team.
      */
-    public boolean isOnTeam(Team teamIn)
-    {
+    public boolean isOnTeam(Team teamIn) {
         return this.getTeam() != null ? this.getTeam().isSameTeam(teamIn) : false;
     }
 
     /**
      * Sends an ENTER_COMBAT packet to the client
      */
-    public void sendEnterCombat()
-    {
+    public void sendEnterCombat() {
     }
 
     /**
      * Sends an END_COMBAT packet to the client
      */
-    public void sendEndCombat()
-    {
+    public void sendEndCombat() {
     }
 
-    protected void markPotionsDirty()
-    {
+    protected void markPotionsDirty() {
         this.potionsNeedUpdate = true;
     }
 }
diff --git a/src/main/java/net/minecraft/entity/player/EntityPlayer.java b/src/main/java/net/minecraft/entity/player/EntityPlayer.java
index 9b04f55..3802b73 100644
--- a/src/main/java/net/minecraft/entity/player/EntityPlayer.java
+++ b/src/main/java/net/minecraft/entity/player/EntityPlayer.java
@@ -11,6 +11,8 @@ import net.minecraft.block.BlockBed;
 import net.minecraft.block.BlockDirectional;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.settings.KeyBinding;
 import net.minecraft.command.server.CommandBlockLogic;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
@@ -218,6 +220,13 @@ public abstract class EntityPlayer extends EntityLivingBase
         return this.itemInUseCount;
     }
 
+//    public int getFakeItemInUseCount()
+//    {
+//        return Minecraft.getMinecraft().gameSettings.keyBindUseItem.isKeyDown() ? 1 : 0;
+////        return this.fakeItemInUseCount;
+//    }
+
+
     /**
      * Checks if the entity is currently using an item (e.g., bow, food, sword) by holding down the useItemButton
      */
@@ -272,6 +281,8 @@ public abstract class EntityPlayer extends EntityLivingBase
             this.onGround = false;
         }
 
+//        --this.fakeItemInUseCount;
+
         if (this.itemInUse != null)
         {
             ItemStack itemstack = this.inventory.getCurrentItem();
@@ -283,6 +294,7 @@ public abstract class EntityPlayer extends EntityLivingBase
                     this.updateItemUse(itemstack, 5);
                 }
 
+
                 if (--this.itemInUseCount == 0 && !this.worldObj.isRemote)
                 {
                     this.onItemUseFinish();
@@ -2105,6 +2117,7 @@ public abstract class EntityPlayer extends EntityLivingBase
         {
             this.itemInUse = stack;
             this.itemInUseCount = duration;
+//            fakeItemInUseCount = duration;
 
             if (!this.worldObj.isRemote)
             {
diff --git a/src/main/java/net/optifine/entity/model/CustomEntityModels.java b/src/main/java/net/optifine/entity/model/CustomEntityModels.java
index 5d74687..3729c1d 100644
--- a/src/main/java/net/optifine/entity/model/CustomEntityModels.java
+++ b/src/main/java/net/optifine/entity/model/CustomEntityModels.java
@@ -12,6 +12,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -90,7 +92,7 @@ public class CustomEntityModels
 
     private static Map<Class, Render> getEntityRenderMap()
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         Map<Class, Render> map = rendermanager.getEntityRenderMap();
 
         if (map == null)
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterArmorStand.java b/src/main/java/net/optifine/entity/model/ModelAdapterArmorStand.java
index f1e43fa..0006ca1 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterArmorStand.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterArmorStand.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelArmorStand;
 import net.minecraft.client.model.ModelBase;
@@ -43,7 +44,7 @@ public class ModelAdapterArmorStand extends ModelAdapterBiped
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         ArmorStandRenderer armorstandrenderer = new ArmorStandRenderer(rendermanager);
         armorstandrenderer.mainModel = modelBase;
         armorstandrenderer.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterBat.java b/src/main/java/net/optifine/entity/model/ModelAdapterBat.java
index cf7bd00..ed98d67 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterBat.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterBat.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelBat;
@@ -41,7 +42,7 @@ public class ModelAdapterBat extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderBat renderbat = new RenderBat(rendermanager);
         renderbat.mainModel = modelBase;
         renderbat.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterBlaze.java b/src/main/java/net/optifine/entity/model/ModelAdapterBlaze.java
index 93b2fc8..4a9a484 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterBlaze.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterBlaze.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelBlaze;
@@ -71,7 +72,7 @@ public class ModelAdapterBlaze extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderBlaze renderblaze = new RenderBlaze(rendermanager);
         renderblaze.mainModel = modelBase;
         renderblaze.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterBoat.java b/src/main/java/net/optifine/entity/model/ModelAdapterBoat.java
index e61f9d5..364561b 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterBoat.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterBoat.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelBoat;
@@ -42,7 +43,7 @@ public class ModelAdapterBoat extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderBoat renderboat = new RenderBoat(rendermanager);
 
         if (!Reflector.RenderBoat_modelBoat.exists())
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterCaveSpider.java b/src/main/java/net/optifine/entity/model/ModelAdapterCaveSpider.java
index a61e043..4ce135e 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterCaveSpider.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterCaveSpider.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.entity.RenderCaveSpider;
@@ -15,7 +16,7 @@ public class ModelAdapterCaveSpider extends ModelAdapterSpider
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderCaveSpider rendercavespider = new RenderCaveSpider(rendermanager);
         rendercavespider.mainModel = modelBase;
         rendercavespider.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterChicken.java b/src/main/java/net/optifine/entity/model/ModelAdapterChicken.java
index 2b6b968..3e38bb4 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterChicken.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterChicken.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelChicken;
@@ -40,7 +41,7 @@ public class ModelAdapterChicken extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderChicken renderchicken = new RenderChicken(rendermanager, modelBase, shadowSize);
         return renderchicken;
     }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterCow.java b/src/main/java/net/optifine/entity/model/ModelAdapterCow.java
index f7855a3..7397b56 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterCow.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterCow.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelCow;
@@ -21,7 +22,7 @@ public class ModelAdapterCow extends ModelAdapterQuadruped
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         return new RenderCow(rendermanager, modelBase, shadowSize);
     }
 }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterCreeper.java b/src/main/java/net/optifine/entity/model/ModelAdapterCreeper.java
index 49742e0..c851a8b 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterCreeper.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterCreeper.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelCreeper;
@@ -40,7 +41,7 @@ public class ModelAdapterCreeper extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderCreeper rendercreeper = new RenderCreeper(rendermanager);
         rendercreeper.mainModel = modelBase;
         rendercreeper.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterDragon.java b/src/main/java/net/optifine/entity/model/ModelAdapterDragon.java
index 3b7fc2d..1fc2896 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterDragon.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterDragon.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelDragon;
@@ -41,7 +42,7 @@ public class ModelAdapterDragon extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderDragon renderdragon = new RenderDragon(rendermanager);
         renderdragon.mainModel = modelBase;
         renderdragon.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterEnderCrystal.java b/src/main/java/net/optifine/entity/model/ModelAdapterEnderCrystal.java
index 313325f..58fdfb1 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterEnderCrystal.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterEnderCrystal.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelEnderCrystal;
@@ -48,7 +49,7 @@ public class ModelAdapterEnderCrystal extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         Render render = (Render)rendermanager.getEntityRenderMap().get(EntityEnderCrystal.class);
 
         if (!(render instanceof RenderEnderCrystal))
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterEnderman.java b/src/main/java/net/optifine/entity/model/ModelAdapterEnderman.java
index 5212d34..c585253 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterEnderman.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterEnderman.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelEnderman;
@@ -21,7 +22,7 @@ public class ModelAdapterEnderman extends ModelAdapterBiped
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderEnderman renderenderman = new RenderEnderman(rendermanager);
         renderenderman.mainModel = modelBase;
         renderenderman.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterEndermite.java b/src/main/java/net/optifine/entity/model/ModelAdapterEndermite.java
index 3e0c624..3b6ea39 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterEndermite.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterEndermite.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelEnderMite;
@@ -63,7 +64,7 @@ public class ModelAdapterEndermite extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderEndermite renderendermite = new RenderEndermite(rendermanager);
         renderendermite.mainModel = modelBase;
         renderendermite.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterGhast.java b/src/main/java/net/optifine/entity/model/ModelAdapterGhast.java
index fa208db..f969603 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterGhast.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterGhast.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelGhast;
@@ -71,7 +72,7 @@ public class ModelAdapterGhast extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderGhast renderghast = new RenderGhast(rendermanager);
         renderghast.mainModel = modelBase;
         renderghast.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterGuardian.java b/src/main/java/net/optifine/entity/model/ModelAdapterGuardian.java
index 09dbffb..9ca6c2d 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterGuardian.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterGuardian.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelGuardian;
@@ -96,7 +97,7 @@ public class ModelAdapterGuardian extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderGuardian renderguardian = new RenderGuardian(rendermanager);
         renderguardian.mainModel = modelBase;
         renderguardian.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterHorse.java b/src/main/java/net/optifine/entity/model/ModelAdapterHorse.java
index dfd1344..dfcc6fb 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterHorse.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterHorse.java
@@ -2,6 +2,8 @@ package net.optifine.entity.model;
 
 import java.util.HashMap;
 import java.util.Map;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelHorse;
@@ -112,7 +114,7 @@ public class ModelAdapterHorse extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderHorse renderhorse = new RenderHorse(rendermanager, (ModelHorse)modelBase, shadowSize);
         return renderhorse;
     }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterIronGolem.java b/src/main/java/net/optifine/entity/model/ModelAdapterIronGolem.java
index eb2a4ff..97ef4c6 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterIronGolem.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterIronGolem.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelIronGolem;
@@ -40,7 +41,7 @@ public class ModelAdapterIronGolem extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderIronGolem renderirongolem = new RenderIronGolem(rendermanager);
         renderirongolem.mainModel = modelBase;
         renderirongolem.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterLeadKnot.java b/src/main/java/net/optifine/entity/model/ModelAdapterLeadKnot.java
index d75d9b9..fa9cfaf 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterLeadKnot.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterLeadKnot.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelLeashKnot;
@@ -42,7 +43,7 @@ public class ModelAdapterLeadKnot extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderLeashKnot renderleashknot = new RenderLeashKnot(rendermanager);
 
         if (!Reflector.RenderLeashKnot_leashKnotModel.exists())
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterMagmaCube.java b/src/main/java/net/optifine/entity/model/ModelAdapterMagmaCube.java
index 4f92d35..e81da9f 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterMagmaCube.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterMagmaCube.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelMagmaCube;
@@ -71,7 +72,7 @@ public class ModelAdapterMagmaCube extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderMagmaCube rendermagmacube = new RenderMagmaCube(rendermanager);
         rendermagmacube.mainModel = modelBase;
         rendermagmacube.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterMinecart.java b/src/main/java/net/optifine/entity/model/ModelAdapterMinecart.java
index 3e02445..cf84783 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterMinecart.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterMinecart.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelMinecart;
@@ -47,7 +48,7 @@ public class ModelAdapterMinecart extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderMinecart renderminecart = new RenderMinecart(rendermanager);
 
         if (!Reflector.RenderMinecart_modelMinecart.exists())
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterMinecartMobSpawner.java b/src/main/java/net/optifine/entity/model/ModelAdapterMinecartMobSpawner.java
index 168aeff..19c6b4f 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterMinecartMobSpawner.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterMinecartMobSpawner.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.entity.RenderManager;
@@ -17,7 +18,7 @@ public class ModelAdapterMinecartMobSpawner extends ModelAdapterMinecart
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderMinecartMobSpawner renderminecartmobspawner = new RenderMinecartMobSpawner(rendermanager);
 
         if (!Reflector.RenderMinecart_modelMinecart.exists())
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterMinecartTnt.java b/src/main/java/net/optifine/entity/model/ModelAdapterMinecartTnt.java
index 6063b03..a0d2da4 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterMinecartTnt.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterMinecartTnt.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.renderer.entity.RenderManager;
@@ -17,7 +18,7 @@ public class ModelAdapterMinecartTnt extends ModelAdapterMinecart
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderTntMinecart rendertntminecart = new RenderTntMinecart(rendermanager);
 
         if (!Reflector.RenderMinecart_modelMinecart.exists())
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterMooshroom.java b/src/main/java/net/optifine/entity/model/ModelAdapterMooshroom.java
index c10e105..94f02ee 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterMooshroom.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterMooshroom.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelCow;
@@ -21,7 +22,7 @@ public class ModelAdapterMooshroom extends ModelAdapterQuadruped
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderMooshroom rendermooshroom = new RenderMooshroom(rendermanager, modelBase, shadowSize);
         return rendermooshroom;
     }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterOcelot.java b/src/main/java/net/optifine/entity/model/ModelAdapterOcelot.java
index b34d31c..a5f1e9b 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterOcelot.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterOcelot.java
@@ -2,6 +2,8 @@ package net.optifine.entity.model;
 
 import java.util.HashMap;
 import java.util.Map;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelOcelot;
@@ -76,7 +78,7 @@ public class ModelAdapterOcelot extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderOcelot renderocelot = new RenderOcelot(rendermanager, modelBase, shadowSize);
         return renderocelot;
     }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterPig.java b/src/main/java/net/optifine/entity/model/ModelAdapterPig.java
index f9574f0..65e1117 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterPig.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterPig.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelPig;
@@ -21,7 +22,7 @@ public class ModelAdapterPig extends ModelAdapterQuadruped
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         return new RenderPig(rendermanager, modelBase, shadowSize);
     }
 }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterPigZombie.java b/src/main/java/net/optifine/entity/model/ModelAdapterPigZombie.java
index 5a5608c..fdc35e2 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterPigZombie.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterPigZombie.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelBiped;
@@ -23,7 +24,7 @@ public class ModelAdapterPigZombie extends ModelAdapterBiped
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderPigZombie renderpigzombie = new RenderPigZombie(rendermanager);
         Render.setModelBipedMain(renderpigzombie, (ModelBiped)modelBase);
         renderpigzombie.mainModel = modelBase;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterRabbit.java b/src/main/java/net/optifine/entity/model/ModelAdapterRabbit.java
index fc6bb72..7abdb92 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterRabbit.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterRabbit.java
@@ -2,6 +2,8 @@ package net.optifine.entity.model;
 
 import java.util.HashMap;
 import java.util.Map;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRabbit;
@@ -80,7 +82,7 @@ public class ModelAdapterRabbit extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderRabbit renderrabbit = new RenderRabbit(rendermanager, modelBase, shadowSize);
         return renderrabbit;
     }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterSheep.java b/src/main/java/net/optifine/entity/model/ModelAdapterSheep.java
index 94d47f6..c8959d7 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterSheep.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterSheep.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelSheep2;
@@ -21,7 +22,7 @@ public class ModelAdapterSheep extends ModelAdapterQuadruped
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         return new RenderSheep(rendermanager, modelBase, shadowSize);
     }
 }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterSheepWool.java b/src/main/java/net/optifine/entity/model/ModelAdapterSheepWool.java
index 69e2b8a..7cb3e1a 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterSheepWool.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterSheepWool.java
@@ -2,6 +2,8 @@ package net.optifine.entity.model;
 
 import java.util.Iterator;
 import java.util.List;
+
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelSheep1;
@@ -28,7 +30,7 @@ public class ModelAdapterSheepWool extends ModelAdapterQuadruped
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         Render render = (Render)rendermanager.getEntityRenderMap().get(EntitySheep.class);
 
         if (!(render instanceof RenderSheep))
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterSilverfish.java b/src/main/java/net/optifine/entity/model/ModelAdapterSilverfish.java
index dfe6942..da2173a 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterSilverfish.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterSilverfish.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -84,7 +85,7 @@ public class ModelAdapterSilverfish extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderSilverfish rendersilverfish = new RenderSilverfish(rendermanager);
         rendersilverfish.mainModel = modelBase;
         rendersilverfish.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterSkeleton.java b/src/main/java/net/optifine/entity/model/ModelAdapterSkeleton.java
index c6149d4..dcd4bac 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterSkeleton.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterSkeleton.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelBiped;
@@ -23,7 +24,7 @@ public class ModelAdapterSkeleton extends ModelAdapterBiped
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderSkeleton renderskeleton = new RenderSkeleton(rendermanager);
         Render.setModelBipedMain(renderskeleton, (ModelBiped)modelBase);
         renderskeleton.mainModel = modelBase;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterSlime.java b/src/main/java/net/optifine/entity/model/ModelAdapterSlime.java
index 56f1aea..34fee2d 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterSlime.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterSlime.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -41,7 +42,7 @@ public class ModelAdapterSlime extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderSlime renderslime = new RenderSlime(rendermanager, modelBase, shadowSize);
         return renderslime;
     }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterSnowman.java b/src/main/java/net/optifine/entity/model/ModelAdapterSnowman.java
index 2e9e3b3..45e62c0 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterSnowman.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterSnowman.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -40,7 +41,7 @@ public class ModelAdapterSnowman extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderSnowMan rendersnowman = new RenderSnowMan(rendermanager);
         rendersnowman.mainModel = modelBase;
         rendersnowman.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterSpider.java b/src/main/java/net/optifine/entity/model/ModelAdapterSpider.java
index f34a7b1..2ac6e70 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterSpider.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterSpider.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -45,7 +46,7 @@ public class ModelAdapterSpider extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderSpider renderspider = new RenderSpider(rendermanager);
         renderspider.mainModel = modelBase;
         renderspider.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterSquid.java b/src/main/java/net/optifine/entity/model/ModelAdapterSquid.java
index f4bcab5..b6ae45a 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterSquid.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterSquid.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -71,7 +72,7 @@ public class ModelAdapterSquid extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderSquid rendersquid = new RenderSquid(rendermanager, modelBase, shadowSize);
         return rendersquid;
     }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterVillager.java b/src/main/java/net/optifine/entity/model/ModelAdapterVillager.java
index c653c03..3c1004b 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterVillager.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterVillager.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -40,7 +41,7 @@ public class ModelAdapterVillager extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderVillager rendervillager = new RenderVillager(rendermanager);
         rendervillager.mainModel = modelBase;
         rendervillager.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterWitch.java b/src/main/java/net/optifine/entity/model/ModelAdapterWitch.java
index 1d4992c..9741d81 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterWitch.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterWitch.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -41,7 +42,7 @@ public class ModelAdapterWitch extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderWitch renderwitch = new RenderWitch(rendermanager);
         renderwitch.mainModel = modelBase;
         renderwitch.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterWither.java b/src/main/java/net/optifine/entity/model/ModelAdapterWither.java
index 64f8f15..b35c69e 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterWither.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterWither.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -84,7 +85,7 @@ public class ModelAdapterWither extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderWither renderwither = new RenderWither(rendermanager);
         renderwither.mainModel = modelBase;
         renderwither.shadowSize = shadowSize;
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterWitherSkull.java b/src/main/java/net/optifine/entity/model/ModelAdapterWitherSkull.java
index 753cd79..ac9eeaf 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterWitherSkull.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterWitherSkull.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -42,7 +43,7 @@ public class ModelAdapterWitherSkull extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderWitherSkull renderwitherskull = new RenderWitherSkull(rendermanager);
 
         if (!Reflector.RenderWitherSkull_model.exists())
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterWolf.java b/src/main/java/net/optifine/entity/model/ModelAdapterWolf.java
index ccd4da6..db34ccc 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterWolf.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterWolf.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelRenderer;
@@ -41,7 +42,7 @@ public class ModelAdapterWolf extends ModelAdapter
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderWolf renderwolf = new RenderWolf(rendermanager, modelBase, shadowSize);
         return renderwolf;
     }
diff --git a/src/main/java/net/optifine/entity/model/ModelAdapterZombie.java b/src/main/java/net/optifine/entity/model/ModelAdapterZombie.java
index 55ad842..a54c31c 100644
--- a/src/main/java/net/optifine/entity/model/ModelAdapterZombie.java
+++ b/src/main/java/net/optifine/entity/model/ModelAdapterZombie.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelBiped;
@@ -23,7 +24,7 @@ public class ModelAdapterZombie extends ModelAdapterBiped
 
     public IEntityRenderer makeEntityRender(ModelBase modelBase, float shadowSize)
     {
-        RenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
+        IRenderManager rendermanager = Minecraft.getMinecraft().getRenderManager();
         RenderZombie renderzombie = new RenderZombie(rendermanager);
         Render.setModelBipedMain(renderzombie, (ModelBiped)modelBase);
         renderzombie.mainModel = modelBase;
diff --git a/src/main/java/net/optifine/entity/model/anim/RenderEntityParameterBool.java b/src/main/java/net/optifine/entity/model/anim/RenderEntityParameterBool.java
index 653a91c..f4cce57 100644
--- a/src/main/java/net/optifine/entity/model/anim/RenderEntityParameterBool.java
+++ b/src/main/java/net/optifine/entity/model/anim/RenderEntityParameterBool.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model.anim;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.entity.Render;
 import net.minecraft.client.renderer.entity.RenderManager;
@@ -26,7 +27,7 @@ public enum RenderEntityParameterBool implements IExpressionBool
     IS_WET("is_wet");
 
     private String name;
-    private RenderManager renderManager;
+    private IRenderManager renderManager;
     private static final RenderEntityParameterBool[] VALUES = values();
 
     private RenderEntityParameterBool(String name)
@@ -47,7 +48,7 @@ public enum RenderEntityParameterBool implements IExpressionBool
 
     public boolean eval()
     {
-        Render render = this.renderManager.renderRender;
+        Render render = this.renderManager.getRenderRender();
 
         if (render == null)
         {
diff --git a/src/main/java/net/optifine/entity/model/anim/RenderEntityParameterFloat.java b/src/main/java/net/optifine/entity/model/anim/RenderEntityParameterFloat.java
index 8cc03c5..9ed6468 100644
--- a/src/main/java/net/optifine/entity/model/anim/RenderEntityParameterFloat.java
+++ b/src/main/java/net/optifine/entity/model/anim/RenderEntityParameterFloat.java
@@ -1,5 +1,6 @@
 package net.optifine.entity.model.anim;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.entity.Render;
 import net.minecraft.client.renderer.entity.RenderManager;
@@ -30,7 +31,7 @@ public enum RenderEntityParameterFloat implements IExpressionFloat
     SWING_PROGRESS("swing_progress");
 
     private String name;
-    private RenderManager renderManager;
+    private IRenderManager renderManager;
     private static final RenderEntityParameterFloat[] VALUES = values();
 
     private RenderEntityParameterFloat(String name)
@@ -51,7 +52,7 @@ public enum RenderEntityParameterFloat implements IExpressionFloat
 
     public float eval()
     {
-        Render render = this.renderManager.renderRender;
+        Render render = this.renderManager.getRenderRender();
 
         if (render == null)
         {
diff --git a/src/main/java/net/optifine/shaders/ShadersRender.java b/src/main/java/net/optifine/shaders/ShadersRender.java
index e65ce3a..a70bcf7 100644
--- a/src/main/java/net/optifine/shaders/ShadersRender.java
+++ b/src/main/java/net/optifine/shaders/ShadersRender.java
@@ -1,6 +1,8 @@
 package net.optifine.shaders;
 
 import java.nio.IntBuffer;
+
+import com.jlmsz.util.renderer.IItemRenderer;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.EntityRenderer;
 import net.minecraft.client.renderer.GlStateManager;
@@ -135,7 +137,7 @@ public class ShadersRender
         }
     }
 
-    public static void renderItemFP(ItemRenderer itemRenderer, float par1, boolean renderTranslucent)
+    public static void renderItemFP(IItemRenderer itemRenderer, float par1, boolean renderTranslucent)
     {
         Shaders.setRenderingFirstPersonHand(true);
         GlStateManager.depthMask(true);
diff --git a/src/main/java/net/optifine/shaders/uniform/ShaderParameterBool.java b/src/main/java/net/optifine/shaders/uniform/ShaderParameterBool.java
index a88e2d3..cfa1fd1 100644
--- a/src/main/java/net/optifine/shaders/uniform/ShaderParameterBool.java
+++ b/src/main/java/net/optifine/shaders/uniform/ShaderParameterBool.java
@@ -1,5 +1,6 @@
 package net.optifine.shaders.uniform;
 
+import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.entity.RenderManager;
 import net.minecraft.entity.Entity;
@@ -25,7 +26,7 @@ public enum ShaderParameterBool implements IExpressionBool
     IS_WET("is_wet");
 
     private String name;
-    private RenderManager renderManager;
+    private IRenderManager renderManager;
     private static final ShaderParameterBool[] VALUES = values();
 
     private ShaderParameterBool(String name)
-- 
2.34.1

