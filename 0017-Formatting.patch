From 9e1381f69906a7d3429152d50c3428cadde847d2 Mon Sep 17 00:00:00 2001
From: Jose Martinez <jmart652@montgomerycollege.edu>
Date: Sat, 28 Jun 2025 09:33:41 -0400
Subject: [PATCH 17/60] Formatting

---
 src/main/java/com/jlmsz/event/EventBus.java   |    5 +-
 .../com/jlmsz/gui/component/IComponent.java   |    5 -
 .../client/renderer/EntityRenderer.java       | 1695 +++++++----------
 .../client/renderer/entity/RenderLiving.java  |  106 +-
 .../client/renderer/entity/RenderManager.java |  344 ++--
 .../client/resources/ResourceIndex.java       |   56 +-
 .../minecraft/network/PacketThreadUtil.java   |    8 +-
 7 files changed, 829 insertions(+), 1390 deletions(-)

diff --git a/src/main/java/com/jlmsz/event/EventBus.java b/src/main/java/com/jlmsz/event/EventBus.java
index 4a3ca17..c6f9277 100644
--- a/src/main/java/com/jlmsz/event/EventBus.java
+++ b/src/main/java/com/jlmsz/event/EventBus.java
@@ -92,8 +92,9 @@ public class EventBus {
         for (HandlerInfo handler : handlers) {
             try {
                 handler.method.invoke(handler.listener, event);
-            } catch (IllegalAccessException | InvocationTargetException e) {
-                e.printStackTrace();
+            } catch (Exception ex) {
+                System.out.println("Exception in handler method: " + handler.method.getDeclaringClass().getName() + "#" + handler.method.getName());
+                ex.getCause().printStackTrace();
             }
         }
 
diff --git a/src/main/java/com/jlmsz/gui/component/IComponent.java b/src/main/java/com/jlmsz/gui/component/IComponent.java
index f13e6c8..6ac802d 100644
--- a/src/main/java/com/jlmsz/gui/component/IComponent.java
+++ b/src/main/java/com/jlmsz/gui/component/IComponent.java
@@ -10,9 +10,4 @@ public interface IComponent {
     void mouseClicked(int mouseX, int mouseY, int mouseButton);
 
     int getHeight();
-//    double getMin();
-//
-//    double getMax();
-//
-//    double getValue();
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/renderer/EntityRenderer.java b/src/main/java/net/minecraft/client/renderer/EntityRenderer.java
index 08955cc..2dcc2ac 100644
--- a/src/main/java/net/minecraft/client/renderer/EntityRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/EntityRenderer.java
@@ -3,14 +3,8 @@ package net.minecraft.client.renderer;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.gson.JsonSyntaxException;
-import java.io.IOException;
-import java.nio.FloatBuffer;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.List;
-import java.util.Random;
-import java.util.concurrent.Callable;
-
+import com.jlmsz.JClient;
+import com.jlmsz.event.impl.RenderEvent;
 import com.jlmsz.util.renderer.IItemRenderer;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
@@ -18,11 +12,7 @@ import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.AbstractClientPlayer;
-import net.minecraft.client.gui.GuiChat;
-import net.minecraft.client.gui.GuiDownloadTerrain;
-import net.minecraft.client.gui.GuiMainMenu;
-import net.minecraft.client.gui.MapItemRenderer;
-import net.minecraft.client.gui.ScaledResolution;
+import net.minecraft.client.gui.*;
 import net.minecraft.client.particle.EffectRenderer;
 import net.minecraft.client.renderer.chunk.RenderChunk;
 import net.minecraft.client.renderer.culling.ClippingHelper;
@@ -58,20 +48,7 @@ import net.minecraft.item.ItemStack;
 import net.minecraft.potion.Potion;
 import net.minecraft.server.integrated.IntegratedServer;
 import net.minecraft.src.Config;
-import net.minecraft.util.AxisAlignedBB;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.ChatComponentText;
-import net.minecraft.util.ChatStyle;
-import net.minecraft.util.EntitySelectors;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.EnumWorldBlockLayer;
-import net.minecraft.util.MathHelper;
-import net.minecraft.util.MouseFilter;
-import net.minecraft.util.MovingObjectPosition;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.Vec3;
+import net.minecraft.util.*;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.WorldSettings;
@@ -99,17 +76,28 @@ import org.lwjgl.opengl.GL12;
 import org.lwjgl.opengl.GLContext;
 import org.lwjgl.util.glu.Project;
 
-public class EntityRenderer implements IResourceManagerReloadListener
-{
+import java.io.IOException;
+import java.nio.FloatBuffer;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+import java.util.Random;
+import java.util.concurrent.Callable;
+
+public class EntityRenderer implements IResourceManagerReloadListener {
     private static final Logger logger = LogManager.getLogger();
     private static final ResourceLocation locationRainPng = new ResourceLocation("textures/environment/rain.png");
     private static final ResourceLocation locationSnowPng = new ResourceLocation("textures/environment/snow.png");
     public static boolean anaglyphEnable;
 
-    /** Anaglyph field (0=R, 1=GB) */
+    /**
+     * Anaglyph field (0=R, 1=GB)
+     */
     public static int anaglyphField;
 
-    /** A reference to the Minecraft object. */
+    /**
+     * A reference to the Minecraft object.
+     */
     private Minecraft mc;
     private final IResourceManager resourceManager;
     private Random random = new Random();
@@ -117,50 +105,76 @@ public class EntityRenderer implements IResourceManagerReloadListener
     public IItemRenderer itemRenderer;
     private final MapItemRenderer theMapItemRenderer;
 
-    /** Entity renderer update count */
+    /**
+     * Entity renderer update count
+     */
     private int rendererUpdateCount;
 
-    /** Pointed entity */
+    /**
+     * Pointed entity
+     */
     private Entity pointedEntity;
     private MouseFilter mouseFilterXAxis = new MouseFilter();
     private MouseFilter mouseFilterYAxis = new MouseFilter();
     private float thirdPersonDistance = 4.0F;
 
-    /** Third person distance temp */
+    /**
+     * Third person distance temp
+     */
     private float thirdPersonDistanceTemp = 4.0F;
 
-    /** Smooth cam yaw */
+    /**
+     * Smooth cam yaw
+     */
     private float smoothCamYaw;
 
-    /** Smooth cam pitch */
+    /**
+     * Smooth cam pitch
+     */
     private float smoothCamPitch;
 
-    /** Smooth cam filter X */
+    /**
+     * Smooth cam filter X
+     */
     private float smoothCamFilterX;
 
-    /** Smooth cam filter Y */
+    /**
+     * Smooth cam filter Y
+     */
     private float smoothCamFilterY;
 
-    /** Smooth cam partial ticks */
+    /**
+     * Smooth cam partial ticks
+     */
     private float smoothCamPartialTicks;
 
-    /** FOV modifier hand */
+    /**
+     * FOV modifier hand
+     */
     private float fovModifierHand;
 
-    /** FOV modifier hand prev */
+    /**
+     * FOV modifier hand prev
+     */
     private float fovModifierHandPrev;
     private float bossColorModifier;
     private float bossColorModifierPrev;
 
-    /** Cloud fog mode */
+    /**
+     * Cloud fog mode
+     */
     private boolean cloudFog;
     private boolean renderHand = true;
     private boolean drawBlockOutline = true;
 
-    /** Previous frame time in milliseconds */
+    /**
+     * Previous frame time in milliseconds
+     */
     private long prevFrameTime = Minecraft.getSystemTime();
 
-    /** End time of last render (ns) */
+    /**
+     * End time of last render (ns)
+     */
     private long renderEndNanoTime;
 
     /**
@@ -179,25 +193,35 @@ public class EntityRenderer implements IResourceManagerReloadListener
      */
     private boolean lightmapUpdateNeeded;
 
-    /** Torch flicker X */
+    /**
+     * Torch flicker X
+     */
     private float torchFlickerX;
     private float torchFlickerDX;
 
-    /** Rain sound counter */
+    /**
+     * Rain sound counter
+     */
     private int rainSoundCounter;
     private float[] rainXCoords = new float[1024];
     private float[] rainYCoords = new float[1024];
 
-    /** Fog color buffer */
+    /**
+     * Fog color buffer
+     */
     private FloatBuffer fogColorBuffer = GLAllocation.createDirectFloatBuffer(16);
     public float fogColorRed;
     public float fogColorGreen;
     public float fogColorBlue;
 
-    /** Fog color 2 */
+    /**
+     * Fog color 2
+     */
     private float fogColor2;
 
-    /** Fog color 1 */
+    /**
+     * Fog color 1
+     */
     private float fogColor1;
     private int debugViewDirection = 0;
     private boolean debugView = false;
@@ -205,7 +229,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
     private double cameraYaw;
     private double cameraPitch;
     private ShaderGroup theShaderGroup;
-    private static final ResourceLocation[] shaderResourceLocations = new ResourceLocation[] {new ResourceLocation("shaders/post/notch.json"), new ResourceLocation("shaders/post/fxaa.json"), new ResourceLocation("shaders/post/art.json"), new ResourceLocation("shaders/post/bumpy.json"), new ResourceLocation("shaders/post/blobs2.json"), new ResourceLocation("shaders/post/pencil.json"), new ResourceLocation("shaders/post/color_convolve.json"), new ResourceLocation("shaders/post/deconverge.json"), new ResourceLocation("shaders/post/flip.json"), new ResourceLocation("shaders/post/invert.json"), new ResourceLocation("shaders/post/ntsc.json"), new ResourceLocation("shaders/post/outline.json"), new ResourceLocation("shaders/post/phosphor.json"), new ResourceLocation("shaders/post/scan_pincushion.json"), new ResourceLocation("shaders/post/sobel.json"), new ResourceLocation("shaders/post/bits.json"), new ResourceLocation("shaders/post/desaturate.json"), new ResourceLocation("shaders/post/green.json"), new ResourceLocation("shaders/post/blur.json"), new ResourceLocation("shaders/post/wobble.json"), new ResourceLocation("shaders/post/blobs.json"), new ResourceLocation("shaders/post/antialias.json"), new ResourceLocation("shaders/post/creeper.json"), new ResourceLocation("shaders/post/spider.json")};
+    private static final ResourceLocation[] shaderResourceLocations = new ResourceLocation[]{new ResourceLocation("shaders/post/notch.json"), new ResourceLocation("shaders/post/fxaa.json"), new ResourceLocation("shaders/post/art.json"), new ResourceLocation("shaders/post/bumpy.json"), new ResourceLocation("shaders/post/blobs2.json"), new ResourceLocation("shaders/post/pencil.json"), new ResourceLocation("shaders/post/color_convolve.json"), new ResourceLocation("shaders/post/deconverge.json"), new ResourceLocation("shaders/post/flip.json"), new ResourceLocation("shaders/post/invert.json"), new ResourceLocation("shaders/post/ntsc.json"), new ResourceLocation("shaders/post/outline.json"), new ResourceLocation("shaders/post/phosphor.json"), new ResourceLocation("shaders/post/scan_pincushion.json"), new ResourceLocation("shaders/post/sobel.json"), new ResourceLocation("shaders/post/bits.json"), new ResourceLocation("shaders/post/desaturate.json"), new ResourceLocation("shaders/post/green.json"), new ResourceLocation("shaders/post/blur.json"), new ResourceLocation("shaders/post/wobble.json"), new ResourceLocation("shaders/post/blobs.json"), new ResourceLocation("shaders/post/antialias.json"), new ResourceLocation("shaders/post/creeper.json"), new ResourceLocation("shaders/post/spider.json")};
     public static final int shaderCount = shaderResourceLocations.length;
     private int shaderIndex;
     private boolean useShader;
@@ -224,8 +248,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
     private ShaderGroup[] fxaaShaders = new ShaderGroup[10];
     private boolean loadVisibleChunks = false;
 
-    public EntityRenderer(Minecraft mcIn, IResourceManager resourceManagerIn)
-    {
+    public EntityRenderer(Minecraft mcIn, IResourceManager resourceManagerIn) {
         this.shaderIndex = shaderCount;
         this.useShader = false;
         this.frameCount = 0;
@@ -238,12 +261,10 @@ public class EntityRenderer implements IResourceManagerReloadListener
         this.lightmapColors = this.lightmapTexture.getTextureData();
         this.theShaderGroup = null;
 
-        for (int i = 0; i < 32; ++i)
-        {
-            for (int j = 0; j < 32; ++j)
-            {
-                float f = (float)(j - 16);
-                float f1 = (float)(i - 16);
+        for (int i = 0; i < 32; ++i) {
+            for (int j = 0; j < 32; ++j) {
+                float f = (float) (j - 16);
+                float f1 = (float) (i - 16);
                 float f2 = MathHelper.sqrt_float(f * f + f1 * f1);
                 this.rainXCoords[i << 5 | j] = -f1 / f2;
                 this.rainYCoords[i << 5 | j] = f / f2;
@@ -251,15 +272,12 @@ public class EntityRenderer implements IResourceManagerReloadListener
         }
     }
 
-    public boolean isShaderActive()
-    {
+    public boolean isShaderActive() {
         return OpenGlHelper.shadersSupported && this.theShaderGroup != null;
     }
 
-    public void stopUseShader()
-    {
-        if (this.theShaderGroup != null)
-        {
+    public void stopUseShader() {
+        if (this.theShaderGroup != null) {
             this.theShaderGroup.deleteShaderGroup();
         }
 
@@ -267,106 +285,77 @@ public class EntityRenderer implements IResourceManagerReloadListener
         this.shaderIndex = shaderCount;
     }
 
-    public void switchUseShader()
-    {
+    public void switchUseShader() {
         this.useShader = !this.useShader;
     }
 
     /**
      * What shader to use when spectating this entity
      */
-    public void loadEntityShader(Entity entityIn)
-    {
-        if (OpenGlHelper.shadersSupported)
-        {
-            if (this.theShaderGroup != null)
-            {
+    public void loadEntityShader(Entity entityIn) {
+        if (OpenGlHelper.shadersSupported) {
+            if (this.theShaderGroup != null) {
                 this.theShaderGroup.deleteShaderGroup();
             }
 
             this.theShaderGroup = null;
 
-            if (entityIn instanceof EntityCreeper)
-            {
+            if (entityIn instanceof EntityCreeper) {
                 this.loadShader(new ResourceLocation("shaders/post/creeper.json"));
-            }
-            else if (entityIn instanceof EntitySpider)
-            {
+            } else if (entityIn instanceof EntitySpider) {
                 this.loadShader(new ResourceLocation("shaders/post/spider.json"));
-            }
-            else if (entityIn instanceof EntityEnderman)
-            {
+            } else if (entityIn instanceof EntityEnderman) {
                 this.loadShader(new ResourceLocation("shaders/post/invert.json"));
-            }
-            else if (Reflector.ForgeHooksClient_loadEntityShader.exists())
-            {
-                Reflector.call(Reflector.ForgeHooksClient_loadEntityShader, new Object[] {entityIn, this});
+            } else if (Reflector.ForgeHooksClient_loadEntityShader.exists()) {
+                Reflector.call(Reflector.ForgeHooksClient_loadEntityShader, new Object[]{entityIn, this});
             }
         }
     }
 
-    public void activateNextShader()
-    {
-        if (OpenGlHelper.shadersSupported && this.mc.getRenderViewEntity() instanceof EntityPlayer)
-        {
-            if (this.theShaderGroup != null)
-            {
+    public void activateNextShader() {
+        if (OpenGlHelper.shadersSupported && this.mc.getRenderViewEntity() instanceof EntityPlayer) {
+            if (this.theShaderGroup != null) {
                 this.theShaderGroup.deleteShaderGroup();
             }
 
             this.shaderIndex = (this.shaderIndex + 1) % (shaderResourceLocations.length + 1);
 
-            if (this.shaderIndex != shaderCount)
-            {
+            if (this.shaderIndex != shaderCount) {
                 this.loadShader(shaderResourceLocations[this.shaderIndex]);
-            }
-            else
-            {
+            } else {
                 this.theShaderGroup = null;
             }
         }
     }
 
-    private void loadShader(ResourceLocation resourceLocationIn)
-    {
-        if (OpenGlHelper.isFramebufferEnabled())
-        {
-            try
-            {
+    private void loadShader(ResourceLocation resourceLocationIn) {
+        if (OpenGlHelper.isFramebufferEnabled()) {
+            try {
                 this.theShaderGroup = new ShaderGroup(this.mc.getTextureManager(), this.resourceManager, this.mc.getFramebuffer(), resourceLocationIn);
                 this.theShaderGroup.createBindFramebuffers(this.mc.displayWidth, this.mc.displayHeight);
                 this.useShader = true;
-            }
-            catch (IOException ioexception)
-            {
-                logger.warn((String)("Failed to load shader: " + resourceLocationIn), (Throwable)ioexception);
+            } catch (IOException ioexception) {
+                logger.warn((String) ("Failed to load shader: " + resourceLocationIn), (Throwable) ioexception);
                 this.shaderIndex = shaderCount;
                 this.useShader = false;
-            }
-            catch (JsonSyntaxException jsonsyntaxexception)
-            {
-                logger.warn((String)("Failed to load shader: " + resourceLocationIn), (Throwable)jsonsyntaxexception);
+            } catch (JsonSyntaxException jsonsyntaxexception) {
+                logger.warn((String) ("Failed to load shader: " + resourceLocationIn), (Throwable) jsonsyntaxexception);
                 this.shaderIndex = shaderCount;
                 this.useShader = false;
             }
         }
     }
 
-    public void onResourceManagerReload(IResourceManager resourceManager)
-    {
-        if (this.theShaderGroup != null)
-        {
+    public void onResourceManagerReload(IResourceManager resourceManager) {
+        if (this.theShaderGroup != null) {
             this.theShaderGroup.deleteShaderGroup();
         }
 
         this.theShaderGroup = null;
 
-        if (this.shaderIndex != shaderCount)
-        {
+        if (this.shaderIndex != shaderCount) {
             this.loadShader(shaderResourceLocations[this.shaderIndex]);
-        }
-        else
-        {
+        } else {
             this.loadEntityShader(this.mc.getRenderViewEntity());
         }
     }
@@ -374,10 +363,8 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * Updates the entity renderer
      */
-    public void updateRenderer()
-    {
-        if (OpenGlHelper.shadersSupported && ShaderLinkHelper.getStaticShaderLinkHelper() == null)
-        {
+    public void updateRenderer() {
+        if (OpenGlHelper.shadersSupported && ShaderLinkHelper.getStaticShaderLinkHelper() == null) {
             ShaderLinkHelper.setNewStaticShaderLinkHelper();
         }
 
@@ -386,8 +373,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
         this.fogColor2 = this.fogColor1;
         this.thirdPersonDistanceTemp = this.thirdPersonDistance;
 
-        if (this.mc.gameSettings.debugCamEnable)
-        {
+        if (this.mc.gameSettings.debugCamEnable) {
             float f = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
             float f1 = f * f * f * 8.0F;
             this.smoothCamFilterX = this.mouseFilterXAxis.smooth(this.smoothCamYaw, 0.05F * f1);
@@ -395,26 +381,23 @@ public class EntityRenderer implements IResourceManagerReloadListener
             this.smoothCamPartialTicks = 0.0F;
             this.smoothCamYaw = 0.0F;
             this.smoothCamPitch = 0.0F;
-        }
-        else
-        {
+        } else {
             this.smoothCamFilterX = 0.0F;
             this.smoothCamFilterY = 0.0F;
             this.mouseFilterXAxis.reset();
             this.mouseFilterYAxis.reset();
         }
 
-        if (this.mc.getRenderViewEntity() == null)
-        {
+        if (this.mc.getRenderViewEntity() == null) {
             this.mc.setRenderViewEntity(this.mc.thePlayer);
         }
 
         Entity entity = this.mc.getRenderViewEntity();
         double d2 = entity.posX;
-        double d0 = entity.posY + (double)entity.getEyeHeight();
+        double d0 = entity.posY + (double) entity.getEyeHeight();
         double d1 = entity.posZ;
         float f2 = this.mc.theWorld.getLightBrightness(new BlockPos(d2, d0, d1));
-        float f3 = (float)this.mc.gameSettings.renderDistanceChunks / 16.0F;
+        float f3 = (float) this.mc.gameSettings.renderDistanceChunks / 16.0F;
         f3 = MathHelper.clamp_float(f3, 0.0F, 1.0F);
         float f4 = f2 * (1.0F - f3) + f3;
         this.fogColor1 += (f4 - this.fogColor1) * 0.1F;
@@ -423,34 +406,26 @@ public class EntityRenderer implements IResourceManagerReloadListener
         this.addRainParticles();
         this.bossColorModifierPrev = this.bossColorModifier;
 
-        if (BossStatus.hasColorModifier)
-        {
+        if (BossStatus.hasColorModifier) {
             this.bossColorModifier += 0.05F;
 
-            if (this.bossColorModifier > 1.0F)
-            {
+            if (this.bossColorModifier > 1.0F) {
                 this.bossColorModifier = 1.0F;
             }
 
             BossStatus.hasColorModifier = false;
-        }
-        else if (this.bossColorModifier > 0.0F)
-        {
+        } else if (this.bossColorModifier > 0.0F) {
             this.bossColorModifier -= 0.0125F;
         }
     }
 
-    public ShaderGroup getShaderGroup()
-    {
+    public ShaderGroup getShaderGroup() {
         return this.theShaderGroup;
     }
 
-    public void updateShaderGroupSize(int width, int height)
-    {
-        if (OpenGlHelper.shadersSupported)
-        {
-            if (this.theShaderGroup != null)
-            {
+    public void updateShaderGroupSize(int width, int height) {
+        if (OpenGlHelper.shadersSupported) {
+            if (this.theShaderGroup != null) {
                 this.theShaderGroup.createBindFramebuffers(width, height);
             }
 
@@ -461,33 +436,27 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * Finds what block or object the mouse is over at the specified partial tick time. Args: partialTickTime
      */
-    public void getMouseOver(float partialTicks)
-    {
+    public void getMouseOver(float partialTicks) {
         Entity entity = this.mc.getRenderViewEntity();
 
-        if (entity != null && this.mc.theWorld != null)
-        {
+        if (entity != null && this.mc.theWorld != null) {
             this.mc.mcProfiler.startSection("pick");
             this.mc.pointedEntity = null;
-            double d0 = (double)this.mc.playerController.getBlockReachDistance();
+            double d0 = (double) this.mc.playerController.getBlockReachDistance();
             this.mc.objectMouseOver = entity.rayTrace(d0, partialTicks);
             double d1 = d0;
             Vec3 vec3 = entity.getPositionEyes(partialTicks);
             boolean flag = false;
             int i = 3;
 
-            if (this.mc.playerController.extendedReach())
-            {
+            if (this.mc.playerController.extendedReach()) {
                 d0 = 6.0D;
                 d1 = 6.0D;
-            }
-            else if (d0 > 3.0D)
-            {
+            } else if (d0 > 3.0D) {
                 flag = true;
             }
 
-            if (this.mc.objectMouseOver != null)
-            {
+            if (this.mc.objectMouseOver != null) {
                 d1 = this.mc.objectMouseOver.hitVec.distanceTo(vec3);
             }
 
@@ -496,54 +465,41 @@ public class EntityRenderer implements IResourceManagerReloadListener
             this.pointedEntity = null;
             Vec3 vec33 = null;
             float f = 1.0F;
-            List<Entity> list = this.mc.theWorld.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0).expand((double)f, (double)f, (double)f), Predicates.and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>()
-            {
-                public boolean apply(Entity p_apply_1_)
-                {
+            List<Entity> list = this.mc.theWorld.getEntitiesInAABBexcluding(entity, entity.getEntityBoundingBox().addCoord(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0).expand((double) f, (double) f, (double) f), Predicates.and(EntitySelectors.NOT_SPECTATING, new Predicate<Entity>() {
+                public boolean apply(Entity p_apply_1_) {
                     return p_apply_1_.canBeCollidedWith();
                 }
             }));
             double d2 = d1;
 
-            for (int j = 0; j < list.size(); ++j)
-            {
-                Entity entity1 = (Entity)list.get(j);
+            for (int j = 0; j < list.size(); ++j) {
+                Entity entity1 = (Entity) list.get(j);
                 float f1 = entity1.getCollisionBorderSize();
-                AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expand((double)f1, (double)f1, (double)f1);
+                AxisAlignedBB axisalignedbb = entity1.getEntityBoundingBox().expand((double) f1, (double) f1, (double) f1);
                 MovingObjectPosition movingobjectposition = axisalignedbb.calculateIntercept(vec3, vec32);
 
-                if (axisalignedbb.isVecInside(vec3))
-                {
-                    if (d2 >= 0.0D)
-                    {
+                if (axisalignedbb.isVecInside(vec3)) {
+                    if (d2 >= 0.0D) {
                         this.pointedEntity = entity1;
                         vec33 = movingobjectposition == null ? vec3 : movingobjectposition.hitVec;
                         d2 = 0.0D;
                     }
-                }
-                else if (movingobjectposition != null)
-                {
+                } else if (movingobjectposition != null) {
                     double d3 = vec3.distanceTo(movingobjectposition.hitVec);
 
-                    if (d3 < d2 || d2 == 0.0D)
-                    {
+                    if (d3 < d2 || d2 == 0.0D) {
                         boolean flag1 = false;
 
-                        if (Reflector.ForgeEntity_canRiderInteract.exists())
-                        {
+                        if (Reflector.ForgeEntity_canRiderInteract.exists()) {
                             flag1 = Reflector.callBoolean(entity1, Reflector.ForgeEntity_canRiderInteract, new Object[0]);
                         }
 
-                        if (!flag1 && entity1 == entity.ridingEntity)
-                        {
-                            if (d2 == 0.0D)
-                            {
+                        if (!flag1 && entity1 == entity.ridingEntity) {
+                            if (d2 == 0.0D) {
                                 this.pointedEntity = entity1;
                                 vec33 = movingobjectposition.hitVec;
                             }
-                        }
-                        else
-                        {
+                        } else {
                             this.pointedEntity = entity1;
                             vec33 = movingobjectposition.hitVec;
                             d2 = d3;
@@ -552,18 +508,15 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 }
             }
 
-            if (this.pointedEntity != null && flag && vec3.distanceTo(vec33) > 3.0D)
-            {
+            if (this.pointedEntity != null && flag && vec3.distanceTo(vec33) > 3.0D) {
                 this.pointedEntity = null;
-                this.mc.objectMouseOver = new MovingObjectPosition(MovingObjectPosition.MovingObjectType.MISS, vec33, (EnumFacing)null, new BlockPos(vec33));
+                this.mc.objectMouseOver = new MovingObjectPosition(MovingObjectPosition.MovingObjectType.MISS, vec33, (EnumFacing) null, new BlockPos(vec33));
             }
 
-            if (this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null))
-            {
+            if (this.pointedEntity != null && (d2 < d1 || this.mc.objectMouseOver == null)) {
                 this.mc.objectMouseOver = new MovingObjectPosition(this.pointedEntity, vec33);
 
-                if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame)
-                {
+                if (this.pointedEntity instanceof EntityLivingBase || this.pointedEntity instanceof EntityItemFrame) {
                     this.mc.pointedEntity = this.pointedEntity;
                 }
             }
@@ -575,81 +528,65 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * Update FOV modifier hand
      */
-    private void updateFovModifierHand()
-    {
+    private void updateFovModifierHand() {
         float f = 1.0F;
 
-        if (this.mc.getRenderViewEntity() instanceof AbstractClientPlayer)
-        {
-            AbstractClientPlayer abstractclientplayer = (AbstractClientPlayer)this.mc.getRenderViewEntity();
+        if (this.mc.getRenderViewEntity() instanceof AbstractClientPlayer) {
+            AbstractClientPlayer abstractclientplayer = (AbstractClientPlayer) this.mc.getRenderViewEntity();
             f = abstractclientplayer.getFovModifier();
         }
 
         this.fovModifierHandPrev = this.fovModifierHand;
         this.fovModifierHand += (f - this.fovModifierHand) * 0.5F;
 
-        if (this.fovModifierHand > 1.5F)
-        {
+        if (this.fovModifierHand > 1.5F) {
             this.fovModifierHand = 1.5F;
         }
 
-        if (this.fovModifierHand < 0.1F)
-        {
+        if (this.fovModifierHand < 0.1F) {
             this.fovModifierHand = 0.1F;
         }
     }
 
     /**
      * Changes the field of view of the player depending on if they are underwater or not
-     *  
+     *
      * @param useFOVSetting If true the FOV set in the settings will be use in the calculation
      */
-    private float getFOVModifier(float partialTicks, boolean useFOVSetting)
-    {
-        if (this.debugView)
-        {
+    private float getFOVModifier(float partialTicks, boolean useFOVSetting) {
+        if (this.debugView) {
             return 90.0F;
-        }
-        else
-        {
+        } else {
             Entity entity = this.mc.getRenderViewEntity();
             float f = 70.0F;
 
-            if (useFOVSetting)
-            {
+            if (useFOVSetting) {
                 f = this.mc.gameSettings.fov;
 
-                if (Config.isDynamicFov())
-                {
+                if (Config.isDynamicFov()) {
                     f *= this.fovModifierHandPrev + (this.fovModifierHand - this.fovModifierHandPrev) * partialTicks;
                 }
             }
 
             boolean flag = false;
 
-            if (this.mc.currentScreen == null)
-            {
+            if (this.mc.currentScreen == null) {
                 GameSettings gamesettings = this.mc.gameSettings;
                 flag = GameSettings.isKeyDown(this.mc.gameSettings.ofKeyBindZoom);
             }
 
-            if (flag)
-            {
-                if (!Config.zoomMode)
-                {
+            if (flag) {
+                if (!Config.zoomMode) {
                     Config.zoomMode = true;
                     Config.zoomSmoothCamera = this.mc.gameSettings.debugCamEnable;
                     this.mc.gameSettings.debugCamEnable = true;
                     this.mc.renderGlobal.displayListEntitiesDirty = true;
                 }
 
-                if (Config.zoomMode)
-                {
+                if (Config.zoomMode) {
                     f /= 4.0F;
                 }
-            }
-            else if (Config.zoomMode)
-            {
+            } else if (Config.zoomMode) {
                 Config.zoomMode = false;
                 this.mc.gameSettings.debugCamEnable = Config.zoomSmoothCamera;
                 this.mouseFilterXAxis = new MouseFilter();
@@ -657,43 +594,37 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 this.mc.renderGlobal.displayListEntitiesDirty = true;
             }
 
-            if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).getHealth() <= 0.0F)
-            {
-                float f1 = (float)((EntityLivingBase)entity).deathTime + partialTicks;
+            if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).getHealth() <= 0.0F) {
+                float f1 = (float) ((EntityLivingBase) entity).deathTime + partialTicks;
                 f /= (1.0F - 500.0F / (f1 + 500.0F)) * 2.0F + 1.0F;
             }
 
             Block block = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, entity, partialTicks);
 
-            if (block.getMaterial() == Material.water)
-            {
+            if (block.getMaterial() == Material.water) {
                 f = f * 60.0F / 70.0F;
             }
 
-            return Reflector.ForgeHooksClient_getFOVModifier.exists() ? Reflector.callFloat(Reflector.ForgeHooksClient_getFOVModifier, new Object[] {this, entity, block, Float.valueOf(partialTicks), Float.valueOf(f)}): f;
+            return Reflector.ForgeHooksClient_getFOVModifier.exists() ? Reflector.callFloat(Reflector.ForgeHooksClient_getFOVModifier, new Object[]{this, entity, block, Float.valueOf(partialTicks), Float.valueOf(f)}) : f;
         }
     }
 
-    private void hurtCameraEffect(float partialTicks)
-    {
-        if (this.mc.getRenderViewEntity() instanceof EntityLivingBase)
-        {
-            EntityLivingBase entitylivingbase = (EntityLivingBase)this.mc.getRenderViewEntity();
-            float f = (float)entitylivingbase.hurtTime - partialTicks;
+    private void hurtCameraEffect(float partialTicks) {
+        if (this.mc.getRenderViewEntity() instanceof EntityLivingBase) {
+            EntityLivingBase entitylivingbase = (EntityLivingBase) this.mc.getRenderViewEntity();
+            float f = (float) entitylivingbase.hurtTime - partialTicks;
 
-            if (entitylivingbase.getHealth() <= 0.0F)
-            {
-                float f1 = (float)entitylivingbase.deathTime + partialTicks;
+            if (entitylivingbase.getHealth() <= 0.0F) {
+                float f1 = (float) entitylivingbase.deathTime + partialTicks;
                 GlStateManager.rotate(40.0F - 8000.0F / (f1 + 200.0F), 0.0F, 0.0F, 1.0F);
             }
 
-            if (f < 0.0F)
-            {
+            if (f < 0.0F) {
                 return;
             }
 
-            f = f / (float)entitylivingbase.maxHurtTime;
-            f = MathHelper.sin(f * f * f * f * (float)Math.PI);
+            f = f / (float) entitylivingbase.maxHurtTime;
+            f = MathHelper.sin(f * f * f * f * (float) Math.PI);
             float f2 = entitylivingbase.attackedAtYaw;
             GlStateManager.rotate(-f2, 0.0F, 1.0F, 0.0F);
             GlStateManager.rotate(-f * 14.0F, 0.0F, 0.0F, 1.0F);
@@ -704,18 +635,16 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * Setups all the GL settings for view bobbing. Args: partialTickTime
      */
-    private void setupViewBobbing(float partialTicks)
-    {
-        if (this.mc.getRenderViewEntity() instanceof EntityPlayer)
-        {
-            EntityPlayer entityplayer = (EntityPlayer)this.mc.getRenderViewEntity();
+    private void setupViewBobbing(float partialTicks) {
+        if (this.mc.getRenderViewEntity() instanceof EntityPlayer) {
+            EntityPlayer entityplayer = (EntityPlayer) this.mc.getRenderViewEntity();
             float f = entityplayer.distanceWalkedModified - entityplayer.prevDistanceWalkedModified;
             float f1 = -(entityplayer.distanceWalkedModified + f * partialTicks);
             float f2 = entityplayer.prevCameraYaw + (entityplayer.cameraYaw - entityplayer.prevCameraYaw) * partialTicks;
             float f3 = entityplayer.prevCameraPitch + (entityplayer.cameraPitch - entityplayer.prevCameraPitch) * partialTicks;
-            GlStateManager.translate(MathHelper.sin(f1 * (float)Math.PI) * f2 * 0.5F, -Math.abs(MathHelper.cos(f1 * (float)Math.PI) * f2), 0.0F);
-            GlStateManager.rotate(MathHelper.sin(f1 * (float)Math.PI) * f2 * 3.0F, 0.0F, 0.0F, 1.0F);
-            GlStateManager.rotate(Math.abs(MathHelper.cos(f1 * (float)Math.PI - 0.2F) * f2) * 5.0F, 1.0F, 0.0F, 0.0F);
+            GlStateManager.translate(MathHelper.sin(f1 * (float) Math.PI) * f2 * 0.5F, -Math.abs(MathHelper.cos(f1 * (float) Math.PI) * f2), 0.0F);
+            GlStateManager.rotate(MathHelper.sin(f1 * (float) Math.PI) * f2 * 3.0F, 0.0F, 0.0F, 1.0F);
+            GlStateManager.rotate(Math.abs(MathHelper.cos(f1 * (float) Math.PI - 0.2F) * f2) * 5.0F, 1.0F, 0.0F, 0.0F);
             GlStateManager.rotate(f3, 1.0F, 0.0F, 0.0F);
         }
     }
@@ -723,115 +652,94 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * sets up player's eye (or camera in third person mode)
      */
-    private void orientCamera(float partialTicks)
-    {
+    private void orientCamera(float partialTicks) {
         Entity entity = this.mc.getRenderViewEntity();
         float f = entity.getEyeHeight();
-        double d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double)partialTicks;
-        double d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)partialTicks + (double)f;
-        double d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double)partialTicks;
+        double d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double) partialTicks;
+        double d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double) partialTicks + (double) f;
+        double d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double) partialTicks;
 
-        if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPlayerSleeping())
-        {
-            f = (float)((double)f + 1.0D);
+        if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPlayerSleeping()) {
+            f = (float) ((double) f + 1.0D);
             GlStateManager.translate(0.0F, 0.3F, 0.0F);
 
-            if (!this.mc.gameSettings.fovSetting)
-            {
+            if (!this.mc.gameSettings.fovSetting) {
                 BlockPos blockpos = new BlockPos(entity);
                 IBlockState iblockstate = this.mc.theWorld.getBlockState(blockpos);
                 Block block = iblockstate.getBlock();
 
-                if (Reflector.ForgeHooksClient_orientBedCamera.exists())
-                {
-                    Reflector.callVoid(Reflector.ForgeHooksClient_orientBedCamera, new Object[] {this.mc.theWorld, blockpos, iblockstate, entity});
-                }
-                else if (block == Blocks.bed)
-                {
-                    int j = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
-                    GlStateManager.rotate((float)(j * 90), 0.0F, 1.0F, 0.0F);
+                if (Reflector.ForgeHooksClient_orientBedCamera.exists()) {
+                    Reflector.callVoid(Reflector.ForgeHooksClient_orientBedCamera, new Object[]{this.mc.theWorld, blockpos, iblockstate, entity});
+                } else if (block == Blocks.bed) {
+                    int j = ((EnumFacing) iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
+                    GlStateManager.rotate((float) (j * 90), 0.0F, 1.0F, 0.0F);
                 }
 
                 GlStateManager.rotate(entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F, 0.0F, -1.0F, 0.0F);
                 GlStateManager.rotate(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks, -1.0F, 0.0F, 0.0F);
             }
-        }
-        else if (this.mc.gameSettings.showDebugInfo > 0)
-        {
-            double d3 = (double)(this.thirdPersonDistanceTemp + (this.thirdPersonDistance - this.thirdPersonDistanceTemp) * partialTicks);
+        } else if (this.mc.gameSettings.showDebugInfo > 0) {
+            double d3 = (double) (this.thirdPersonDistanceTemp + (this.thirdPersonDistance - this.thirdPersonDistanceTemp) * partialTicks);
 
-            if (this.mc.gameSettings.fovSetting)
-            {
-                GlStateManager.translate(0.0F, 0.0F, (float)(-d3));
-            }
-            else
-            {
+            if (this.mc.gameSettings.fovSetting) {
+                GlStateManager.translate(0.0F, 0.0F, (float) (-d3));
+            } else {
                 float f1 = entity.rotationYaw;
                 float f2 = entity.rotationPitch;
 
-                if (this.mc.gameSettings.showDebugInfo == 2)
-                {
+                if (this.mc.gameSettings.showDebugInfo == 2) {
                     f2 += 180.0F;
                 }
 
-                double d4 = (double)(-MathHelper.sin(f1 / 180.0F * (float)Math.PI) * MathHelper.cos(f2 / 180.0F * (float)Math.PI)) * d3;
-                double d5 = (double)(MathHelper.cos(f1 / 180.0F * (float)Math.PI) * MathHelper.cos(f2 / 180.0F * (float)Math.PI)) * d3;
-                double d6 = (double)(-MathHelper.sin(f2 / 180.0F * (float)Math.PI)) * d3;
+                double d4 = (double) (-MathHelper.sin(f1 / 180.0F * (float) Math.PI) * MathHelper.cos(f2 / 180.0F * (float) Math.PI)) * d3;
+                double d5 = (double) (MathHelper.cos(f1 / 180.0F * (float) Math.PI) * MathHelper.cos(f2 / 180.0F * (float) Math.PI)) * d3;
+                double d6 = (double) (-MathHelper.sin(f2 / 180.0F * (float) Math.PI)) * d3;
 
-                for (int i = 0; i < 8; ++i)
-                {
-                    float f3 = (float)((i & 1) * 2 - 1);
-                    float f4 = (float)((i >> 1 & 1) * 2 - 1);
-                    float f5 = (float)((i >> 2 & 1) * 2 - 1);
+                for (int i = 0; i < 8; ++i) {
+                    float f3 = (float) ((i & 1) * 2 - 1);
+                    float f4 = (float) ((i >> 1 & 1) * 2 - 1);
+                    float f5 = (float) ((i >> 2 & 1) * 2 - 1);
                     f3 = f3 * 0.1F;
                     f4 = f4 * 0.1F;
                     f5 = f5 * 0.1F;
-                    MovingObjectPosition movingobjectposition = this.mc.theWorld.rayTraceBlocks(new Vec3(d0 + (double)f3, d1 + (double)f4, d2 + (double)f5), new Vec3(d0 - d4 + (double)f3 + (double)f5, d1 - d6 + (double)f4, d2 - d5 + (double)f5));
+                    MovingObjectPosition movingobjectposition = this.mc.theWorld.rayTraceBlocks(new Vec3(d0 + (double) f3, d1 + (double) f4, d2 + (double) f5), new Vec3(d0 - d4 + (double) f3 + (double) f5, d1 - d6 + (double) f4, d2 - d5 + (double) f5));
 
-                    if (movingobjectposition != null)
-                    {
+                    if (movingobjectposition != null) {
                         double d7 = movingobjectposition.hitVec.distanceTo(new Vec3(d0, d1, d2));
 
-                        if (d7 < d3)
-                        {
+                        if (d7 < d3) {
                             d3 = d7;
                         }
                     }
                 }
 
-                if (this.mc.gameSettings.showDebugInfo == 2)
-                {
+                if (this.mc.gameSettings.showDebugInfo == 2) {
                     GlStateManager.rotate(180.0F, 0.0F, 1.0F, 0.0F);
                 }
 
                 GlStateManager.rotate(entity.rotationPitch - f2, 1.0F, 0.0F, 0.0F);
                 GlStateManager.rotate(entity.rotationYaw - f1, 0.0F, 1.0F, 0.0F);
-                GlStateManager.translate(0.0F, 0.0F, (float)(-d3));
+                GlStateManager.translate(0.0F, 0.0F, (float) (-d3));
                 GlStateManager.rotate(f1 - entity.rotationYaw, 0.0F, 1.0F, 0.0F);
                 GlStateManager.rotate(f2 - entity.rotationPitch, 1.0F, 0.0F, 0.0F);
             }
-        }
-        else
-        {
+        } else {
             GlStateManager.translate(0.0F, 0.0F, -0.1F);
         }
 
-        if (Reflector.EntityViewRenderEvent_CameraSetup_Constructor.exists())
-        {
-            if (!this.mc.gameSettings.fovSetting)
-            {
+        if (Reflector.EntityViewRenderEvent_CameraSetup_Constructor.exists()) {
+            if (!this.mc.gameSettings.fovSetting) {
                 float f6 = entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F;
                 float f7 = entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks;
                 float f8 = 0.0F;
 
-                if (entity instanceof EntityAnimal)
-                {
-                    EntityAnimal entityanimal1 = (EntityAnimal)entity;
+                if (entity instanceof EntityAnimal) {
+                    EntityAnimal entityanimal1 = (EntityAnimal) entity;
                     f6 = entityanimal1.prevRotationYawHead + (entityanimal1.rotationYawHead - entityanimal1.prevRotationYawHead) * partialTicks + 180.0F;
                 }
 
                 Block block1 = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, entity, partialTicks);
-                Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_CameraSetup_Constructor, new Object[] {this, entity, block1, Float.valueOf(partialTicks), Float.valueOf(f6), Float.valueOf(f7), Float.valueOf(f8)});
+                Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_CameraSetup_Constructor, new Object[]{this, entity, block1, Float.valueOf(partialTicks), Float.valueOf(f6), Float.valueOf(f7), Float.valueOf(f8)});
                 Reflector.postForgeBusEvent(object);
                 f8 = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_roll, f8);
                 f7 = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_CameraSetup_pitch, f7);
@@ -840,43 +748,35 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 GlStateManager.rotate(f7, 1.0F, 0.0F, 0.0F);
                 GlStateManager.rotate(f6, 0.0F, 1.0F, 0.0F);
             }
-        }
-        else if (!this.mc.gameSettings.fovSetting)
-        {
+        } else if (!this.mc.gameSettings.fovSetting) {
             GlStateManager.rotate(entity.prevRotationPitch + (entity.rotationPitch - entity.prevRotationPitch) * partialTicks, 1.0F, 0.0F, 0.0F);
 
-            if (entity instanceof EntityAnimal)
-            {
-                EntityAnimal entityanimal = (EntityAnimal)entity;
+            if (entity instanceof EntityAnimal) {
+                EntityAnimal entityanimal = (EntityAnimal) entity;
                 GlStateManager.rotate(entityanimal.prevRotationYawHead + (entityanimal.rotationYawHead - entityanimal.prevRotationYawHead) * partialTicks + 180.0F, 0.0F, 1.0F, 0.0F);
-            }
-            else
-            {
+            } else {
                 GlStateManager.rotate(entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks + 180.0F, 0.0F, 1.0F, 0.0F);
             }
         }
 
         GlStateManager.translate(0.0F, -f, 0.0F);
-        d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double)partialTicks;
-        d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double)partialTicks + (double)f;
-        d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double)partialTicks;
+        d0 = entity.prevPosX + (entity.posX - entity.prevPosX) * (double) partialTicks;
+        d1 = entity.prevPosY + (entity.posY - entity.prevPosY) * (double) partialTicks + (double) f;
+        d2 = entity.prevPosZ + (entity.posZ - entity.prevPosZ) * (double) partialTicks;
         this.cloudFog = this.mc.renderGlobal.hasCloudFog(d0, d1, d2, partialTicks);
     }
 
     /**
      * sets up projection, view effects, camera position/rotation
      */
-    public void setupCameraTransform(float partialTicks, int pass)
-    {
-        this.farPlaneDistance = (float)(this.mc.gameSettings.renderDistanceChunks * 16);
+    public void setupCameraTransform(float partialTicks, int pass) {
+        this.farPlaneDistance = (float) (this.mc.gameSettings.renderDistanceChunks * 16);
 
-        if (Config.isFogFancy())
-        {
+        if (Config.isFogFancy()) {
             this.farPlaneDistance *= 0.95F;
         }
 
-        if (Config.isFogFast())
-        {
+        if (Config.isFogFast()) {
             this.farPlaneDistance *= 0.83F;
         }
 
@@ -884,64 +784,55 @@ public class EntityRenderer implements IResourceManagerReloadListener
         GlStateManager.loadIdentity();
         float f = 0.07F;
 
-        if (this.mc.gameSettings.anaglyph)
-        {
-            GlStateManager.translate((float)(-(pass * 2 - 1)) * f, 0.0F, 0.0F);
+        if (this.mc.gameSettings.anaglyph) {
+            GlStateManager.translate((float) (-(pass * 2 - 1)) * f, 0.0F, 0.0F);
         }
 
         this.clipDistance = this.farPlaneDistance * 2.0F;
 
-        if (this.clipDistance < 173.0F)
-        {
+        if (this.clipDistance < 173.0F) {
             this.clipDistance = 173.0F;
         }
 
-        if (this.cameraZoom != 1.0D)
-        {
-            GlStateManager.translate((float)this.cameraYaw, (float)(-this.cameraPitch), 0.0F);
+        if (this.cameraZoom != 1.0D) {
+            GlStateManager.translate((float) this.cameraYaw, (float) (-this.cameraPitch), 0.0F);
             GlStateManager.scale(this.cameraZoom, this.cameraZoom, 1.0D);
         }
 
-        Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
+        Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.clipDistance);
         GlStateManager.matrixMode(5888);
         GlStateManager.loadIdentity();
 
-        if (this.mc.gameSettings.anaglyph)
-        {
-            GlStateManager.translate((float)(pass * 2 - 1) * 0.1F, 0.0F, 0.0F);
+        if (this.mc.gameSettings.anaglyph) {
+            GlStateManager.translate((float) (pass * 2 - 1) * 0.1F, 0.0F, 0.0F);
         }
 
         this.hurtCameraEffect(partialTicks);
 
-        if (this.mc.gameSettings.viewBobbing)
-        {
+        if (this.mc.gameSettings.viewBobbing) {
             this.setupViewBobbing(partialTicks);
         }
 
         float f1 = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * partialTicks;
 
-        if (f1 > 0.0F)
-        {
+        if (f1 > 0.0F) {
             int i = 20;
 
-            if (this.mc.thePlayer.isPotionActive(Potion.confusion))
-            {
+            if (this.mc.thePlayer.isPotionActive(Potion.confusion)) {
                 i = 7;
             }
 
             float f2 = 5.0F / (f1 * f1 + 5.0F) - f1 * 0.04F;
             f2 = f2 * f2;
-            GlStateManager.rotate(((float)this.rendererUpdateCount + partialTicks) * (float)i, 0.0F, 1.0F, 1.0F);
+            GlStateManager.rotate(((float) this.rendererUpdateCount + partialTicks) * (float) i, 0.0F, 1.0F, 1.0F);
             GlStateManager.scale(1.0F / f2, 1.0F, 1.0F);
-            GlStateManager.rotate(-((float)this.rendererUpdateCount + partialTicks) * (float)i, 0.0F, 1.0F, 1.0F);
+            GlStateManager.rotate(-((float) this.rendererUpdateCount + partialTicks) * (float) i, 0.0F, 1.0F, 1.0F);
         }
 
         this.orientCamera(partialTicks);
 
-        if (this.debugView)
-        {
-            switch (this.debugViewDirection)
-            {
+        if (this.debugView) {
+            switch (this.debugViewDirection) {
                 case 0:
                     GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
                     break;
@@ -967,63 +858,51 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * Render player hand
      */
-    private void renderHand(float partialTicks, int xOffset)
-    {
+    private void renderHand(float partialTicks, int xOffset) {
         this.renderHand(partialTicks, xOffset, true, true, false);
     }
 
-    public void renderHand(float p_renderHand_1_, int p_renderHand_2_, boolean p_renderHand_3_, boolean p_renderHand_4_, boolean p_renderHand_5_)
-    {
-        if (!this.debugView)
-        {
+    public void renderHand(float p_renderHand_1_, int p_renderHand_2_, boolean p_renderHand_3_, boolean p_renderHand_4_, boolean p_renderHand_5_) {
+        if (!this.debugView) {
             GlStateManager.matrixMode(5889);
             GlStateManager.loadIdentity();
             float f = 0.07F;
 
-            if (this.mc.gameSettings.anaglyph)
-            {
-                GlStateManager.translate((float)(-(p_renderHand_2_ * 2 - 1)) * f, 0.0F, 0.0F);
+            if (this.mc.gameSettings.anaglyph) {
+                GlStateManager.translate((float) (-(p_renderHand_2_ * 2 - 1)) * f, 0.0F, 0.0F);
             }
 
-            if (Config.isShaders())
-            {
+            if (Config.isShaders()) {
                 Shaders.applyHandDepth();
             }
 
-            Project.gluPerspective(this.getFOVModifier(p_renderHand_1_, false), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
+            Project.gluPerspective(this.getFOVModifier(p_renderHand_1_, false), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.farPlaneDistance * 2.0F);
             GlStateManager.matrixMode(5888);
             GlStateManager.loadIdentity();
 
-            if (this.mc.gameSettings.anaglyph)
-            {
-                GlStateManager.translate((float)(p_renderHand_2_ * 2 - 1) * 0.1F, 0.0F, 0.0F);
+            if (this.mc.gameSettings.anaglyph) {
+                GlStateManager.translate((float) (p_renderHand_2_ * 2 - 1) * 0.1F, 0.0F, 0.0F);
             }
 
             boolean flag = false;
 
-            if (p_renderHand_3_)
-            {
+            if (p_renderHand_3_) {
                 GlStateManager.pushMatrix();
                 this.hurtCameraEffect(p_renderHand_1_);
 
-                if (this.mc.gameSettings.viewBobbing)
-                {
+                if (this.mc.gameSettings.viewBobbing) {
                     this.setupViewBobbing(p_renderHand_1_);
                 }
 
-                flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
+                flag = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase) this.mc.getRenderViewEntity()).isPlayerSleeping();
                 boolean flag1 = !ReflectorForge.renderFirstPersonHand(this.mc.renderGlobal, p_renderHand_1_, p_renderHand_2_);
 
-                if (flag1 && this.mc.gameSettings.showDebugInfo == 0 && !flag && !this.mc.gameSettings.thirdPersonView && !this.mc.playerController.isSpectator())
-                {
+                if (flag1 && this.mc.gameSettings.showDebugInfo == 0 && !flag && !this.mc.gameSettings.thirdPersonView && !this.mc.playerController.isSpectator()) {
                     this.enableLightmap();
 
-                    if (Config.isShaders())
-                    {
+                    if (Config.isShaders()) {
                         ShadersRender.renderItemFP(this.itemRenderer, p_renderHand_1_, p_renderHand_5_);
-                    }
-                    else
-                    {
+                    } else {
                         this.itemRenderer.renderItemInFirstPerson(p_renderHand_1_);
                     }
 
@@ -1033,40 +912,34 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 GlStateManager.popMatrix();
             }
 
-            if (!p_renderHand_4_)
-            {
+            if (!p_renderHand_4_) {
                 return;
             }
 
             this.disableLightmap();
 
-            if (this.mc.gameSettings.showDebugInfo == 0 && !flag)
-            {
+            if (this.mc.gameSettings.showDebugInfo == 0 && !flag) {
                 this.itemRenderer.renderOverlays(p_renderHand_1_);
                 this.hurtCameraEffect(p_renderHand_1_);
             }
 
-            if (this.mc.gameSettings.viewBobbing)
-            {
+            if (this.mc.gameSettings.viewBobbing) {
                 this.setupViewBobbing(p_renderHand_1_);
             }
         }
     }
 
-    public void disableLightmap()
-    {
+    public void disableLightmap() {
         GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
         GlStateManager.disableTexture2D();
         GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
 
-        if (Config.isShaders())
-        {
+        if (Config.isShaders()) {
             Shaders.disableLightmap();
         }
     }
 
-    public void enableLightmap()
-    {
+    public void enableLightmap() {
         GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
         GlStateManager.matrixMode(5890);
         GlStateManager.loadIdentity();
@@ -1083,8 +956,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
         GlStateManager.enableTexture2D();
         GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
 
-        if (Config.isShaders())
-        {
+        if (Config.isShaders()) {
             Shaders.enableLightmap();
         }
     }
@@ -1092,25 +964,20 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * Recompute a random value that is applied to block color in updateLightmap()
      */
-    private void updateTorchFlicker()
-    {
-        this.torchFlickerDX = (float)((double)this.torchFlickerDX + (Math.random() - Math.random()) * Math.random() * Math.random());
-        this.torchFlickerDX = (float)((double)this.torchFlickerDX * 0.9D);
+    private void updateTorchFlicker() {
+        this.torchFlickerDX = (float) ((double) this.torchFlickerDX + (Math.random() - Math.random()) * Math.random() * Math.random());
+        this.torchFlickerDX = (float) ((double) this.torchFlickerDX * 0.9D);
         this.torchFlickerX += (this.torchFlickerDX - this.torchFlickerX) * 1.0F;
         this.lightmapUpdateNeeded = true;
     }
 
-    private void updateLightmap(float partialTicks)
-    {
-        if (this.lightmapUpdateNeeded)
-        {
+    private void updateLightmap(float partialTicks) {
+        if (this.lightmapUpdateNeeded) {
             this.mc.mcProfiler.startSection("lightTex");
             World world = this.mc.theWorld;
 
-            if (world != null)
-            {
-                if (Config.isCustomColors() && CustomColors.updateLightmap(world, this.torchFlickerX, this.lightmapColors, this.mc.thePlayer.isPotionActive(Potion.nightVision), partialTicks))
-                {
+            if (world != null) {
+                if (Config.isCustomColors() && CustomColors.updateLightmap(world, this.torchFlickerX, this.lightmapColors, this.mc.thePlayer.isPotionActive(Potion.nightVision), partialTicks)) {
                     this.lightmapTexture.updateDynamicTexture();
                     this.lightmapUpdateNeeded = false;
                     this.mc.mcProfiler.endSection();
@@ -1120,13 +987,11 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 float f = world.getSunBrightness(1.0F);
                 float f1 = f * 0.95F + 0.05F;
 
-                for (int i = 0; i < 256; ++i)
-                {
+                for (int i = 0; i < 256; ++i) {
                     float f2 = world.provider.getLightBrightnessTable()[i / 16] * f1;
                     float f3 = world.provider.getLightBrightnessTable()[i % 16] * (this.torchFlickerX * 0.1F + 1.5F);
 
-                    if (world.getLastLightningBolt() > 0)
-                    {
+                    if (world.getLastLightningBolt() > 0) {
                         f2 = world.provider.getLightBrightnessTable()[i / 16];
                     }
 
@@ -1141,33 +1006,28 @@ public class EntityRenderer implements IResourceManagerReloadListener
                     f9 = f9 * 0.96F + 0.03F;
                     f10 = f10 * 0.96F + 0.03F;
 
-                    if (this.bossColorModifier > 0.0F)
-                    {
+                    if (this.bossColorModifier > 0.0F) {
                         float f11 = this.bossColorModifierPrev + (this.bossColorModifier - this.bossColorModifierPrev) * partialTicks;
                         f8 = f8 * (1.0F - f11) + f8 * 0.7F * f11;
                         f9 = f9 * (1.0F - f11) + f9 * 0.6F * f11;
                         f10 = f10 * (1.0F - f11) + f10 * 0.6F * f11;
                     }
 
-                    if (world.provider.getDimensionId() == 1)
-                    {
+                    if (world.provider.getDimensionId() == 1) {
                         f8 = 0.22F + f3 * 0.75F;
                         f9 = 0.28F + f6 * 0.75F;
                         f10 = 0.25F + f7 * 0.75F;
                     }
 
-                    if (this.mc.thePlayer.isPotionActive(Potion.nightVision))
-                    {
+                    if (this.mc.thePlayer.isPotionActive(Potion.nightVision)) {
                         float f15 = this.getNightVisionBrightness(this.mc.thePlayer, partialTicks);
                         float f12 = 1.0F / f8;
 
-                        if (f12 > 1.0F / f9)
-                        {
+                        if (f12 > 1.0F / f9) {
                             f12 = 1.0F / f9;
                         }
 
-                        if (f12 > 1.0F / f10)
-                        {
+                        if (f12 > 1.0F / f10) {
                             f12 = 1.0F / f10;
                         }
 
@@ -1176,18 +1036,15 @@ public class EntityRenderer implements IResourceManagerReloadListener
                         f10 = f10 * (1.0F - f15) + f10 * f12 * f15;
                     }
 
-                    if (f8 > 1.0F)
-                    {
+                    if (f8 > 1.0F) {
                         f8 = 1.0F;
                     }
 
-                    if (f9 > 1.0F)
-                    {
+                    if (f9 > 1.0F) {
                         f9 = 1.0F;
                     }
 
-                    if (f10 > 1.0F)
-                    {
+                    if (f10 > 1.0F) {
                         f10 = 1.0F;
                     }
 
@@ -1205,40 +1062,34 @@ public class EntityRenderer implements IResourceManagerReloadListener
                     f9 = f9 * 0.96F + 0.03F;
                     f10 = f10 * 0.96F + 0.03F;
 
-                    if (f8 > 1.0F)
-                    {
+                    if (f8 > 1.0F) {
                         f8 = 1.0F;
                     }
 
-                    if (f9 > 1.0F)
-                    {
+                    if (f9 > 1.0F) {
                         f9 = 1.0F;
                     }
 
-                    if (f10 > 1.0F)
-                    {
+                    if (f10 > 1.0F) {
                         f10 = 1.0F;
                     }
 
-                    if (f8 < 0.0F)
-                    {
+                    if (f8 < 0.0F) {
                         f8 = 0.0F;
                     }
 
-                    if (f9 < 0.0F)
-                    {
+                    if (f9 < 0.0F) {
                         f9 = 0.0F;
                     }
 
-                    if (f10 < 0.0F)
-                    {
+                    if (f10 < 0.0F) {
                         f10 = 0.0F;
                     }
 
                     int j = 255;
-                    int k = (int)(f8 * 255.0F);
-                    int l = (int)(f9 * 255.0F);
-                    int i1 = (int)(f10 * 255.0F);
+                    int k = (int) (f8 * 255.0F);
+                    int l = (int) (f9 * 255.0F);
+                    int i1 = (int) (f10 * 255.0F);
                     this.lightmapColors[i] = j << 24 | k << 16 | l << 8 | i1;
                 }
 
@@ -1249,75 +1100,62 @@ public class EntityRenderer implements IResourceManagerReloadListener
         }
     }
 
-    public float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float partialTicks)
-    {
+    public float getNightVisionBrightness(EntityLivingBase entitylivingbaseIn, float partialTicks) {
         int i = entitylivingbaseIn.getActivePotionEffect(Potion.nightVision).getDuration();
-        return i > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)i - partialTicks) * (float)Math.PI * 0.2F) * 0.3F;
+        return i > 200 ? 1.0F : 0.7F + MathHelper.sin(((float) i - partialTicks) * (float) Math.PI * 0.2F) * 0.3F;
     }
 
-    public void updateCameraAndRender(float partialTicks, long nanoTime)
-    {
+    public void updateCameraAndRender(float partialTicks, long nanoTime) {
         Config.renderPartialTicks = partialTicks;
         this.frameInit();
         boolean flag = Display.isActive();
 
-        if (!flag && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1)))
-        {
-            if (Minecraft.getSystemTime() - this.prevFrameTime > 500L)
-            {
+        if (!flag && this.mc.gameSettings.pauseOnLostFocus && (!this.mc.gameSettings.touchscreen || !Mouse.isButtonDown(1))) {
+            if (Minecraft.getSystemTime() - this.prevFrameTime > 500L) {
                 this.mc.displayInGameMenu();
             }
-        }
-        else
-        {
+        } else {
             this.prevFrameTime = Minecraft.getSystemTime();
         }
 
         this.mc.mcProfiler.startSection("mouse");
 
-        if (flag && Minecraft.isRunningOnMac && this.mc.inGameHasFocus && !Mouse.isInsideWindow())
-        {
+        if (flag && Minecraft.isRunningOnMac && this.mc.inGameHasFocus && !Mouse.isInsideWindow()) {
             Mouse.setGrabbed(false);
             Mouse.setCursorPosition(Display.getWidth() / 2, Display.getHeight() / 2);
             Mouse.setGrabbed(true);
         }
 
-        if (this.mc.inGameHasFocus && flag)
-        {
+        if (this.mc.inGameHasFocus && flag) {
             this.mc.mouseHelper.mouseXYChange();
             float f = this.mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
             float f1 = f * f * f * 8.0F;
-            float f2 = (float)this.mc.mouseHelper.deltaX * f1;
-            float f3 = (float)this.mc.mouseHelper.deltaY * f1;
+            float f2 = (float) this.mc.mouseHelper.deltaX * f1;
+            float f3 = (float) this.mc.mouseHelper.deltaY * f1;
             int i = 1;
 
-            if (this.mc.gameSettings.invertMouse)
-            {
+            if (this.mc.gameSettings.invertMouse) {
                 i = -1;
             }
 
-            if (this.mc.gameSettings.debugCamEnable)
-            {
+            if (this.mc.gameSettings.debugCamEnable) {
                 this.smoothCamYaw += f2;
                 this.smoothCamPitch += f3;
                 float f4 = partialTicks - this.smoothCamPartialTicks;
                 this.smoothCamPartialTicks = partialTicks;
                 f2 = this.smoothCamFilterX * f4;
                 f3 = this.smoothCamFilterY * f4;
-                this.mc.thePlayer.setAngles(f2, f3 * (float)i);
-            }
-            else
-            {
+                this.mc.thePlayer.setAngles(f2, f3 * (float) i);
+            } else {
                 this.smoothCamYaw = 0.0F;
                 this.smoothCamPitch = 0.0F;
-                this.mc.thePlayer.setAngles(f2, f3 * (float)i);
+                this.mc.thePlayer.setAngles(f2, f3 * (float) i);
             }
         }
 
         this.mc.mcProfiler.endSection();
 
-        if (!this.mc.skipRenderWorld)
-        {
+        if (!this.mc.skipRenderWorld) {
             anaglyphEnable = this.mc.gameSettings.anaglyph;
             final ScaledResolution scaledresolution = new ScaledResolution(this.mc);
             int i1 = scaledresolution.getScaledWidth();
@@ -1326,21 +1164,18 @@ public class EntityRenderer implements IResourceManagerReloadListener
             final int l1 = j1 - Mouse.getY() * j1 / this.mc.displayHeight - 1;
             int i2 = this.mc.gameSettings.limitFramerate;
 
-            if (this.mc.theWorld != null)
-            {
+            if (this.mc.theWorld != null) {
                 this.mc.mcProfiler.startSection("level");
                 int j = Math.min(Minecraft.getDebugFPS(), i2);
                 j = Math.max(j, 60);
                 long k = System.nanoTime() - nanoTime;
-                long l = Math.max((long)(1000000000 / j / 4) - k, 0L);
+                long l = Math.max((long) (1000000000 / j / 4) - k, 0L);
                 this.renderWorld(partialTicks, System.nanoTime() + l);
 
-                if (OpenGlHelper.shadersSupported)
-                {
+                if (OpenGlHelper.shadersSupported) {
                     this.mc.renderGlobal.renderEntityOutlineFramebuffer();
 
-                    if (this.theShaderGroup != null && this.useShader)
-                    {
+                    if (this.theShaderGroup != null && this.useShader) {
                         GlStateManager.matrixMode(5890);
                         GlStateManager.pushMatrix();
                         GlStateManager.loadIdentity();
@@ -1354,26 +1189,21 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 this.renderEndNanoTime = System.nanoTime();
                 this.mc.mcProfiler.endStartSection("gui");
 
-                if (!this.mc.gameSettings.thirdPersonView || this.mc.currentScreen != null)
-                {
+                if (!this.mc.gameSettings.thirdPersonView || this.mc.currentScreen != null) {
                     GlStateManager.alphaFunc(516, 0.1F);
                     this.mc.ingameGUI.renderGameOverlay(partialTicks);
 
-                    if (this.mc.gameSettings.ofShowFps && !this.mc.gameSettings.showDebugProfilerChart)
-                    {
+                    if (this.mc.gameSettings.ofShowFps && !this.mc.gameSettings.showDebugProfilerChart) {
                         Config.drawFps();
                     }
 
-                    if (this.mc.gameSettings.showDebugProfilerChart)
-                    {
+                    if (this.mc.gameSettings.showDebugProfilerChart) {
                         Lagometer.showLagometer(scaledresolution);
                     }
                 }
 
                 this.mc.mcProfiler.endSection();
-            }
-            else
-            {
+            } else {
                 GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
                 GlStateManager.matrixMode(5889);
                 GlStateManager.loadIdentity();
@@ -1385,49 +1215,37 @@ public class EntityRenderer implements IResourceManagerReloadListener
                 TileEntityRendererDispatcher.instance.fontRenderer = this.mc.fontRendererObj;
             }
 
-            if (this.mc.currentScreen != null)
-            {
+            if (this.mc.currentScreen != null) {
                 GlStateManager.clear(256);
 
-                try
-                {
-                    if (Reflector.ForgeHooksClient_drawScreen.exists())
-                    {
-                        Reflector.callVoid(Reflector.ForgeHooksClient_drawScreen, new Object[] {this.mc.currentScreen, Integer.valueOf(k1), Integer.valueOf(l1), Float.valueOf(partialTicks)});
-                    }
-                    else
-                    {
+                try {
+                    if (Reflector.ForgeHooksClient_drawScreen.exists()) {
+                        Reflector.callVoid(Reflector.ForgeHooksClient_drawScreen, new Object[]{this.mc.currentScreen, Integer.valueOf(k1), Integer.valueOf(l1), Float.valueOf(partialTicks)});
+                    } else {
                         this.mc.currentScreen.drawScreen(k1, l1, partialTicks);
                     }
-                }
-                catch (Throwable throwable)
-                {
+                } catch (Throwable throwable) {
                     CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Rendering screen");
                     CrashReportCategory crashreportcategory = crashreport.makeCategory("Screen render details");
-                    crashreportcategory.addCrashSectionCallable("Screen name", new Callable<String>()
-                    {
-                        public String call() throws Exception
-                        {
+                    crashreportcategory.addCrashSectionCallable("Screen name", new Callable<String>() {
+                        public String call() throws Exception {
                             return EntityRenderer.this.mc.currentScreen.getClass().getCanonicalName();
                         }
                     });
-                    crashreportcategory.addCrashSectionCallable("Mouse location", new Callable<String>()
-                    {
-                        public String call() throws Exception
-                        {
-                            return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", new Object[] {Integer.valueOf(k1), Integer.valueOf(l1), Integer.valueOf(Mouse.getX()), Integer.valueOf(Mouse.getY())});
+                    crashreportcategory.addCrashSectionCallable("Mouse location", new Callable<String>() {
+                        public String call() throws Exception {
+                            return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", new Object[]{Integer.valueOf(k1), Integer.valueOf(l1), Integer.valueOf(Mouse.getX()), Integer.valueOf(Mouse.getY())});
                         }
                     });
-                    crashreportcategory.addCrashSectionCallable("Screen size", new Callable<String>()
-                    {
-                        public String call() throws Exception
-                        {
-                            return String.format("Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %d", new Object[] {Integer.valueOf(scaledresolution.getScaledWidth()), Integer.valueOf(scaledresolution.getScaledHeight()), Integer.valueOf(EntityRenderer.this.mc.displayWidth), Integer.valueOf(EntityRenderer.this.mc.displayHeight), Integer.valueOf(scaledresolution.getScaleFactor())});
+                    crashreportcategory.addCrashSectionCallable("Screen size", new Callable<String>() {
+                        public String call() throws Exception {
+                            return String.format("Scaled: (%d, %d). Absolute: (%d, %d). Scale factor of %d", new Object[]{Integer.valueOf(scaledresolution.getScaledWidth()), Integer.valueOf(scaledresolution.getScaledHeight()), Integer.valueOf(EntityRenderer.this.mc.displayWidth), Integer.valueOf(EntityRenderer.this.mc.displayHeight), Integer.valueOf(scaledresolution.getScaleFactor())});
                         }
                     });
                     throw new ReportedException(crashreport);
                 }
             }
+
         }
 
         this.frameFinish();
@@ -1435,44 +1253,33 @@ public class EntityRenderer implements IResourceManagerReloadListener
         MemoryMonitor.update();
         Lagometer.updateLagometer();
 
-        if (this.mc.gameSettings.ofProfiler)
-        {
+        if (this.mc.gameSettings.ofProfiler) {
             this.mc.gameSettings.showLagometer = true;
         }
     }
 
-    public void renderStreamIndicator(float partialTicks)
-    {
+    public void renderStreamIndicator(float partialTicks) {
         this.setupOverlayRendering();
     }
 
-    private boolean isDrawBlockOutline()
-    {
-        if (!this.drawBlockOutline)
-        {
+    private boolean isDrawBlockOutline() {
+        if (!this.drawBlockOutline) {
             return false;
-        }
-        else
-        {
+        } else {
             Entity entity = this.mc.getRenderViewEntity();
             boolean flag = entity instanceof EntityPlayer && !this.mc.gameSettings.thirdPersonView;
 
-            if (flag && !((EntityPlayer)entity).capabilities.allowEdit)
-            {
-                ItemStack itemstack = ((EntityPlayer)entity).getCurrentEquippedItem();
+            if (flag && !((EntityPlayer) entity).capabilities.allowEdit) {
+                ItemStack itemstack = ((EntityPlayer) entity).getCurrentEquippedItem();
 
-                if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK)
-                {
+                if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
                     BlockPos blockpos = this.mc.objectMouseOver.getBlockPos();
                     IBlockState iblockstate = this.mc.theWorld.getBlockState(blockpos);
                     Block block = iblockstate.getBlock();
 
-                    if (this.mc.playerController.getCurrentGameType() == WorldSettings.GameType.SPECTATOR)
-                    {
+                    if (this.mc.playerController.getCurrentGameType() == WorldSettings.GameType.SPECTATOR) {
                         flag = ReflectorForge.blockHasTileEntity(iblockstate) && this.mc.theWorld.getTileEntity(blockpos) instanceof IInventory;
-                    }
-                    else
-                    {
+                    } else {
                         flag = itemstack != null && (itemstack.canDestroy(block) || itemstack.canPlaceOn(block));
                     }
                 }
@@ -1482,10 +1289,8 @@ public class EntityRenderer implements IResourceManagerReloadListener
         }
     }
 
-    private void renderWorldDirections(float partialTicks)
-    {
-        if (this.mc.gameSettings.showDebugProfilerChart && !this.mc.gameSettings.thirdPersonView && !this.mc.thePlayer.hasReducedDebug() && !this.mc.gameSettings.reducedDebugInfo)
-        {
+    private void renderWorldDirections(float partialTicks) {
+        if (this.mc.gameSettings.showDebugProfilerChart && !this.mc.gameSettings.thirdPersonView && !this.mc.thePlayer.hasReducedDebug() && !this.mc.gameSettings.reducedDebugInfo) {
             Entity entity = this.mc.getRenderViewEntity();
             GlStateManager.enableBlend();
             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
@@ -1507,19 +1312,16 @@ public class EntityRenderer implements IResourceManagerReloadListener
         }
     }
 
-    public void renderWorld(float partialTicks, long finishTimeNano)
-    {
+    public void renderWorld(float partialTicks, long finishTimeNano) {
         this.updateLightmap(partialTicks);
 
-        if (this.mc.getRenderViewEntity() == null)
-        {
+        if (this.mc.getRenderViewEntity() == null) {
             this.mc.setRenderViewEntity(this.mc.thePlayer);
         }
 
         this.getMouseOver(partialTicks);
 
-        if (Config.isShaders())
-        {
+        if (Config.isShaders()) {
             Shaders.beginRender(this.mc, partialTicks, finishTimeNano);
         }
 
@@ -1528,8 +1330,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
         GlStateManager.alphaFunc(516, 0.1F);
         this.mc.mcProfiler.startSection("center");
 
-        if (this.mc.gameSettings.anaglyph)
-        {
+        if (this.mc.gameSettings.anaglyph) {
             anaglyphField = 0;
             GlStateManager.colorMask(false, true, true, false);
             this.renderWorldPass(0, partialTicks, finishTimeNano);
@@ -1537,21 +1338,17 @@ public class EntityRenderer implements IResourceManagerReloadListener
             GlStateManager.colorMask(true, false, false, false);
             this.renderWorldPass(1, partialTicks, finishTimeNano);
             GlStateManager.colorMask(true, true, true, false);
-        }
-        else
-        {
+        } else {
             this.renderWorldPass(2, partialTicks, finishTimeNano);
         }
 
         this.mc.mcProfiler.endSection();
     }
 
-    private void renderWorldPass(int pass, float partialTicks, long finishTimeNano)
-    {
+    private void renderWorldPass(int pass, float partialTicks, long finishTimeNano) {
         boolean flag = Config.isShaders();
 
-        if (flag)
-        {
+        if (flag) {
             Shaders.beginRenderPass(pass, partialTicks, finishTimeNano);
         }
 
@@ -1561,28 +1358,23 @@ public class EntityRenderer implements IResourceManagerReloadListener
         GlStateManager.enableCull();
         this.mc.mcProfiler.endStartSection("clear");
 
-        if (flag)
-        {
+        if (flag) {
             Shaders.setViewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
-        }
-        else
-        {
+        } else {
             GlStateManager.viewport(0, 0, this.mc.displayWidth, this.mc.displayHeight);
         }
 
         this.updateFogColor(partialTicks);
         GlStateManager.clear(16640);
 
-        if (flag)
-        {
+        if (flag) {
             Shaders.clearRenderBuffer();
         }
 
         this.mc.mcProfiler.endStartSection("camera");
         this.setupCameraTransform(partialTicks, pass);
 
-        if (flag)
-        {
+        if (flag) {
             Shaders.setCamera(partialTicks);
         }
 
@@ -1593,55 +1385,46 @@ public class EntityRenderer implements IResourceManagerReloadListener
         clippinghelper.disabled = Config.isShaders() && !Shaders.isFrustumCulling();
         ICamera icamera = new Frustum(clippinghelper);
         Entity entity = this.mc.getRenderViewEntity();
-        double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
-        double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
-        double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
+        double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double) partialTicks;
+        double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double) partialTicks;
+        double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double) partialTicks;
 
-        if (flag)
-        {
+        if (flag) {
             ShadersRender.setFrustrumPosition(icamera, d0, d1, d2);
-        }
-        else
-        {
+        } else {
             icamera.setPosition(d0, d1, d2);
         }
 
-        if ((Config.isSkyEnabled() || Config.isSunMoonEnabled() || Config.isStarsEnabled()) && !Shaders.isShadowPass)
-        {
+        if ((Config.isSkyEnabled() || Config.isSunMoonEnabled() || Config.isStarsEnabled()) && !Shaders.isShadowPass) {
             this.setupFog(-1, partialTicks);
             this.mc.mcProfiler.endStartSection("sky");
             GlStateManager.matrixMode(5889);
             GlStateManager.loadIdentity();
-            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
+            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.clipDistance);
             GlStateManager.matrixMode(5888);
 
-            if (flag)
-            {
+            if (flag) {
                 Shaders.beginSky();
             }
 
             renderglobal.renderSky(partialTicks, pass);
 
-            if (flag)
-            {
+            if (flag) {
                 Shaders.endSky();
             }
 
             GlStateManager.matrixMode(5889);
             GlStateManager.loadIdentity();
-            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
+            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.clipDistance);
             GlStateManager.matrixMode(5888);
-        }
-        else
-        {
+        } else {
             GlStateManager.disableBlend();
         }
 
         this.setupFog(0, partialTicks);
         GlStateManager.shadeModel(7425);
 
-        if (entity.posY + (double)entity.getEyeHeight() < 128.0D + (double)(this.mc.gameSettings.ofCloudsHeight * 128.0F))
-        {
+        if (entity.posY + (double) entity.getEyeHeight() < 128.0D + (double) (this.mc.gameSettings.ofCloudsHeight * 128.0F)) {
             this.renderCloudsCheck(renderglobal, partialTicks, pass);
         }
 
@@ -1652,17 +1435,13 @@ public class EntityRenderer implements IResourceManagerReloadListener
         this.mc.mcProfiler.endStartSection("terrain_setup");
         this.checkLoadVisibleChunks(entity, partialTicks, icamera, this.mc.thePlayer.isSpectator());
 
-        if (flag)
-        {
-            ShadersRender.setupTerrain(renderglobal, entity, (double)partialTicks, icamera, this.frameCount++, this.mc.thePlayer.isSpectator());
-        }
-        else
-        {
-            renderglobal.setupTerrain(entity, (double)partialTicks, icamera, this.frameCount++, this.mc.thePlayer.isSpectator());
+        if (flag) {
+            ShadersRender.setupTerrain(renderglobal, entity, (double) partialTicks, icamera, this.frameCount++, this.mc.thePlayer.isSpectator());
+        } else {
+            renderglobal.setupTerrain(entity, (double) partialTicks, icamera, this.frameCount++, this.mc.thePlayer.isSpectator());
         }
 
-        if (pass == 0 || pass == 2)
-        {
+        if (pass == 0 || pass == 2) {
             this.mc.mcProfiler.endStartSection("updatechunks");
             Lagometer.timerChunkUpload.start();
             this.mc.renderGlobal.updateChunks(finishTimeNano);
@@ -1672,8 +1451,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
         this.mc.mcProfiler.endStartSection("terrain");
         Lagometer.timerTerrain.start();
 
-        if (this.mc.gameSettings.ofSmoothFps && pass > 0)
-        {
+        if (this.mc.gameSettings.ofSmoothFps && pass > 0) {
             this.mc.mcProfiler.endStartSection("finish");
             GL11.glFinish();
             this.mc.mcProfiler.endStartSection("terrain");
@@ -1683,34 +1461,30 @@ public class EntityRenderer implements IResourceManagerReloadListener
         GlStateManager.pushMatrix();
         GlStateManager.disableAlpha();
 
-        if (flag)
-        {
+        if (flag) {
             ShadersRender.beginTerrainSolid();
         }
 
-        renderglobal.renderBlockLayer(EnumWorldBlockLayer.SOLID, (double)partialTicks, pass, entity);
+        renderglobal.renderBlockLayer(EnumWorldBlockLayer.SOLID, (double) partialTicks, pass, entity);
         GlStateManager.enableAlpha();
 
-        if (flag)
-        {
+        if (flag) {
             ShadersRender.beginTerrainCutoutMipped();
         }
 
         this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).setBlurMipmap(false, this.mc.gameSettings.mipmapLevels > 0);
-        renderglobal.renderBlockLayer(EnumWorldBlockLayer.CUTOUT_MIPPED, (double)partialTicks, pass, entity);
+        renderglobal.renderBlockLayer(EnumWorldBlockLayer.CUTOUT_MIPPED, (double) partialTicks, pass, entity);
         this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).restoreLastBlurMipmap();
         this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).setBlurMipmap(false, false);
 
-        if (flag)
-        {
+        if (flag) {
             ShadersRender.beginTerrainCutout();
         }
 
-        renderglobal.renderBlockLayer(EnumWorldBlockLayer.CUTOUT, (double)partialTicks, pass, entity);
+        renderglobal.renderBlockLayer(EnumWorldBlockLayer.CUTOUT, (double) partialTicks, pass, entity);
         this.mc.getTextureManager().getTexture(TextureMap.locationBlocksTexture).restoreLastBlurMipmap();
 
-        if (flag)
-        {
+        if (flag) {
             ShadersRender.endTerrain();
         }
 
@@ -1718,24 +1492,21 @@ public class EntityRenderer implements IResourceManagerReloadListener
         GlStateManager.shadeModel(7424);
         GlStateManager.alphaFunc(516, 0.1F);
 
-        if (!this.debugView)
-        {
+        if (!this.debugView) {
             GlStateManager.matrixMode(5888);
             GlStateManager.popMatrix();
             GlStateManager.pushMatrix();
             RenderHelper.enableStandardItemLighting();
             this.mc.mcProfiler.endStartSection("entities");
 
-            if (Reflector.ForgeHooksClient_setRenderPass.exists())
-            {
-                Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(0)});
+            if (Reflector.ForgeHooksClient_setRenderPass.exists()) {
+                Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[]{Integer.valueOf(0)});
             }
 
             renderglobal.renderEntities(entity, icamera, partialTicks);
 
-            if (Reflector.ForgeHooksClient_setRenderPass.exists())
-            {
-                Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
+            if (Reflector.ForgeHooksClient_setRenderPass.exists()) {
+                Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[]{Integer.valueOf(-1)});
             }
 
             RenderHelper.disableStandardItemLighting();
@@ -1744,9 +1515,8 @@ public class EntityRenderer implements IResourceManagerReloadListener
             GlStateManager.popMatrix();
             GlStateManager.pushMatrix();
 
-            if (this.mc.objectMouseOver != null && entity.isInsideOfMaterial(Material.water) && flag1)
-            {
-                EntityPlayer entityplayer = (EntityPlayer)entity;
+            if (this.mc.objectMouseOver != null && entity.isInsideOfMaterial(Material.water) && flag1) {
+                EntityPlayer entityplayer = (EntityPlayer) entity;
                 GlStateManager.disableAlpha();
                 this.mc.mcProfiler.endStartSection("outline");
                 renderglobal.drawSelectionBox(entityplayer, this.mc.objectMouseOver, 0, partialTicks);
@@ -1754,24 +1524,26 @@ public class EntityRenderer implements IResourceManagerReloadListener
             }
         }
 
+//        GuiUtil.dumpGl();
+//        GuiUtil.dumpGl();
+
+        JClient.EVENT_BUS.invokeEvent(new RenderEvent.Post(partialTicks));
+
         GlStateManager.matrixMode(5888);
         GlStateManager.popMatrix();
 
-        if (flag1 && this.mc.objectMouseOver != null && !entity.isInsideOfMaterial(Material.water))
-        {
-            EntityPlayer entityplayer1 = (EntityPlayer)entity;
+        if (flag1 && this.mc.objectMouseOver != null && !entity.isInsideOfMaterial(Material.water)) {
+            EntityPlayer entityplayer1 = (EntityPlayer) entity;
             GlStateManager.disableAlpha();
             this.mc.mcProfiler.endStartSection("outline");
 
-            if ((!Reflector.ForgeHooksClient_onDrawBlockHighlight.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[] {renderglobal, entityplayer1, this.mc.objectMouseOver, Integer.valueOf(0), entityplayer1.getHeldItem(), Float.valueOf(partialTicks)})) && !this.mc.gameSettings.thirdPersonView)
-            {
+            if ((!Reflector.ForgeHooksClient_onDrawBlockHighlight.exists() || !Reflector.callBoolean(Reflector.ForgeHooksClient_onDrawBlockHighlight, new Object[]{renderglobal, entityplayer1, this.mc.objectMouseOver, Integer.valueOf(0), entityplayer1.getHeldItem(), Float.valueOf(partialTicks)})) && !this.mc.gameSettings.thirdPersonView) {
                 renderglobal.drawSelectionBox(entityplayer1, this.mc.objectMouseOver, 0, partialTicks);
             }
             GlStateManager.enableAlpha();
         }
 
-        if (!renderglobal.damagedBlocks.isEmpty())
-        {
+        if (!renderglobal.damagedBlocks.isEmpty()) {
             this.mc.mcProfiler.endStartSection("destroyProgress");
             GlStateManager.enableBlend();
             GlStateManager.tryBlendFuncSeparate(770, 1, 1, 0);
@@ -1784,13 +1556,11 @@ public class EntityRenderer implements IResourceManagerReloadListener
         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
         GlStateManager.disableBlend();
 
-        if (!this.debugView)
-        {
+        if (!this.debugView) {
             this.enableLightmap();
             this.mc.mcProfiler.endStartSection("litParticles");
 
-            if (flag)
-            {
+            if (flag) {
                 Shaders.beginLitParticles();
             }
 
@@ -1799,15 +1569,13 @@ public class EntityRenderer implements IResourceManagerReloadListener
             this.setupFog(0, partialTicks);
             this.mc.mcProfiler.endStartSection("particles");
 
-            if (flag)
-            {
+            if (flag) {
                 Shaders.beginParticles();
             }
 
             effectrenderer.renderParticles(entity, partialTicks);
 
-            if (flag)
-            {
+            if (flag) {
                 Shaders.endParticles();
             }
 
@@ -1816,31 +1584,27 @@ public class EntityRenderer implements IResourceManagerReloadListener
 
         GlStateManager.depthMask(false);
 
-        if (Config.isShaders())
-        {
+        if (Config.isShaders()) {
             GlStateManager.depthMask(Shaders.isRainDepth());
         }
 
         GlStateManager.enableCull();
         this.mc.mcProfiler.endStartSection("weather");
 
-        if (flag)
-        {
+        if (flag) {
             Shaders.beginWeather();
         }
 
         this.renderRainSnow(partialTicks);
 
-        if (flag)
-        {
+        if (flag) {
             Shaders.endWeather();
         }
 
         GlStateManager.depthMask(true);
         renderglobal.renderWorldBorder(entity, partialTicks);
 
-        if (flag)
-        {
+        if (flag) {
             ShadersRender.renderHand0(this, partialTicks, pass);
             Shaders.preWater();
         }
@@ -1856,26 +1620,24 @@ public class EntityRenderer implements IResourceManagerReloadListener
         GlStateManager.shadeModel(7425);
         this.mc.mcProfiler.endStartSection("translucent");
 
-        if (flag)
-        {
+
+        if (flag) {
             Shaders.beginWater();
         }
 
-        renderglobal.renderBlockLayer(EnumWorldBlockLayer.TRANSLUCENT, (double)partialTicks, pass, entity);
+        renderglobal.renderBlockLayer(EnumWorldBlockLayer.TRANSLUCENT, (double) partialTicks, pass, entity);
 
-        if (flag)
-        {
+        if (flag) {
             Shaders.endWater();
         }
 
-        if (Reflector.ForgeHooksClient_setRenderPass.exists() && !this.debugView)
-        {
+        if (Reflector.ForgeHooksClient_setRenderPass.exists() && !this.debugView) {
             RenderHelper.enableStandardItemLighting();
             this.mc.mcProfiler.endStartSection("entities");
-            Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(1)});
+            Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[]{Integer.valueOf(1)});
             this.mc.renderGlobal.renderEntities(entity, icamera, partialTicks);
             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
-            Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[] {Integer.valueOf(-1)});
+            Reflector.callVoid(Reflector.ForgeHooksClient_setRenderPass, new Object[]{Integer.valueOf(-1)});
             RenderHelper.disableStandardItemLighting();
         }
 
@@ -1885,56 +1647,50 @@ public class EntityRenderer implements IResourceManagerReloadListener
         GlStateManager.disableBlend();
         GlStateManager.disableFog();
 
-        if (entity.posY + (double)entity.getEyeHeight() >= 128.0D + (double)(this.mc.gameSettings.ofCloudsHeight * 128.0F))
-        {
+        if (entity.posY + (double) entity.getEyeHeight() >= 128.0D + (double) (this.mc.gameSettings.ofCloudsHeight * 128.0F)) {
             this.mc.mcProfiler.endStartSection("aboveClouds");
             this.renderCloudsCheck(renderglobal, partialTicks, pass);
         }
 
-        if (Reflector.ForgeHooksClient_dispatchRenderLast.exists())
-        {
+        if (Reflector.ForgeHooksClient_dispatchRenderLast.exists()) {
             this.mc.mcProfiler.endStartSection("forge_render_last");
-            Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, new Object[] {renderglobal, Float.valueOf(partialTicks)});
+            Reflector.callVoid(Reflector.ForgeHooksClient_dispatchRenderLast, new Object[]{renderglobal, Float.valueOf(partialTicks)});
         }
 
         this.mc.mcProfiler.endStartSection("hand");
 
-        if (this.renderHand && !Shaders.isShadowPass)
-        {
-            if (flag)
-            {
+        if (this.renderHand && !Shaders.isShadowPass) {
+            if (flag) {
                 ShadersRender.renderHand1(this, partialTicks, pass);
                 Shaders.renderCompositeFinal();
             }
 
             GlStateManager.clear(256);
 
-            if (flag)
-            {
+            if (flag) {
                 ShadersRender.renderFPOverlay(this, partialTicks, pass);
-            }
-            else
-            {
+            } else {
                 this.renderHand(partialTicks, pass);
             }
 
             this.renderWorldDirections(partialTicks);
         }
 
-        if (flag)
-        {
+//        GuiUtil.dumpGl();
+
+        if (flag) {
             Shaders.endRender();
         }
+
+
     }
 
-    private void renderCloudsCheck(RenderGlobal renderGlobalIn, float partialTicks, int pass)
-    {
-        if (this.mc.gameSettings.renderDistanceChunks >= 4 && !Config.isCloudsOff() && Shaders.shouldRenderClouds(this.mc.gameSettings))
-        {
+    private void renderCloudsCheck(RenderGlobal renderGlobalIn, float partialTicks, int pass) {
+        if (this.mc.gameSettings.renderDistanceChunks >= 4 && !Config.isCloudsOff() && Shaders.shouldRenderClouds(this.mc.gameSettings)) {
             this.mc.mcProfiler.endStartSection("clouds");
             GlStateManager.matrixMode(5889);
             GlStateManager.loadIdentity();
-            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance * 4.0F);
+            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.clipDistance * 4.0F);
             GlStateManager.matrixMode(5888);
             GlStateManager.pushMatrix();
             this.setupFog(0, partialTicks);
@@ -1943,23 +1699,20 @@ public class EntityRenderer implements IResourceManagerReloadListener
             GlStateManager.popMatrix();
             GlStateManager.matrixMode(5889);
             GlStateManager.loadIdentity();
-            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float)this.mc.displayWidth / (float)this.mc.displayHeight, 0.05F, this.clipDistance);
+            Project.gluPerspective(this.getFOVModifier(partialTicks, true), (float) this.mc.displayWidth / (float) this.mc.displayHeight, 0.05F, this.clipDistance);
             GlStateManager.matrixMode(5888);
         }
     }
 
-    private void addRainParticles()
-    {
+    private void addRainParticles() {
         float f = this.mc.theWorld.getRainStrength(1.0F);
 
-        if (!Config.isRainFancy())
-        {
+        if (!Config.isRainFancy()) {
             f /= 2.0F;
         }
 
-        if (f != 0.0F && Config.isRainSplash())
-        {
-            this.random.setSeed((long)this.rendererUpdateCount * 312987231L);
+        if (f != 0.0F && Config.isRainSplash()) {
+            this.random.setSeed((long) this.rendererUpdateCount * 312987231L);
             Entity entity = this.mc.getRenderViewEntity();
             World world = this.mc.theWorld;
             BlockPos blockpos = new BlockPos(entity);
@@ -1968,60 +1721,47 @@ public class EntityRenderer implements IResourceManagerReloadListener
             double d1 = 0.0D;
             double d2 = 0.0D;
             int j = 0;
-            int k = (int)(100.0F * f * f);
+            int k = (int) (100.0F * f * f);
 
-            if (this.mc.gameSettings.particles == 1)
-            {
+            if (this.mc.gameSettings.particles == 1) {
                 k >>= 1;
-            }
-            else if (this.mc.gameSettings.particles == 2)
-            {
+            } else if (this.mc.gameSettings.particles == 2) {
                 k = 0;
             }
 
-            for (int l = 0; l < k; ++l)
-            {
+            for (int l = 0; l < k; ++l) {
                 BlockPos blockpos1 = world.getPrecipitationHeight(blockpos.add(this.random.nextInt(i) - this.random.nextInt(i), 0, this.random.nextInt(i) - this.random.nextInt(i)));
                 BiomeGenBase biomegenbase = world.getBiomeGenForCoords(blockpos1);
                 BlockPos blockpos2 = blockpos1.down();
                 Block block = world.getBlockState(blockpos2).getBlock();
 
-                if (blockpos1.getY() <= blockpos.getY() + i && blockpos1.getY() >= blockpos.getY() - i && biomegenbase.canRain() && biomegenbase.getFloatTemperature(blockpos1) >= 0.15F)
-                {
+                if (blockpos1.getY() <= blockpos.getY() + i && blockpos1.getY() >= blockpos.getY() - i && biomegenbase.canRain() && biomegenbase.getFloatTemperature(blockpos1) >= 0.15F) {
                     double d3 = this.random.nextDouble();
                     double d4 = this.random.nextDouble();
 
-                    if (block.getMaterial() == Material.lava)
-                    {
-                        this.mc.theWorld.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, (double)blockpos1.getX() + d3, (double)((float)blockpos1.getY() + 0.1F) - block.getBlockBoundsMinY(), (double)blockpos1.getZ() + d4, 0.0D, 0.0D, 0.0D, new int[0]);
-                    }
-                    else if (block.getMaterial() != Material.air)
-                    {
+                    if (block.getMaterial() == Material.lava) {
+                        this.mc.theWorld.spawnParticle(EnumParticleTypes.SMOKE_NORMAL, (double) blockpos1.getX() + d3, (double) ((float) blockpos1.getY() + 0.1F) - block.getBlockBoundsMinY(), (double) blockpos1.getZ() + d4, 0.0D, 0.0D, 0.0D, new int[0]);
+                    } else if (block.getMaterial() != Material.air) {
                         block.setBlockBoundsBasedOnState(world, blockpos2);
                         ++j;
 
-                        if (this.random.nextInt(j) == 0)
-                        {
-                            d0 = (double)blockpos2.getX() + d3;
-                            d1 = (double)((float)blockpos2.getY() + 0.1F) + block.getBlockBoundsMaxY() - 1.0D;
-                            d2 = (double)blockpos2.getZ() + d4;
+                        if (this.random.nextInt(j) == 0) {
+                            d0 = (double) blockpos2.getX() + d3;
+                            d1 = (double) ((float) blockpos2.getY() + 0.1F) + block.getBlockBoundsMaxY() - 1.0D;
+                            d2 = (double) blockpos2.getZ() + d4;
                         }
 
-                        this.mc.theWorld.spawnParticle(EnumParticleTypes.WATER_DROP, (double)blockpos2.getX() + d3, (double)((float)blockpos2.getY() + 0.1F) + block.getBlockBoundsMaxY(), (double)blockpos2.getZ() + d4, 0.0D, 0.0D, 0.0D, new int[0]);
+                        this.mc.theWorld.spawnParticle(EnumParticleTypes.WATER_DROP, (double) blockpos2.getX() + d3, (double) ((float) blockpos2.getY() + 0.1F) + block.getBlockBoundsMaxY(), (double) blockpos2.getZ() + d4, 0.0D, 0.0D, 0.0D, new int[0]);
                     }
                 }
             }
 
-            if (j > 0 && this.random.nextInt(3) < this.rainSoundCounter++)
-            {
+            if (j > 0 && this.random.nextInt(3) < this.rainSoundCounter++) {
                 this.rainSoundCounter = 0;
 
-                if (d1 > (double)(blockpos.getY() + 1) && world.getPrecipitationHeight(blockpos).getY() > MathHelper.floor_float((float)blockpos.getY()))
-                {
+                if (d1 > (double) (blockpos.getY() + 1) && world.getPrecipitationHeight(blockpos).getY() > MathHelper.floor_float((float) blockpos.getY())) {
                     this.mc.theWorld.playSound(d0, d1, d2, "ambient.weather.rain", 0.1F, 0.5F, false);
-                }
-                else
-                {
+                } else {
                     this.mc.theWorld.playSound(d0, d1, d2, "ambient.weather.rain", 0.2F, 1.0F, false);
                 }
             }
@@ -2031,26 +1771,21 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * Render rain and snow
      */
-    protected void renderRainSnow(float partialTicks)
-    {
-        if (Reflector.ForgeWorldProvider_getWeatherRenderer.exists())
-        {
+    protected void renderRainSnow(float partialTicks) {
+        if (Reflector.ForgeWorldProvider_getWeatherRenderer.exists()) {
             WorldProvider worldprovider = this.mc.theWorld.provider;
             Object object = Reflector.call(worldprovider, Reflector.ForgeWorldProvider_getWeatherRenderer, new Object[0]);
 
-            if (object != null)
-            {
-                Reflector.callVoid(object, Reflector.IRenderHandler_render, new Object[] {Float.valueOf(partialTicks), this.mc.theWorld, this.mc});
+            if (object != null) {
+                Reflector.callVoid(object, Reflector.IRenderHandler_render, new Object[]{Float.valueOf(partialTicks), this.mc.theWorld, this.mc});
                 return;
             }
         }
 
         float f5 = this.mc.theWorld.getRainStrength(partialTicks);
 
-        if (f5 > 0.0F)
-        {
-            if (Config.isRainOff())
-            {
+        if (f5 > 0.0F) {
+            if (Config.isRainOff()) {
                 return;
             }
 
@@ -2067,68 +1802,57 @@ public class EntityRenderer implements IResourceManagerReloadListener
             GlStateManager.enableBlend();
             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
             GlStateManager.alphaFunc(516, 0.1F);
-            double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
-            double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
-            double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
+            double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double) partialTicks;
+            double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double) partialTicks;
+            double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double) partialTicks;
             int l = MathHelper.floor_double(d1);
             int i1 = 5;
 
-            if (Config.isRainFancy())
-            {
+            if (Config.isRainFancy()) {
                 i1 = 10;
             }
 
             int j1 = -1;
-            float f = (float)this.rendererUpdateCount + partialTicks;
+            float f = (float) this.rendererUpdateCount + partialTicks;
             worldrenderer.setTranslation(-d0, -d1, -d2);
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
-            for (int k1 = k - i1; k1 <= k + i1; ++k1)
-            {
-                for (int l1 = i - i1; l1 <= i + i1; ++l1)
-                {
+            for (int k1 = k - i1; k1 <= k + i1; ++k1) {
+                for (int l1 = i - i1; l1 <= i + i1; ++l1) {
                     int i2 = (k1 - k + 16) * 32 + l1 - i + 16;
-                    double d3 = (double)this.rainXCoords[i2] * 0.5D;
-                    double d4 = (double)this.rainYCoords[i2] * 0.5D;
+                    double d3 = (double) this.rainXCoords[i2] * 0.5D;
+                    double d4 = (double) this.rainYCoords[i2] * 0.5D;
                     blockpos$mutableblockpos.set(l1, 0, k1);
                     BiomeGenBase biomegenbase = world.getBiomeGenForCoords(blockpos$mutableblockpos);
 
-                    if (biomegenbase.canRain() || biomegenbase.getEnableSnow())
-                    {
+                    if (biomegenbase.canRain() || biomegenbase.getEnableSnow()) {
                         int j2 = world.getPrecipitationHeight(blockpos$mutableblockpos).getY();
                         int k2 = j - i1;
                         int l2 = j + i1;
 
-                        if (k2 < j2)
-                        {
+                        if (k2 < j2) {
                             k2 = j2;
                         }
 
-                        if (l2 < j2)
-                        {
+                        if (l2 < j2) {
                             l2 = j2;
                         }
 
                         int i3 = j2;
 
-                        if (j2 < l)
-                        {
+                        if (j2 < l) {
                             i3 = l;
                         }
 
-                        if (k2 != l2)
-                        {
-                            this.random.setSeed((long)(l1 * l1 * 3121 + l1 * 45238971 ^ k1 * k1 * 418711 + k1 * 13761));
+                        if (k2 != l2) {
+                            this.random.setSeed((long) (l1 * l1 * 3121 + l1 * 45238971 ^ k1 * k1 * 418711 + k1 * 13761));
                             blockpos$mutableblockpos.set(l1, k2, k1);
                             float f1 = biomegenbase.getFloatTemperature(blockpos$mutableblockpos);
 
-                            if (world.getWorldChunkManager().getTemperatureAtHeight(f1, j2) >= 0.15F)
-                            {
-                                if (j1 != 0)
-                                {
-                                    if (j1 >= 0)
-                                    {
+                            if (world.getWorldChunkManager().getTemperatureAtHeight(f1, j2) >= 0.15F) {
+                                if (j1 != 0) {
+                                    if (j1 >= 0) {
                                         tessellator.draw();
                                     }
 
@@ -2137,26 +1861,22 @@ public class EntityRenderer implements IResourceManagerReloadListener
                                     worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
                                 }
 
-                                double d5 = ((double)(this.rendererUpdateCount + l1 * l1 * 3121 + l1 * 45238971 + k1 * k1 * 418711 + k1 * 13761 & 31) + (double)partialTicks) / 32.0D * (3.0D + this.random.nextDouble());
-                                double d6 = (double)((float)l1 + 0.5F) - entity.posX;
-                                double d7 = (double)((float)k1 + 0.5F) - entity.posZ;
-                                float f2 = MathHelper.sqrt_double(d6 * d6 + d7 * d7) / (float)i1;
+                                double d5 = ((double) (this.rendererUpdateCount + l1 * l1 * 3121 + l1 * 45238971 + k1 * k1 * 418711 + k1 * 13761 & 31) + (double) partialTicks) / 32.0D * (3.0D + this.random.nextDouble());
+                                double d6 = (double) ((float) l1 + 0.5F) - entity.posX;
+                                double d7 = (double) ((float) k1 + 0.5F) - entity.posZ;
+                                float f2 = MathHelper.sqrt_double(d6 * d6 + d7 * d7) / (float) i1;
                                 float f3 = ((1.0F - f2 * f2) * 0.5F + 0.5F) * f5;
                                 blockpos$mutableblockpos.set(l1, i3, k1);
                                 int j3 = world.getCombinedLight(blockpos$mutableblockpos, 0);
                                 int k3 = j3 >> 16 & 65535;
                                 int l3 = j3 & 65535;
-                                worldrenderer.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
-                                worldrenderer.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
-                                worldrenderer.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
-                                worldrenderer.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D, (double)l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
-                            }
-                            else
-                            {
-                                if (j1 != 1)
-                                {
-                                    if (j1 >= 0)
-                                    {
+                                worldrenderer.pos((double) l1 - d3 + 0.5D, (double) k2, (double) k1 - d4 + 0.5D).tex(0.0D, (double) k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
+                                worldrenderer.pos((double) l1 + d3 + 0.5D, (double) k2, (double) k1 + d4 + 0.5D).tex(1.0D, (double) k2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
+                                worldrenderer.pos((double) l1 + d3 + 0.5D, (double) l2, (double) k1 + d4 + 0.5D).tex(1.0D, (double) l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
+                                worldrenderer.pos((double) l1 - d3 + 0.5D, (double) l2, (double) k1 - d4 + 0.5D).tex(0.0D, (double) l2 * 0.25D + d5).color(1.0F, 1.0F, 1.0F, f3).lightmap(k3, l3).endVertex();
+                            } else {
+                                if (j1 != 1) {
+                                    if (j1 >= 0) {
                                         tessellator.draw();
                                     }
 
@@ -2165,29 +1885,28 @@ public class EntityRenderer implements IResourceManagerReloadListener
                                     worldrenderer.begin(7, DefaultVertexFormats.PARTICLE_POSITION_TEX_COLOR_LMAP);
                                 }
 
-                                double d8 = (double)(((float)(this.rendererUpdateCount & 511) + partialTicks) / 512.0F);
-                                double d9 = this.random.nextDouble() + (double)f * 0.01D * (double)((float)this.random.nextGaussian());
-                                double d10 = this.random.nextDouble() + (double)(f * (float)this.random.nextGaussian()) * 0.001D;
-                                double d11 = (double)((float)l1 + 0.5F) - entity.posX;
-                                double d12 = (double)((float)k1 + 0.5F) - entity.posZ;
-                                float f6 = MathHelper.sqrt_double(d11 * d11 + d12 * d12) / (float)i1;
+                                double d8 = (double) (((float) (this.rendererUpdateCount & 511) + partialTicks) / 512.0F);
+                                double d9 = this.random.nextDouble() + (double) f * 0.01D * (double) ((float) this.random.nextGaussian());
+                                double d10 = this.random.nextDouble() + (double) (f * (float) this.random.nextGaussian()) * 0.001D;
+                                double d11 = (double) ((float) l1 + 0.5F) - entity.posX;
+                                double d12 = (double) ((float) k1 + 0.5F) - entity.posZ;
+                                float f6 = MathHelper.sqrt_double(d11 * d11 + d12 * d12) / (float) i1;
                                 float f4 = ((1.0F - f6 * f6) * 0.3F + 0.5F) * f5;
                                 blockpos$mutableblockpos.set(l1, i3, k1);
                                 int i4 = (world.getCombinedLight(blockpos$mutableblockpos, 0) * 3 + 15728880) / 4;
                                 int j4 = i4 >> 16 & 65535;
                                 int k4 = i4 & 65535;
-                                worldrenderer.pos((double)l1 - d3 + 0.5D, (double)k2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
-                                worldrenderer.pos((double)l1 + d3 + 0.5D, (double)k2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
-                                worldrenderer.pos((double)l1 + d3 + 0.5D, (double)l2, (double)k1 + d4 + 0.5D).tex(1.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
-                                worldrenderer.pos((double)l1 - d3 + 0.5D, (double)l2, (double)k1 - d4 + 0.5D).tex(0.0D + d9, (double)l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
+                                worldrenderer.pos((double) l1 - d3 + 0.5D, (double) k2, (double) k1 - d4 + 0.5D).tex(0.0D + d9, (double) k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
+                                worldrenderer.pos((double) l1 + d3 + 0.5D, (double) k2, (double) k1 + d4 + 0.5D).tex(1.0D + d9, (double) k2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
+                                worldrenderer.pos((double) l1 + d3 + 0.5D, (double) l2, (double) k1 + d4 + 0.5D).tex(1.0D + d9, (double) l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
+                                worldrenderer.pos((double) l1 - d3 + 0.5D, (double) l2, (double) k1 - d4 + 0.5D).tex(0.0D + d9, (double) l2 * 0.25D + d8 + d10).color(1.0F, 1.0F, 1.0F, f4).lightmap(j4, k4).endVertex();
                             }
                         }
                     }
                 }
             }
 
-            if (j1 >= 0)
-            {
+            if (j1 >= 0) {
                 tessellator.draw();
             }
 
@@ -2202,8 +1921,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * Setup orthogonal projection for rendering GUI screen overlays
      */
-    public void setupOverlayRendering()
-    {
+    public void setupOverlayRendering() {
         ScaledResolution scaledresolution = new ScaledResolution(this.mc);
         GlStateManager.clear(256);
         GlStateManager.matrixMode(5889);
@@ -2217,40 +1935,35 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * calculates fog and calls glClearColor
      */
-    private void updateFogColor(float partialTicks)
-    {
+    private void updateFogColor(float partialTicks) {
         World world = this.mc.theWorld;
         Entity entity = this.mc.getRenderViewEntity();
-        float f = 0.25F + 0.75F * (float)this.mc.gameSettings.renderDistanceChunks / 32.0F;
-        f = 1.0F - (float)Math.pow((double)f, 0.25D);
+        float f = 0.25F + 0.75F * (float) this.mc.gameSettings.renderDistanceChunks / 32.0F;
+        f = 1.0F - (float) Math.pow((double) f, 0.25D);
         Vec3 vec3 = world.getSkyColor(this.mc.getRenderViewEntity(), partialTicks);
         vec3 = CustomColors.getWorldSkyColor(vec3, world, this.mc.getRenderViewEntity(), partialTicks);
-        float f1 = (float)vec3.xCoord;
-        float f2 = (float)vec3.yCoord;
-        float f3 = (float)vec3.zCoord;
+        float f1 = (float) vec3.xCoord;
+        float f2 = (float) vec3.yCoord;
+        float f3 = (float) vec3.zCoord;
         Vec3 vec31 = world.getFogColor(partialTicks);
         vec31 = CustomColors.getWorldFogColor(vec31, world, this.mc.getRenderViewEntity(), partialTicks);
-        this.fogColorRed = (float)vec31.xCoord;
-        this.fogColorGreen = (float)vec31.yCoord;
-        this.fogColorBlue = (float)vec31.zCoord;
+        this.fogColorRed = (float) vec31.xCoord;
+        this.fogColorGreen = (float) vec31.yCoord;
+        this.fogColorBlue = (float) vec31.zCoord;
 
-        if (this.mc.gameSettings.renderDistanceChunks >= 4)
-        {
+        if (this.mc.gameSettings.renderDistanceChunks >= 4) {
             double d0 = -1.0D;
             Vec3 vec32 = MathHelper.sin(world.getCelestialAngleRadians(partialTicks)) > 0.0F ? new Vec3(d0, 0.0D, 0.0D) : new Vec3(1.0D, 0.0D, 0.0D);
-            float f5 = (float)entity.getLook(partialTicks).dotProduct(vec32);
+            float f5 = (float) entity.getLook(partialTicks).dotProduct(vec32);
 
-            if (f5 < 0.0F)
-            {
+            if (f5 < 0.0F) {
                 f5 = 0.0F;
             }
 
-            if (f5 > 0.0F)
-            {
+            if (f5 > 0.0F) {
                 float[] afloat = world.provider.calcSunriseSunsetColors(world.getCelestialAngle(partialTicks), partialTicks);
 
-                if (afloat != null)
-                {
+                if (afloat != null) {
                     f5 = f5 * afloat[3];
                     this.fogColorRed = this.fogColorRed * (1.0F - f5) + afloat[0] * f5;
                     this.fogColorGreen = this.fogColorGreen * (1.0F - f5) + afloat[1] * f5;
@@ -2264,8 +1977,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
         this.fogColorBlue += (f3 - this.fogColorBlue) * f;
         float f8 = world.getRainStrength(partialTicks);
 
-        if (f8 > 0.0F)
-        {
+        if (f8 > 0.0F) {
             float f4 = 1.0F - f8 * 0.5F;
             float f10 = 1.0F - f8 * 0.4F;
             this.fogColorRed *= f4;
@@ -2275,8 +1987,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
 
         float f9 = world.getThunderStrength(partialTicks);
 
-        if (f9 > 0.0F)
-        {
+        if (f9 > 0.0F) {
             float f11 = 1.0F - f9 * 0.5F;
             this.fogColorRed *= f11;
             this.fogColorGreen *= f11;
@@ -2285,20 +1996,16 @@ public class EntityRenderer implements IResourceManagerReloadListener
 
         Block block = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, entity, partialTicks);
 
-        if (this.cloudFog)
-        {
+        if (this.cloudFog) {
             Vec3 vec33 = world.getCloudColour(partialTicks);
-            this.fogColorRed = (float)vec33.xCoord;
-            this.fogColorGreen = (float)vec33.yCoord;
-            this.fogColorBlue = (float)vec33.zCoord;
-        }
-        else if (block.getMaterial() == Material.water)
-        {
-            float f12 = (float)EnchantmentHelper.getRespiration(entity) * 0.2F;
+            this.fogColorRed = (float) vec33.xCoord;
+            this.fogColorGreen = (float) vec33.yCoord;
+            this.fogColorBlue = (float) vec33.zCoord;
+        } else if (block.getMaterial() == Material.water) {
+            float f12 = (float) EnchantmentHelper.getRespiration(entity) * 0.2F;
             f12 = Config.limit(f12, 0.0F, 0.6F);
 
-            if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.waterBreathing))
-            {
+            if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPotionActive(Potion.waterBreathing)) {
                 f12 = f12 * 0.3F + 0.6F;
             }
 
@@ -2307,25 +2014,21 @@ public class EntityRenderer implements IResourceManagerReloadListener
             this.fogColorBlue = 0.2F + f12;
             Vec3 vec35 = CustomColors.getUnderwaterColor(this.mc.theWorld, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
 
-            if (vec35 != null)
-            {
-                this.fogColorRed = (float)vec35.xCoord;
-                this.fogColorGreen = (float)vec35.yCoord;
-                this.fogColorBlue = (float)vec35.zCoord;
+            if (vec35 != null) {
+                this.fogColorRed = (float) vec35.xCoord;
+                this.fogColorGreen = (float) vec35.yCoord;
+                this.fogColorBlue = (float) vec35.zCoord;
             }
-        }
-        else if (block.getMaterial() == Material.lava)
-        {
+        } else if (block.getMaterial() == Material.lava) {
             this.fogColorRed = 0.6F;
             this.fogColorGreen = 0.1F;
             this.fogColorBlue = 0.0F;
             Vec3 vec34 = CustomColors.getUnderlavaColor(this.mc.theWorld, this.mc.getRenderViewEntity().posX, this.mc.getRenderViewEntity().posY + 1.0D, this.mc.getRenderViewEntity().posZ);
 
-            if (vec34 != null)
-            {
-                this.fogColorRed = (float)vec34.xCoord;
-                this.fogColorGreen = (float)vec34.yCoord;
-                this.fogColorBlue = (float)vec34.zCoord;
+            if (vec34 != null) {
+                this.fogColorRed = (float) vec34.xCoord;
+                this.fogColorGreen = (float) vec34.yCoord;
+                this.fogColorBlue = (float) vec34.zCoord;
             }
         }
 
@@ -2333,60 +2036,49 @@ public class EntityRenderer implements IResourceManagerReloadListener
         this.fogColorRed *= f13;
         this.fogColorGreen *= f13;
         this.fogColorBlue *= f13;
-        double d1 = (entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks) * world.provider.getVoidFogYFactor();
+        double d1 = (entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double) partialTicks) * world.provider.getVoidFogYFactor();
 
-        if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.blindness))
-        {
-            int i = ((EntityLivingBase)entity).getActivePotionEffect(Potion.blindness).getDuration();
+        if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPotionActive(Potion.blindness)) {
+            int i = ((EntityLivingBase) entity).getActivePotionEffect(Potion.blindness).getDuration();
 
-            if (i < 20)
-            {
-                d1 *= (double)(1.0F - (float)i / 20.0F);
-            }
-            else
-            {
+            if (i < 20) {
+                d1 *= (double) (1.0F - (float) i / 20.0F);
+            } else {
                 d1 = 0.0D;
             }
         }
 
-        if (d1 < 1.0D)
-        {
-            if (d1 < 0.0D)
-            {
+        if (d1 < 1.0D) {
+            if (d1 < 0.0D) {
                 d1 = 0.0D;
             }
 
             d1 = d1 * d1;
-            this.fogColorRed = (float)((double)this.fogColorRed * d1);
-            this.fogColorGreen = (float)((double)this.fogColorGreen * d1);
-            this.fogColorBlue = (float)((double)this.fogColorBlue * d1);
+            this.fogColorRed = (float) ((double) this.fogColorRed * d1);
+            this.fogColorGreen = (float) ((double) this.fogColorGreen * d1);
+            this.fogColorBlue = (float) ((double) this.fogColorBlue * d1);
         }
 
-        if (this.bossColorModifier > 0.0F)
-        {
+        if (this.bossColorModifier > 0.0F) {
             float f14 = this.bossColorModifierPrev + (this.bossColorModifier - this.bossColorModifierPrev) * partialTicks;
             this.fogColorRed = this.fogColorRed * (1.0F - f14) + this.fogColorRed * 0.7F * f14;
             this.fogColorGreen = this.fogColorGreen * (1.0F - f14) + this.fogColorGreen * 0.6F * f14;
             this.fogColorBlue = this.fogColorBlue * (1.0F - f14) + this.fogColorBlue * 0.6F * f14;
         }
 
-        if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.nightVision))
-        {
-            float f15 = this.getNightVisionBrightness((EntityLivingBase)entity, partialTicks);
+        if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPotionActive(Potion.nightVision)) {
+            float f15 = this.getNightVisionBrightness((EntityLivingBase) entity, partialTicks);
             float f6 = 1.0F / this.fogColorRed;
 
-            if (f6 > 1.0F / this.fogColorGreen)
-            {
+            if (f6 > 1.0F / this.fogColorGreen) {
                 f6 = 1.0F / this.fogColorGreen;
             }
 
-            if (f6 > 1.0F / this.fogColorBlue)
-            {
+            if (f6 > 1.0F / this.fogColorBlue) {
                 f6 = 1.0F / this.fogColorBlue;
             }
 
-            if (Float.isInfinite(f6))
-            {
+            if (Float.isInfinite(f6)) {
                 f6 = Math.nextAfter(f6, 0.0D);
             }
 
@@ -2395,8 +2087,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
             this.fogColorBlue = this.fogColorBlue * (1.0F - f15) + this.fogColorBlue * f6 * f15;
         }
 
-        if (this.mc.gameSettings.anaglyph)
-        {
+        if (this.mc.gameSettings.anaglyph) {
             float f16 = (this.fogColorRed * 30.0F + this.fogColorGreen * 59.0F + this.fogColorBlue * 11.0F) / 100.0F;
             float f17 = (this.fogColorRed * 30.0F + this.fogColorGreen * 70.0F) / 100.0F;
             float f7 = (this.fogColorRed * 30.0F + this.fogColorBlue * 70.0F) / 100.0F;
@@ -2405,9 +2096,8 @@ public class EntityRenderer implements IResourceManagerReloadListener
             this.fogColorBlue = f7;
         }
 
-        if (Reflector.EntityViewRenderEvent_FogColors_Constructor.exists())
-        {
-            Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_FogColors_Constructor, new Object[] {this, entity, block, Float.valueOf(partialTicks), Float.valueOf(this.fogColorRed), Float.valueOf(this.fogColorGreen), Float.valueOf(this.fogColorBlue)});
+        if (Reflector.EntityViewRenderEvent_FogColors_Constructor.exists()) {
+            Object object = Reflector.newInstance(Reflector.EntityViewRenderEvent_FogColors_Constructor, new Object[]{this, entity, block, Float.valueOf(partialTicks), Float.valueOf(this.fogColorRed), Float.valueOf(this.fogColorGreen), Float.valueOf(this.fogColorBlue)});
             Reflector.postForgeBusEvent(object);
             this.fogColorRed = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_FogColors_red, this.fogColorRed);
             this.fogColorGreen = Reflector.getFieldValueFloat(object, Reflector.EntityViewRenderEvent_FogColors_green, this.fogColorGreen);
@@ -2420,127 +2110,97 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * Sets up the fog to be rendered. If the arg passed in is -1 the fog starts at 0 and goes to 80% of far plane
      * distance and is used for sky rendering.
-     *  
+     *
      * @param startCoords If is -1 the fog start at 0.0
      */
-    private void setupFog(int startCoords, float partialTicks)
-    {
+    private void setupFog(int startCoords, float partialTicks) {
         this.fogStandard = false;
         Entity entity = this.mc.getRenderViewEntity();
         boolean flag = false;
 
-        if (entity instanceof EntityPlayer)
-        {
-            flag = ((EntityPlayer)entity).capabilities.isCreativeMode;
+        if (entity instanceof EntityPlayer) {
+            flag = ((EntityPlayer) entity).capabilities.isCreativeMode;
         }
 
-        GL11.glFog(GL11.GL_FOG_COLOR, (FloatBuffer)this.setFogColorBuffer(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 1.0F));
+        GL11.glFog(GL11.GL_FOG_COLOR, (FloatBuffer) this.setFogColorBuffer(this.fogColorRed, this.fogColorGreen, this.fogColorBlue, 1.0F));
         GL11.glNormal3f(0.0F, -1.0F, 0.0F);
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         Block block = ActiveRenderInfo.getBlockAtEntityViewpoint(this.mc.theWorld, entity, partialTicks);
         float f = -1.0F;
 
-        if (Reflector.ForgeHooksClient_getFogDensity.exists())
-        {
-            f = Reflector.callFloat(Reflector.ForgeHooksClient_getFogDensity, new Object[] {this, entity, block, Float.valueOf(partialTicks), Float.valueOf(0.1F)});
+        if (Reflector.ForgeHooksClient_getFogDensity.exists()) {
+            f = Reflector.callFloat(Reflector.ForgeHooksClient_getFogDensity, new Object[]{this, entity, block, Float.valueOf(partialTicks), Float.valueOf(0.1F)});
         }
 
-        if (f >= 0.0F)
-        {
+        if (f >= 0.0F) {
             GlStateManager.setFogDensity(f);
-        }
-        else if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.blindness))
-        {
+        } else if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPotionActive(Potion.blindness)) {
             float f4 = 5.0F;
-            int i = ((EntityLivingBase)entity).getActivePotionEffect(Potion.blindness).getDuration();
+            int i = ((EntityLivingBase) entity).getActivePotionEffect(Potion.blindness).getDuration();
 
-            if (i < 20)
-            {
-                f4 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float)i / 20.0F);
+            if (i < 20) {
+                f4 = 5.0F + (this.farPlaneDistance - 5.0F) * (1.0F - (float) i / 20.0F);
             }
 
             GlStateManager.setFog(9729);
 
-            if (startCoords == -1)
-            {
+            if (startCoords == -1) {
                 GlStateManager.setFogStart(0.0F);
                 GlStateManager.setFogEnd(f4 * 0.8F);
-            }
-            else
-            {
+            } else {
                 GlStateManager.setFogStart(f4 * 0.25F);
                 GlStateManager.setFogEnd(f4);
             }
 
-            if (GLContext.getCapabilities().GL_NV_fog_distance && Config.isFogFancy())
-            {
+            if (GLContext.getCapabilities().GL_NV_fog_distance && Config.isFogFancy()) {
                 GL11.glFogi(34138, 34139);
             }
-        }
-        else if (this.cloudFog)
-        {
+        } else if (this.cloudFog) {
             GlStateManager.setFog(2048);
             GlStateManager.setFogDensity(0.1F);
-        }
-        else if (block.getMaterial() == Material.water)
-        {
+        } else if (block.getMaterial() == Material.water) {
             GlStateManager.setFog(2048);
             float f1 = Config.isClearWater() ? 0.02F : 0.1F;
 
-            if (entity instanceof EntityLivingBase && ((EntityLivingBase)entity).isPotionActive(Potion.waterBreathing))
-            {
+            if (entity instanceof EntityLivingBase && ((EntityLivingBase) entity).isPotionActive(Potion.waterBreathing)) {
                 GlStateManager.setFogDensity(0.01F);
-            }
-            else
-            {
-                float f2 = 0.1F - (float)EnchantmentHelper.getRespiration(entity) * 0.03F;
+            } else {
+                float f2 = 0.1F - (float) EnchantmentHelper.getRespiration(entity) * 0.03F;
                 GlStateManager.setFogDensity(Config.limit(f2, 0.0F, f1));
             }
-        }
-        else if (block.getMaterial() == Material.lava)
-        {
+        } else if (block.getMaterial() == Material.lava) {
             GlStateManager.setFog(2048);
             GlStateManager.setFogDensity(2.0F);
-        }
-        else
-        {
+        } else {
             float f3 = this.farPlaneDistance;
             this.fogStandard = true;
             GlStateManager.setFog(9729);
 
-            if (startCoords == -1)
-            {
+            if (startCoords == -1) {
                 GlStateManager.setFogStart(0.0F);
                 GlStateManager.setFogEnd(f3);
-            }
-            else
-            {
+            } else {
                 GlStateManager.setFogStart(f3 * Config.getFogStart());
                 GlStateManager.setFogEnd(f3);
             }
 
-            if (GLContext.getCapabilities().GL_NV_fog_distance)
-            {
-                if (Config.isFogFancy())
-                {
+            if (GLContext.getCapabilities().GL_NV_fog_distance) {
+                if (Config.isFogFancy()) {
                     GL11.glFogi(34138, 34139);
                 }
 
-                if (Config.isFogFast())
-                {
+                if (Config.isFogFast()) {
                     GL11.glFogi(34138, 34140);
                 }
             }
 
-            if (this.mc.theWorld.provider.doesXZShowFog((int)entity.posX, (int)entity.posZ))
-            {
+            if (this.mc.theWorld.provider.doesXZShowFog((int) entity.posX, (int) entity.posZ)) {
                 GlStateManager.setFogStart(f3 * 0.05F);
                 GlStateManager.setFogEnd(f3);
             }
 
-            if (Reflector.ForgeHooksClient_onFogRender.exists())
-            {
-                Reflector.callVoid(Reflector.ForgeHooksClient_onFogRender, new Object[] {this, entity, block, Float.valueOf(partialTicks), Integer.valueOf(startCoords), Float.valueOf(f3)});
+            if (Reflector.ForgeHooksClient_onFogRender.exists()) {
+                Reflector.callVoid(Reflector.ForgeHooksClient_onFogRender, new Object[]{this, entity, block, Float.valueOf(partialTicks), Integer.valueOf(startCoords), Float.valueOf(f3)});
             }
         }
 
@@ -2552,10 +2212,8 @@ public class EntityRenderer implements IResourceManagerReloadListener
     /**
      * Update and return fogColorBuffer with the RGBA values passed as arguments
      */
-    private FloatBuffer setFogColorBuffer(float red, float green, float blue, float alpha)
-    {
-        if (Config.isShaders())
-        {
+    private FloatBuffer setFogColorBuffer(float red, float green, float blue, float alpha) {
+        if (Config.isShaders()) {
             Shaders.setFogColor(red, green, blue);
         }
 
@@ -2565,84 +2223,66 @@ public class EntityRenderer implements IResourceManagerReloadListener
         return this.fogColorBuffer;
     }
 
-    public MapItemRenderer getMapItemRenderer()
-    {
+    public MapItemRenderer getMapItemRenderer() {
         return this.theMapItemRenderer;
     }
 
-    private void waitForServerThread()
-    {
+    private void waitForServerThread() {
         this.serverWaitTimeCurrent = 0;
 
-        if (Config.isSmoothWorld() && Config.isSingleProcessor())
-        {
-            if (this.mc.isIntegratedServerRunning())
-            {
+        if (Config.isSmoothWorld() && Config.isSingleProcessor()) {
+            if (this.mc.isIntegratedServerRunning()) {
                 IntegratedServer integratedserver = this.mc.getIntegratedServer();
 
-                if (integratedserver != null)
-                {
+                if (integratedserver != null) {
                     boolean flag = this.mc.isGamePaused();
 
-                    if (!flag && !(this.mc.currentScreen instanceof GuiDownloadTerrain))
-                    {
-                        if (this.serverWaitTime > 0)
-                        {
+                    if (!flag && !(this.mc.currentScreen instanceof GuiDownloadTerrain)) {
+                        if (this.serverWaitTime > 0) {
                             Lagometer.timerServer.start();
-                            Config.sleep((long)this.serverWaitTime);
+                            Config.sleep((long) this.serverWaitTime);
                             Lagometer.timerServer.end();
                             this.serverWaitTimeCurrent = this.serverWaitTime;
                         }
 
                         long i = System.nanoTime() / 1000000L;
 
-                        if (this.lastServerTime != 0L && this.lastServerTicks != 0)
-                        {
+                        if (this.lastServerTime != 0L && this.lastServerTicks != 0) {
                             long j = i - this.lastServerTime;
 
-                            if (j < 0L)
-                            {
+                            if (j < 0L) {
                                 this.lastServerTime = i;
                                 j = 0L;
                             }
 
-                            if (j >= 50L)
-                            {
+                            if (j >= 50L) {
                                 this.lastServerTime = i;
                                 int k = integratedserver.getTickCounter();
                                 int l = k - this.lastServerTicks;
 
-                                if (l < 0)
-                                {
+                                if (l < 0) {
                                     this.lastServerTicks = k;
                                     l = 0;
                                 }
 
-                                if (l < 1 && this.serverWaitTime < 100)
-                                {
+                                if (l < 1 && this.serverWaitTime < 100) {
                                     this.serverWaitTime += 2;
                                 }
 
-                                if (l > 1 && this.serverWaitTime > 0)
-                                {
+                                if (l > 1 && this.serverWaitTime > 0) {
                                     --this.serverWaitTime;
                                 }
 
                                 this.lastServerTicks = k;
                             }
-                        }
-                        else
-                        {
+                        } else {
                             this.lastServerTime = i;
                             this.lastServerTicks = integratedserver.getTickCounter();
                             this.avgServerTickDiff = 1.0F;
                             this.avgServerTimeDiff = 50.0F;
                         }
-                    }
-                    else
-                    {
-                        if (this.mc.currentScreen instanceof GuiDownloadTerrain)
-                        {
+                    } else {
+                        if (this.mc.currentScreen instanceof GuiDownloadTerrain) {
                             Config.sleep(20L);
                         }
 
@@ -2651,25 +2291,20 @@ public class EntityRenderer implements IResourceManagerReloadListener
                     }
                 }
             }
-        }
-        else
-        {
+        } else {
             this.lastServerTime = 0L;
             this.lastServerTicks = 0;
         }
     }
 
-    private void frameInit()
-    {
+    private void frameInit() {
         GlErrors.frameStart();
 
-        if (!this.initialized)
-        {
+        if (!this.initialized) {
             ReflectorResolver.resolve();
             TextureUtils.registerResourceListener();
 
-            if (Config.getBitsOs() == 64 && Config.getBitsJre() == 32)
-            {
+            if (Config.getBitsOs() == 64 && Config.getBitsJre() == 32) {
                 Config.setNotify64BitJava(true);
             }
 
@@ -2679,33 +2314,28 @@ public class EntityRenderer implements IResourceManagerReloadListener
         Config.checkDisplayMode();
         World world = this.mc.theWorld;
 
-        if (world != null)
-        {
-            if (Config.getNewRelease() != null)
-            {
+        if (world != null) {
+            if (Config.getNewRelease() != null) {
                 String s = "HD_U".replace("HD_U", "HD Ultra").replace("L", "Light");
                 String s1 = s + " " + Config.getNewRelease();
-                ChatComponentText chatcomponenttext = new ChatComponentText(I18n.format("of.message.newVersion", new Object[] {"\u00a7n" + s1 + "\u00a7r"}));
+                ChatComponentText chatcomponenttext = new ChatComponentText(I18n.format("of.message.newVersion", new Object[]{"\u00a7n" + s1 + "\u00a7r"}));
                 chatcomponenttext.setChatStyle((new ChatStyle()).setChatClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, "https://optifine.net/downloads")));
                 this.mc.ingameGUI.getChatGUI().printChatMessage(chatcomponenttext);
-                Config.setNewRelease((String)null);
+                Config.setNewRelease((String) null);
             }
 
-            if (Config.isNotify64BitJava())
-            {
+            if (Config.isNotify64BitJava()) {
                 Config.setNotify64BitJava(false);
                 ChatComponentText chatcomponenttext1 = new ChatComponentText(I18n.format("of.message.java64Bit", new Object[0]));
                 this.mc.ingameGUI.getChatGUI().printChatMessage(chatcomponenttext1);
             }
         }
 
-        if (this.mc.currentScreen instanceof GuiMainMenu)
-        {
-            this.updateMainMenu((GuiMainMenu)this.mc.currentScreen);
+        if (this.mc.currentScreen instanceof GuiMainMenu) {
+            this.updateMainMenu((GuiMainMenu) this.mc.currentScreen);
         }
 
-        if (this.updatedWorld != world)
-        {
+        if (this.updatedWorld != world) {
             RandomEntities.worldChanged(this.updatedWorld, world);
             Config.updateThreadPriorities();
             this.lastServerTime = 0L;
@@ -2713,119 +2343,88 @@ public class EntityRenderer implements IResourceManagerReloadListener
             this.updatedWorld = world;
         }
 
-        if (!this.setFxaaShader(Shaders.configAntialiasingLevel))
-        {
+        if (!this.setFxaaShader(Shaders.configAntialiasingLevel)) {
             Shaders.configAntialiasingLevel = 0;
         }
 
-        if (this.mc.currentScreen != null && this.mc.currentScreen.getClass() == GuiChat.class)
-        {
-            this.mc.displayGuiScreen(new GuiChatOF((GuiChat)this.mc.currentScreen));
+        if (this.mc.currentScreen != null && this.mc.currentScreen.getClass() == GuiChat.class) {
+            this.mc.displayGuiScreen(new GuiChatOF((GuiChat) this.mc.currentScreen));
         }
     }
 
-    private void frameFinish()
-    {
-        if (this.mc.theWorld != null && Config.isShowGlErrors() && TimedEvent.isActive("CheckGlErrorFrameFinish", 10000L))
-        {
+    private void frameFinish() {
+        if (this.mc.theWorld != null && Config.isShowGlErrors() && TimedEvent.isActive("CheckGlErrorFrameFinish", 10000L)) {
             int i = GlStateManager.glGetError();
 
-            if (i != 0 && GlErrors.isEnabled(i))
-            {
+            if (i != 0 && GlErrors.isEnabled(i)) {
                 String s = Config.getGlErrorString(i);
-                ChatComponentText chatcomponenttext = new ChatComponentText(I18n.format("of.message.openglError", new Object[] {Integer.valueOf(i), s}));
+                ChatComponentText chatcomponenttext = new ChatComponentText(I18n.format("of.message.openglError", new Object[]{Integer.valueOf(i), s}));
                 this.mc.ingameGUI.getChatGUI().printChatMessage(chatcomponenttext);
             }
         }
     }
 
-    private void updateMainMenu(GuiMainMenu p_updateMainMenu_1_)
-    {
-        try
-        {
+    private void updateMainMenu(GuiMainMenu p_updateMainMenu_1_) {
+        try {
             String s = null;
             Calendar calendar = Calendar.getInstance();
             calendar.setTime(new Date());
             int i = calendar.get(5);
             int j = calendar.get(2) + 1;
 
-            if (i == 8 && j == 4)
-            {
+            if (i == 8 && j == 4) {
                 s = "Happy birthday, OptiFine!";
             }
 
-            if (i == 14 && j == 8)
-            {
+            if (i == 14 && j == 8) {
                 s = "Happy birthday, sp614x!";
             }
 
-            if (s == null)
-            {
+            if (s == null) {
                 return;
             }
 
             Reflector.setFieldValue(p_updateMainMenu_1_, Reflector.GuiMainMenu_splashText, s);
-        }
-        catch (Throwable var6)
-        {
+        } catch (Throwable var6) {
             ;
         }
     }
 
-    public boolean setFxaaShader(int p_setFxaaShader_1_)
-    {
-        if (!OpenGlHelper.isFramebufferEnabled())
-        {
+    public boolean setFxaaShader(int p_setFxaaShader_1_) {
+        if (!OpenGlHelper.isFramebufferEnabled()) {
             return false;
-        }
-        else if (this.theShaderGroup != null && this.theShaderGroup != this.fxaaShaders[2] && this.theShaderGroup != this.fxaaShaders[4])
-        {
+        } else if (this.theShaderGroup != null && this.theShaderGroup != this.fxaaShaders[2] && this.theShaderGroup != this.fxaaShaders[4]) {
             return true;
-        }
-        else if (p_setFxaaShader_1_ != 2 && p_setFxaaShader_1_ != 4)
-        {
-            if (this.theShaderGroup == null)
-            {
+        } else if (p_setFxaaShader_1_ != 2 && p_setFxaaShader_1_ != 4) {
+            if (this.theShaderGroup == null) {
                 return true;
-            }
-            else
-            {
+            } else {
                 this.theShaderGroup.deleteShaderGroup();
                 this.theShaderGroup = null;
                 return true;
             }
-        }
-        else if (this.theShaderGroup != null && this.theShaderGroup == this.fxaaShaders[p_setFxaaShader_1_])
-        {
+        } else if (this.theShaderGroup != null && this.theShaderGroup == this.fxaaShaders[p_setFxaaShader_1_]) {
             return true;
-        }
-        else if (this.mc.theWorld == null)
-        {
+        } else if (this.mc.theWorld == null) {
             return true;
-        }
-        else
-        {
+        } else {
             this.loadShader(new ResourceLocation("shaders/post/fxaa_of_" + p_setFxaaShader_1_ + "x.json"));
             this.fxaaShaders[p_setFxaaShader_1_] = this.theShaderGroup;
             return this.useShader;
         }
     }
 
-    private void checkLoadVisibleChunks(Entity p_checkLoadVisibleChunks_1_, float p_checkLoadVisibleChunks_2_, ICamera p_checkLoadVisibleChunks_3_, boolean p_checkLoadVisibleChunks_4_)
-    {
+    private void checkLoadVisibleChunks(Entity p_checkLoadVisibleChunks_1_, float p_checkLoadVisibleChunks_2_, ICamera p_checkLoadVisibleChunks_3_, boolean p_checkLoadVisibleChunks_4_) {
         int i = 201435902;
 
-        if (this.loadVisibleChunks)
-        {
+        if (this.loadVisibleChunks) {
             this.loadVisibleChunks = false;
-            this.loadAllVisibleChunks(p_checkLoadVisibleChunks_1_, (double)p_checkLoadVisibleChunks_2_, p_checkLoadVisibleChunks_3_, p_checkLoadVisibleChunks_4_);
+            this.loadAllVisibleChunks(p_checkLoadVisibleChunks_1_, (double) p_checkLoadVisibleChunks_2_, p_checkLoadVisibleChunks_3_, p_checkLoadVisibleChunks_4_);
             this.mc.ingameGUI.getChatGUI().deleteChatLine(i);
         }
 
-        if (Keyboard.isKeyDown(61) && Keyboard.isKeyDown(38))
-        {
-            if (this.mc.currentScreen != null)
-            {
+        if (Keyboard.isKeyDown(61) && Keyboard.isKeyDown(38)) {
+            if (this.mc.currentScreen != null) {
                 return;
             }
 
@@ -2835,13 +2434,11 @@ public class EntityRenderer implements IResourceManagerReloadListener
         }
     }
 
-    private void loadAllVisibleChunks(Entity p_loadAllVisibleChunks_1_, double p_loadAllVisibleChunks_2_, ICamera p_loadAllVisibleChunks_4_, boolean p_loadAllVisibleChunks_5_)
-    {
+    private void loadAllVisibleChunks(Entity p_loadAllVisibleChunks_1_, double p_loadAllVisibleChunks_2_, ICamera p_loadAllVisibleChunks_4_, boolean p_loadAllVisibleChunks_5_) {
         int i = this.mc.gameSettings.ofChunkUpdates;
         boolean flag = this.mc.gameSettings.ofLazyChunkLoading;
 
-        try
-        {
+        try {
             this.mc.gameSettings.ofChunkUpdates = 1000;
             this.mc.gameSettings.ofLazyChunkLoading = false;
             RenderGlobal renderglobal = Config.getRenderGlobal();
@@ -2852,49 +2449,41 @@ public class EntityRenderer implements IResourceManagerReloadListener
             int i1 = 0;
             boolean flag1 = false;
 
-            while (true)
-            {
+            while (true) {
                 flag1 = false;
 
-                for (int j1 = 0; j1 < 100; ++j1)
-                {
+                for (int j1 = 0; j1 < 100; ++j1) {
                     renderglobal.displayListEntitiesDirty = true;
                     renderglobal.setupTerrain(p_loadAllVisibleChunks_1_, p_loadAllVisibleChunks_2_, p_loadAllVisibleChunks_4_, this.frameCount++, p_loadAllVisibleChunks_5_);
 
-                    if (!renderglobal.hasNoChunkUpdates())
-                    {
+                    if (!renderglobal.hasNoChunkUpdates()) {
                         flag1 = true;
                     }
 
                     i1 = i1 + renderglobal.getCountChunksToUpdate();
 
-                    while (!renderglobal.hasNoChunkUpdates())
-                    {
+                    while (!renderglobal.hasNoChunkUpdates()) {
                         renderglobal.updateChunks(System.nanoTime() + 1000000000L);
                     }
 
                     i1 = i1 - renderglobal.getCountChunksToUpdate();
 
-                    if (!flag1)
-                    {
+                    if (!flag1) {
                         break;
                     }
                 }
 
-                if (renderglobal.getCountLoadedChunks() != j)
-                {
+                if (renderglobal.getCountLoadedChunks() != j) {
                     flag1 = true;
                     j = renderglobal.getCountLoadedChunks();
                 }
 
-                if (System.currentTimeMillis() > l)
-                {
+                if (System.currentTimeMillis() > l) {
                     Config.log("Chunks loaded: " + i1);
                     l = System.currentTimeMillis() + 5000L;
                 }
 
-                if (!flag1)
-                {
+                if (!flag1) {
                     break;
                 }
             }
@@ -2902,9 +2491,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
             Config.log("Chunks loaded: " + i1);
             Config.log("Finished loading visible chunks");
             RenderChunk.renderChunksUpdated = 0;
-        }
-        finally
-        {
+        } finally {
             this.mc.gameSettings.ofChunkUpdates = i;
             this.mc.gameSettings.ofLazyChunkLoading = flag;
         }
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderLiving.java b/src/main/java/net/minecraft/client/renderer/entity/RenderLiving.java
index a722d38..b5b7f4b 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderLiving.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderLiving.java
@@ -14,31 +14,22 @@ import net.minecraft.entity.EntityLiving;
 import net.minecraft.src.Config;
 import net.optifine.shaders.Shaders;
 
-public abstract class RenderLiving<T extends EntityLiving> extends RendererLivingEntity<T>
-{
-    public RenderLiving(IRenderManager rendermanagerIn, ModelBase modelbaseIn, float shadowsizeIn)
-    {
+public abstract class RenderLiving<T extends EntityLiving> extends RendererLivingEntity<T> {
+    public RenderLiving(IRenderManager rendermanagerIn, ModelBase modelbaseIn, float shadowsizeIn) {
         super(rendermanagerIn, modelbaseIn, shadowsizeIn);
     }
 
-    protected boolean canRenderName(T entity)
-    {
+    protected boolean canRenderName(T entity) {
         return super.canRenderName(entity) && (entity.getAlwaysRenderNameTagForRender() || entity.hasCustomName() && entity == this.renderManager.getPointedEntity());
     }
 
-    public boolean shouldRender(T livingEntity, ICamera camera, double camX, double camY, double camZ)
-    {
-        if (super.shouldRender(livingEntity, camera, camX, camY, camZ))
-        {
+    public boolean shouldRender(T livingEntity, ICamera camera, double camX, double camY, double camZ) {
+        if (super.shouldRender(livingEntity, camera, camX, camY, camZ)) {
             return true;
-        }
-        else if (livingEntity.getLeashed() && livingEntity.getLeashedToEntity() != null)
-        {
+        } else if (livingEntity.getLeashed() && livingEntity.getLeashedToEntity() != null) {
             Entity entity = livingEntity.getLeashedToEntity();
             return camera.isBoundingBoxInFrustum(entity.getEntityBoundingBox());
-        }
-        else
-        {
+        } else {
             return false;
         }
     }
@@ -46,73 +37,65 @@ public abstract class RenderLiving<T extends EntityLiving> extends RendererLivin
     /**
      * Renders the desired {@code T} type Entity.
      */
-    public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks)
-    {
+    public void doRender(T entity, double x, double y, double z, float entityYaw, float partialTicks) {
         super.doRender(entity, x, y, z, entityYaw, partialTicks);
         this.renderLeash(entity, x, y, z, entityYaw, partialTicks);
     }
 
-    public void setLightmap(T entityLivingIn, float partialTicks)
-    {
+    public void setLightmap(T entityLivingIn, float partialTicks) {
         int i = entityLivingIn.getBrightnessForRender(partialTicks);
         int j = i % 65536;
         int k = i / 65536;
-        OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j / 1.0F, (float)k / 1.0F);
+        OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float) j / 1.0F, (float) k / 1.0F);
     }
 
     /**
      * Gets the value between start and end according to pct
      */
-    private double interpolateValue(double start, double end, double pct)
-    {
+    private double interpolateValue(double start, double end, double pct) {
         return start + (end - start) * pct;
     }
 
-    protected void renderLeash(T entityLivingIn, double x, double y, double z, float entityYaw, float partialTicks)
-    {
-        if (!Config.isShaders() || !Shaders.isShadowPass)
-        {
+    protected void renderLeash(T entityLivingIn, double x, double y, double z, float entityYaw, float partialTicks) {
+        if (!Config.isShaders() || !Shaders.isShadowPass) {
             Entity entity = entityLivingIn.getLeashedToEntity();
 
-            if (entity != null)
-            {
-                y = y - (1.6D - (double)entityLivingIn.height) * 0.5D;
+            if (entity != null) {
+                y = y - (1.6D - (double) entityLivingIn.height) * 0.5D;
                 Tessellator tessellator = Tessellator.getInstance();
                 WorldRenderer worldrenderer = tessellator.getWorldRenderer();
-                double d0 = this.interpolateValue((double)entity.prevRotationYaw, (double)entity.rotationYaw, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
-                double d1 = this.interpolateValue((double)entity.prevRotationPitch, (double)entity.rotationPitch, (double)(partialTicks * 0.5F)) * 0.01745329238474369D;
+                double d0 = this.interpolateValue((double) entity.prevRotationYaw, (double) entity.rotationYaw, (double) (partialTicks * 0.5F)) * 0.01745329238474369D;
+                double d1 = this.interpolateValue((double) entity.prevRotationPitch, (double) entity.rotationPitch, (double) (partialTicks * 0.5F)) * 0.01745329238474369D;
                 double d2 = Math.cos(d0);
                 double d3 = Math.sin(d0);
                 double d4 = Math.sin(d1);
 
-                if (entity instanceof EntityHanging)
-                {
+                if (entity instanceof EntityHanging) {
                     d2 = 0.0D;
                     d3 = 0.0D;
                     d4 = -1.0D;
                 }
 
                 double d5 = Math.cos(d1);
-                double d6 = this.interpolateValue(entity.prevPosX, entity.posX, (double)partialTicks) - d2 * 0.7D - d3 * 0.5D * d5;
-                double d7 = this.interpolateValue(entity.prevPosY + (double)entity.getEyeHeight() * 0.7D, entity.posY + (double)entity.getEyeHeight() * 0.7D, (double)partialTicks) - d4 * 0.5D - 0.25D;
-                double d8 = this.interpolateValue(entity.prevPosZ, entity.posZ, (double)partialTicks) - d3 * 0.7D + d2 * 0.5D * d5;
-                double d9 = this.interpolateValue((double)entityLivingIn.prevRenderYawOffset, (double)entityLivingIn.renderYawOffset, (double)partialTicks) * 0.01745329238474369D + (Math.PI / 2D);
-                d2 = Math.cos(d9) * (double)entityLivingIn.width * 0.4D;
-                d3 = Math.sin(d9) * (double)entityLivingIn.width * 0.4D;
-                double d10 = this.interpolateValue(entityLivingIn.prevPosX, entityLivingIn.posX, (double)partialTicks) + d2;
-                double d11 = this.interpolateValue(entityLivingIn.prevPosY, entityLivingIn.posY, (double)partialTicks);
-                double d12 = this.interpolateValue(entityLivingIn.prevPosZ, entityLivingIn.posZ, (double)partialTicks) + d3;
+                double d6 = this.interpolateValue(entity.prevPosX, entity.posX, (double) partialTicks) - d2 * 0.7D - d3 * 0.5D * d5;
+                double d7 = this.interpolateValue(entity.prevPosY + (double) entity.getEyeHeight() * 0.7D, entity.posY + (double) entity.getEyeHeight() * 0.7D, (double) partialTicks) - d4 * 0.5D - 0.25D;
+                double d8 = this.interpolateValue(entity.prevPosZ, entity.posZ, (double) partialTicks) - d3 * 0.7D + d2 * 0.5D * d5;
+                double d9 = this.interpolateValue((double) entityLivingIn.prevRenderYawOffset, (double) entityLivingIn.renderYawOffset, (double) partialTicks) * 0.01745329238474369D + (Math.PI / 2D);
+                d2 = Math.cos(d9) * (double) entityLivingIn.width * 0.4D;
+                d3 = Math.sin(d9) * (double) entityLivingIn.width * 0.4D;
+                double d10 = this.interpolateValue(entityLivingIn.prevPosX, entityLivingIn.posX, (double) partialTicks) + d2;
+                double d11 = this.interpolateValue(entityLivingIn.prevPosY, entityLivingIn.posY, (double) partialTicks);
+                double d12 = this.interpolateValue(entityLivingIn.prevPosZ, entityLivingIn.posZ, (double) partialTicks) + d3;
                 x = x + d2;
                 z = z + d3;
-                double d13 = (double)((float)(d6 - d10));
-                double d14 = (double)((float)(d7 - d11));
-                double d15 = (double)((float)(d8 - d12));
+                double d13 = (double) ((float) (d6 - d10));
+                double d14 = (double) ((float) (d7 - d11));
+                double d15 = (double) ((float) (d8 - d12));
                 GlStateManager.disableTexture2D();
                 GlStateManager.disableLighting();
                 GlStateManager.disableCull();
 
-                if (Config.isShaders())
-                {
+                if (Config.isShaders()) {
                     Shaders.beginLeash();
                 }
 
@@ -120,49 +103,44 @@ public abstract class RenderLiving<T extends EntityLiving> extends RendererLivin
                 double d16 = 0.025D;
                 worldrenderer.begin(5, DefaultVertexFormats.POSITION_COLOR);
 
-                for (int j = 0; j <= 24; ++j)
-                {
+                for (int j = 0; j <= 24; ++j) {
                     float f = 0.5F;
                     float f1 = 0.4F;
                     float f2 = 0.3F;
 
-                    if (j % 2 == 0)
-                    {
+                    if (j % 2 == 0) {
                         f *= 0.7F;
                         f1 *= 0.7F;
                         f2 *= 0.7F;
                     }
 
-                    float f3 = (float)j / 24.0F;
-                    worldrenderer.pos(x + d13 * (double)f3 + 0.0D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F), z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
-                    worldrenderer.pos(x + d13 * (double)f3 + 0.025D, y + d14 * (double)(f3 * f3 + f3) * 0.5D + (double)((24.0F - (float)j) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f3).color(f, f1, f2, 1.0F).endVertex();
+                    float f3 = (float) j / 24.0F;
+                    worldrenderer.pos(x + d13 * (double) f3 + 0.0D, y + d14 * (double) (f3 * f3 + f3) * 0.5D + (double) ((24.0F - (float) j) / 18.0F + 0.125F), z + d15 * (double) f3).color(f, f1, f2, 1.0F).endVertex();
+                    worldrenderer.pos(x + d13 * (double) f3 + 0.025D, y + d14 * (double) (f3 * f3 + f3) * 0.5D + (double) ((24.0F - (float) j) / 18.0F + 0.125F) + 0.025D, z + d15 * (double) f3).color(f, f1, f2, 1.0F).endVertex();
                 }
 
                 tessellator.draw();
                 worldrenderer.begin(5, DefaultVertexFormats.POSITION_COLOR);
 
-                for (int k = 0; k <= 24; ++k)
-                {
+                for (int k = 0; k <= 24; ++k) {
                     float f4 = 0.5F;
                     float f5 = 0.4F;
                     float f6 = 0.3F;
 
-                    if (k % 2 == 0)
-                    {
+                    if (k % 2 == 0) {
                         f4 *= 0.7F;
                         f5 *= 0.7F;
                         f6 *= 0.7F;
                     }
 
-                    float f7 = (float)k / 24.0F;
-                    worldrenderer.pos(x + d13 * (double)f7 + 0.0D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F) + 0.025D, z + d15 * (double)f7).color(f4, f5, f6, 1.0F).endVertex();
-                    worldrenderer.pos(x + d13 * (double)f7 + 0.025D, y + d14 * (double)(f7 * f7 + f7) * 0.5D + (double)((24.0F - (float)k) / 18.0F + 0.125F), z + d15 * (double)f7 + 0.025D).color(f4, f5, f6, 1.0F).endVertex();
+                    float f7 = (float) k / 24.0F;
+                    worldrenderer.pos(x + d13 * (double) f7 + 0.0D, y + d14 * (double) (f7 * f7 + f7) * 0.5D + (double) ((24.0F - (float) k) / 18.0F + 0.125F) + 0.025D, z + d15 * (double) f7).color(f4, f5, f6, 1.0F).endVertex();
+                    worldrenderer.pos(x + d13 * (double) f7 + 0.025D, y + d14 * (double) (f7 * f7 + f7) * 0.5D + (double) ((24.0F - (float) k) / 18.0F + 0.125F), z + d15 * (double) f7 + 0.025D).color(f4, f5, f6, 1.0F).endVertex();
                 }
 
                 tessellator.draw();
 
-                if (Config.isShaders())
-                {
+                if (Config.isShaders()) {
                     Shaders.endLeash();
                 }
 
diff --git a/src/main/java/net/minecraft/client/renderer/entity/RenderManager.java b/src/main/java/net/minecraft/client/renderer/entity/RenderManager.java
index 6d32042..035ca97 100644
--- a/src/main/java/net/minecraft/client/renderer/entity/RenderManager.java
+++ b/src/main/java/net/minecraft/client/renderer/entity/RenderManager.java
@@ -1,31 +1,16 @@
 package net.minecraft.client.renderer.entity;
 
 import com.google.common.collect.Maps;
-import java.util.Collections;
-import java.util.Map;
-
+import com.jlmsz.JClient;
+import com.jlmsz.event.impl.RenderEntityEvent;
 import com.jlmsz.util.renderer.IRenderManager;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockBed;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.entity.AbstractClientPlayer;
 import net.minecraft.client.gui.FontRenderer;
-import net.minecraft.client.model.ModelChicken;
-import net.minecraft.client.model.ModelCow;
-import net.minecraft.client.model.ModelHorse;
-import net.minecraft.client.model.ModelOcelot;
-import net.minecraft.client.model.ModelPig;
-import net.minecraft.client.model.ModelRabbit;
-import net.minecraft.client.model.ModelSheep2;
-import net.minecraft.client.model.ModelSlime;
-import net.minecraft.client.model.ModelSquid;
-import net.minecraft.client.model.ModelWolf;
-import net.minecraft.client.model.ModelZombie;
-import net.minecraft.client.renderer.GlStateManager;
-import net.minecraft.client.renderer.OpenGlHelper;
-import net.minecraft.client.renderer.RenderGlobal;
-import net.minecraft.client.renderer.Tessellator;
-import net.minecraft.client.renderer.WorldRenderer;
+import net.minecraft.client.model.*;
+import net.minecraft.client.renderer.*;
 import net.minecraft.client.renderer.culling.ICamera;
 import net.minecraft.client.renderer.texture.TextureManager;
 import net.minecraft.client.renderer.tileentity.RenderEnderCrystal;
@@ -42,95 +27,52 @@ import net.minecraft.entity.ai.EntityMinecartMobSpawner;
 import net.minecraft.entity.boss.EntityDragon;
 import net.minecraft.entity.boss.EntityWither;
 import net.minecraft.entity.effect.EntityLightningBolt;
-import net.minecraft.entity.item.EntityArmorStand;
-import net.minecraft.entity.item.EntityBoat;
-import net.minecraft.entity.item.EntityEnderCrystal;
-import net.minecraft.entity.item.EntityEnderEye;
-import net.minecraft.entity.item.EntityEnderPearl;
-import net.minecraft.entity.item.EntityExpBottle;
-import net.minecraft.entity.item.EntityFallingBlock;
-import net.minecraft.entity.item.EntityFireworkRocket;
-import net.minecraft.entity.item.EntityItem;
-import net.minecraft.entity.item.EntityItemFrame;
-import net.minecraft.entity.item.EntityMinecart;
-import net.minecraft.entity.item.EntityMinecartTNT;
-import net.minecraft.entity.item.EntityPainting;
-import net.minecraft.entity.item.EntityTNTPrimed;
-import net.minecraft.entity.item.EntityXPOrb;
-import net.minecraft.entity.monster.EntityBlaze;
-import net.minecraft.entity.monster.EntityCaveSpider;
-import net.minecraft.entity.monster.EntityCreeper;
-import net.minecraft.entity.monster.EntityEnderman;
-import net.minecraft.entity.monster.EntityEndermite;
-import net.minecraft.entity.monster.EntityGhast;
-import net.minecraft.entity.monster.EntityGiantZombie;
-import net.minecraft.entity.monster.EntityGuardian;
-import net.minecraft.entity.monster.EntityIronGolem;
-import net.minecraft.entity.monster.EntityMagmaCube;
-import net.minecraft.entity.monster.EntityPigZombie;
-import net.minecraft.entity.monster.EntitySilverfish;
-import net.minecraft.entity.monster.EntitySkeleton;
-import net.minecraft.entity.monster.EntitySlime;
-import net.minecraft.entity.monster.EntitySnowman;
-import net.minecraft.entity.monster.EntitySpider;
-import net.minecraft.entity.monster.EntityWitch;
-import net.minecraft.entity.monster.EntityZombie;
-import net.minecraft.entity.passive.EntityBat;
-import net.minecraft.entity.passive.EntityChicken;
-import net.minecraft.entity.passive.EntityCow;
-import net.minecraft.entity.passive.EntityHorse;
-import net.minecraft.entity.passive.EntityMooshroom;
-import net.minecraft.entity.passive.EntityOcelot;
-import net.minecraft.entity.passive.EntityPig;
-import net.minecraft.entity.passive.EntityRabbit;
-import net.minecraft.entity.passive.EntitySheep;
-import net.minecraft.entity.passive.EntitySquid;
-import net.minecraft.entity.passive.EntityVillager;
-import net.minecraft.entity.passive.EntityWolf;
-import net.minecraft.entity.projectile.EntityArrow;
-import net.minecraft.entity.projectile.EntityEgg;
-import net.minecraft.entity.projectile.EntityFishHook;
-import net.minecraft.entity.projectile.EntityLargeFireball;
-import net.minecraft.entity.projectile.EntityPotion;
-import net.minecraft.entity.projectile.EntitySmallFireball;
-import net.minecraft.entity.projectile.EntitySnowball;
-import net.minecraft.entity.projectile.EntityWitherSkull;
+import net.minecraft.entity.item.*;
+import net.minecraft.entity.monster.*;
+import net.minecraft.entity.passive.*;
+import net.minecraft.entity.projectile.*;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
-import net.minecraft.util.AxisAlignedBB;
-import net.minecraft.util.BlockPos;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.Vec3;
+import net.minecraft.util.*;
 import net.minecraft.world.World;
 import net.optifine.entity.model.CustomEntityModels;
 import net.optifine.player.PlayerItemsLayer;
 import net.optifine.reflect.Reflector;
 import net.optifine.shaders.Shaders;
 
-public class RenderManager implements IRenderManager
-{
-    private Map<Class , Render> entityRenderMap = Maps.newHashMap();
+import java.util.Collections;
+import java.util.Map;
+
+public class RenderManager implements IRenderManager {
+    private Map<Class, Render> entityRenderMap = Maps.newHashMap();
     private Map<String, RenderPlayer> skinMap = Maps.<String, RenderPlayer>newHashMap();
     private RenderPlayer playerRenderer;
 
-    /** Renders fonts */
+    /**
+     * Renders fonts
+     */
     private FontRenderer textRenderer;
     private double renderPosX;
     private double renderPosY;
     private double renderPosZ;
     public TextureManager renderEngine;
 
-    /** Reference to the World object. */
+    /**
+     * Reference to the World object.
+     */
     public World worldObj;
 
-    /** Rendermanager's variable for the player */
+    /**
+     * Rendermanager's variable for the player
+     */
     public Entity livingPlayer;
     public Entity pointedEntity;
     public float playerViewY;
     public float playerViewX;
 
-    /** Reference to the GameSettings object. */
+    /**
+     * Reference to the GameSettings object.
+     */
     public GameSettings options;
     public double viewerPosX;
     public double viewerPosY;
@@ -138,12 +80,13 @@ public class RenderManager implements IRenderManager
     private boolean renderOutlines = false;
     private boolean renderShadow = true;
 
-    /** whether bounding box should be rendered or not */
+    /**
+     * whether bounding box should be rendered or not
+     */
     private boolean debugBoundingBox = false;
     public Render renderRender = null;
 
-    public RenderManager(TextureManager renderEngineIn, RenderItem itemRendererIn)
-    {
+    public RenderManager(TextureManager renderEngineIn, RenderItem itemRendererIn) {
         this.renderEngine = renderEngineIn;
         this.entityRenderMap.put(EntityCaveSpider.class, new RenderCaveSpider(this));
         this.entityRenderMap.put(EntitySpider.class, new RenderSpider(this));
@@ -209,237 +152,194 @@ public class RenderManager implements IRenderManager
         this.skinMap.put("slim", new RenderPlayer(this, true));
         PlayerItemsLayer.register(this.skinMap);
 
-        if (Reflector.RenderingRegistry_loadEntityRenderers.exists())
-        {
-            Reflector.call(Reflector.RenderingRegistry_loadEntityRenderers, new Object[] {this, this.entityRenderMap});
+        if (Reflector.RenderingRegistry_loadEntityRenderers.exists()) {
+            Reflector.call(Reflector.RenderingRegistry_loadEntityRenderers, new Object[]{this, this.entityRenderMap});
         }
     }
 
-    public void setRenderPosition(double renderPosXIn, double renderPosYIn, double renderPosZIn)
-    {
+    public void setRenderPosition(double renderPosXIn, double renderPosYIn, double renderPosZIn) {
         this.renderPosX = renderPosXIn;
         this.renderPosY = renderPosYIn;
         this.renderPosZ = renderPosZIn;
     }
 
-    public <T extends Entity> Render<T> getEntityClassRenderObject(Class <? extends Entity > entityClass)
-    {
-        Render <? extends Entity > render = (Render)this.entityRenderMap.get(entityClass);
+    public <T extends Entity> Render<T> getEntityClassRenderObject(Class<? extends Entity> entityClass) {
+        Render<? extends Entity> render = (Render) this.entityRenderMap.get(entityClass);
 
-        if (render == null && entityClass != Entity.class)
-        {
-            render = this.<Entity>getEntityClassRenderObject((Class <? extends Entity >)entityClass.getSuperclass());
+        if (render == null && entityClass != Entity.class) {
+            render = this.<Entity>getEntityClassRenderObject((Class<? extends Entity>) entityClass.getSuperclass());
             this.entityRenderMap.put(entityClass, render);
         }
 
-        return (Render<T>)render;
+        return (Render<T>) render;
     }
 
-    public <T extends Entity> Render<T> getEntityRenderObject(Entity entityIn)
-    {
-        if (entityIn instanceof AbstractClientPlayer)
-        {
-            String s = ((AbstractClientPlayer)entityIn).getSkinType();
-            RenderPlayer renderplayer = (RenderPlayer)this.skinMap.get(s);
-            return (Render<T>)(renderplayer != null ? renderplayer : this.playerRenderer);
-        }
-        else
-        {
+    public <T extends Entity> Render<T> getEntityRenderObject(Entity entityIn) {
+        if (entityIn instanceof AbstractClientPlayer) {
+            String s = ((AbstractClientPlayer) entityIn).getSkinType();
+            RenderPlayer renderplayer = (RenderPlayer) this.skinMap.get(s);
+            return (Render<T>) (renderplayer != null ? renderplayer : this.playerRenderer);
+        } else {
             return this.<T>getEntityClassRenderObject(entityIn.getClass());
         }
     }
 
-    public void cacheActiveRenderInfo(World worldIn, FontRenderer textRendererIn, Entity livingPlayerIn, Entity pointedEntityIn, GameSettings optionsIn, float partialTicks)
-    {
+    public void cacheActiveRenderInfo(World worldIn, FontRenderer textRendererIn, Entity livingPlayerIn, Entity pointedEntityIn, GameSettings optionsIn, float partialTicks) {
         this.worldObj = worldIn;
         this.options = optionsIn;
         this.livingPlayer = livingPlayerIn;
         this.pointedEntity = pointedEntityIn;
         this.textRenderer = textRendererIn;
 
-        if (livingPlayerIn instanceof EntityLivingBase && ((EntityLivingBase)livingPlayerIn).isPlayerSleeping())
-        {
+        if (livingPlayerIn instanceof EntityLivingBase && ((EntityLivingBase) livingPlayerIn).isPlayerSleeping()) {
             IBlockState iblockstate = worldIn.getBlockState(new BlockPos(livingPlayerIn));
             Block block = iblockstate.getBlock();
 
-            if (Reflector.callBoolean(block, Reflector.ForgeBlock_isBed, new Object[] {iblockstate, worldIn, new BlockPos(livingPlayerIn), (EntityLivingBase)livingPlayerIn}))
-            {
-                EnumFacing enumfacing = (EnumFacing)Reflector.call(block, Reflector.ForgeBlock_getBedDirection, new Object[] {iblockstate, worldIn, new BlockPos(livingPlayerIn)});
+            if (Reflector.callBoolean(block, Reflector.ForgeBlock_isBed, new Object[]{iblockstate, worldIn, new BlockPos(livingPlayerIn), (EntityLivingBase) livingPlayerIn})) {
+                EnumFacing enumfacing = (EnumFacing) Reflector.call(block, Reflector.ForgeBlock_getBedDirection, new Object[]{iblockstate, worldIn, new BlockPos(livingPlayerIn)});
                 int i = enumfacing.getHorizontalIndex();
-                this.playerViewY = (float)(i * 90 + 180);
+                this.playerViewY = (float) (i * 90 + 180);
                 this.playerViewX = 0.0F;
-            }
-            else if (block == Blocks.bed)
-            {
-                int j = ((EnumFacing)iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
-                this.playerViewY = (float)(j * 90 + 180);
+            } else if (block == Blocks.bed) {
+                int j = ((EnumFacing) iblockstate.getValue(BlockBed.FACING)).getHorizontalIndex();
+                this.playerViewY = (float) (j * 90 + 180);
                 this.playerViewX = 0.0F;
             }
-        }
-        else
-        {
+        } else {
             this.playerViewY = livingPlayerIn.prevRotationYaw + (livingPlayerIn.rotationYaw - livingPlayerIn.prevRotationYaw) * partialTicks;
             this.playerViewX = livingPlayerIn.prevRotationPitch + (livingPlayerIn.rotationPitch - livingPlayerIn.prevRotationPitch) * partialTicks;
         }
 
-        if (optionsIn.showDebugInfo == 2)
-        {
+        if (optionsIn.showDebugInfo == 2) {
             this.playerViewY += 180.0F;
         }
 
-        this.viewerPosX = livingPlayerIn.lastTickPosX + (livingPlayerIn.posX - livingPlayerIn.lastTickPosX) * (double)partialTicks;
-        this.viewerPosY = livingPlayerIn.lastTickPosY + (livingPlayerIn.posY - livingPlayerIn.lastTickPosY) * (double)partialTicks;
-        this.viewerPosZ = livingPlayerIn.lastTickPosZ + (livingPlayerIn.posZ - livingPlayerIn.lastTickPosZ) * (double)partialTicks;
+        this.viewerPosX = livingPlayerIn.lastTickPosX + (livingPlayerIn.posX - livingPlayerIn.lastTickPosX) * (double) partialTicks;
+        this.viewerPosY = livingPlayerIn.lastTickPosY + (livingPlayerIn.posY - livingPlayerIn.lastTickPosY) * (double) partialTicks;
+        this.viewerPosZ = livingPlayerIn.lastTickPosZ + (livingPlayerIn.posZ - livingPlayerIn.lastTickPosZ) * (double) partialTicks;
     }
 
-    public void setPlayerViewY(float playerViewYIn)
-    {
+    public void setPlayerViewY(float playerViewYIn) {
         this.playerViewY = playerViewYIn;
     }
 
-    public boolean isRenderShadow()
-    {
+    public boolean isRenderShadow() {
         return this.renderShadow;
     }
 
-    public void setRenderShadow(boolean renderShadowIn)
-    {
+    public void setRenderShadow(boolean renderShadowIn) {
         this.renderShadow = renderShadowIn;
     }
 
-    public void setDebugBoundingBox(boolean debugBoundingBoxIn)
-    {
+    public void setDebugBoundingBox(boolean debugBoundingBoxIn) {
         this.debugBoundingBox = debugBoundingBoxIn;
     }
 
-    public boolean isDebugBoundingBox()
-    {
+    public boolean isDebugBoundingBox() {
         return this.debugBoundingBox;
     }
 
-    public boolean renderEntitySimple(Entity entityIn, float partialTicks)
-    {
+    public boolean renderEntitySimple(Entity entityIn, float partialTicks) {
         return this.renderEntityStatic(entityIn, partialTicks, false);
     }
 
-    public boolean shouldRender(Entity entityIn, ICamera camera, double camX, double camY, double camZ)
-    {
+    public boolean shouldRender(Entity entityIn, ICamera camera, double camX, double camY, double camZ) {
         Render<Entity> render = this.<Entity>getEntityRenderObject(entityIn);
         return render != null && render.shouldRender(entityIn, camera, camX, camY, camZ);
     }
 
-    public boolean renderEntityStatic(Entity entity, float partialTicks, boolean hideDebugBox)
-    {
-        if (entity.ticksExisted == 0)
-        {
+    public boolean renderEntityStatic(Entity entity, float partialTicks, boolean hideDebugBox) {
+        if (entity.ticksExisted == 0) {
             entity.lastTickPosX = entity.posX;
             entity.lastTickPosY = entity.posY;
             entity.lastTickPosZ = entity.posZ;
         }
 
-        double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double)partialTicks;
-        double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double)partialTicks;
-        double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double)partialTicks;
+        double d0 = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * (double) partialTicks;
+        double d1 = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * (double) partialTicks;
+        double d2 = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * (double) partialTicks;
         float f = entity.prevRotationYaw + (entity.rotationYaw - entity.prevRotationYaw) * partialTicks;
         int i = entity.getBrightnessForRender(partialTicks);
 
-        if (entity.isBurning())
-        {
+        if (entity.isBurning()) {
             i = 15728880;
         }
 
         int j = i % 65536;
         int k = i / 65536;
-        OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j / 1.0F, (float)k / 1.0F);
+        OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float) j / 1.0F, (float) k / 1.0F);
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         return this.doRenderEntity(entity, d0 - this.renderPosX, d1 - this.renderPosY, d2 - this.renderPosZ, f, partialTicks, hideDebugBox);
     }
 
-    public void renderWitherSkull(Entity entityIn, float partialTicks)
-    {
-        double d0 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double)partialTicks;
-        double d1 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double)partialTicks;
-        double d2 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double)partialTicks;
+    public void renderWitherSkull(Entity entityIn, float partialTicks) {
+        double d0 = entityIn.lastTickPosX + (entityIn.posX - entityIn.lastTickPosX) * (double) partialTicks;
+        double d1 = entityIn.lastTickPosY + (entityIn.posY - entityIn.lastTickPosY) * (double) partialTicks;
+        double d2 = entityIn.lastTickPosZ + (entityIn.posZ - entityIn.lastTickPosZ) * (double) partialTicks;
         Render<Entity> render = this.<Entity>getEntityRenderObject(entityIn);
 
-        if (render != null && this.renderEngine != null)
-        {
+        if (render != null && this.renderEngine != null) {
             int i = entityIn.getBrightnessForRender(partialTicks);
             int j = i % 65536;
             int k = i / 65536;
-            OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)j / 1.0F, (float)k / 1.0F);
+            OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float) j / 1.0F, (float) k / 1.0F);
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             render.renderName(entityIn, d0 - this.renderPosX, d1 - this.renderPosY, d2 - this.renderPosZ);
         }
     }
 
-    public boolean renderEntityWithPosYaw(Entity entityIn, double x, double y, double z, float entityYaw, float partialTicks)
-    {
+    public boolean renderEntityWithPosYaw(Entity entityIn, double x, double y, double z, float entityYaw, float partialTicks) {
         return this.doRenderEntity(entityIn, x, y, z, entityYaw, partialTicks, false);
     }
 
-    public boolean doRenderEntity(Entity entity, double x, double y, double z, float entityYaw, float partialTicks, boolean hideDebugBox)
-    {
+    public boolean doRenderEntity(Entity entity, double x, double y, double z, float entityYaw, float partialTicks, boolean hideDebugBox) {
         Render<Entity> render = null;
+        if (
+                !JClient.EVENT_BUS.invokeEvent(new RenderEntityEvent.Pre(entity, x, y, z, entityYaw, partialTicks, hideDebugBox))) {
+            return true;
+        }
 
-        try
-        {
+        try {
             render = this.<Entity>getEntityRenderObject(entity);
 
-            if (render != null && this.renderEngine != null)
-            {
-                try
-                {
-                    if (render instanceof RendererLivingEntity)
-                    {
-                        ((RendererLivingEntity)render).setRenderOutlines(this.renderOutlines);
+            if (render != null && this.renderEngine != null) {
+                try {
+                    if (render instanceof RendererLivingEntity) {
+                        ((RendererLivingEntity) render).setRenderOutlines(this.renderOutlines);
                     }
 
-                    if (CustomEntityModels.isActive())
-                    {
+                    if (CustomEntityModels.isActive()) {
                         this.renderRender = render;
                     }
 
                     render.doRender(entity, x, y, z, entityYaw, partialTicks);
-                }
-                catch (Throwable throwable2)
-                {
+                } catch (Throwable throwable2) {
                     throw new ReportedException(CrashReport.makeCrashReport(throwable2, "Rendering entity in world"));
                 }
 
-                try
-                {
-                    if (!this.renderOutlines)
-                    {
+                try {
+                    if (!this.renderOutlines) {
                         render.doRenderShadowAndFire(entity, x, y, z, entityYaw, partialTicks);
                     }
-                }
-                catch (Throwable throwable1)
-                {
+                } catch (Throwable throwable1) {
                     throw new ReportedException(CrashReport.makeCrashReport(throwable1, "Post-rendering entity in world"));
                 }
 
-                if (this.debugBoundingBox && !entity.isInvisible() && !hideDebugBox)
-                {
-                    try
-                    {
+                if (this.debugBoundingBox && !entity.isInvisible() && !hideDebugBox) {
+                    try {
                         this.renderDebugBoundingBox(entity, x, y, z, entityYaw, partialTicks);
-                    }
-                    catch (Throwable throwable)
-                    {
+                    } catch (Throwable throwable) {
                         throw new ReportedException(CrashReport.makeCrashReport(throwable, "Rendering entity hitbox in world"));
                     }
                 }
-            }
-            else if (this.renderEngine != null)
-            {
+            } else if (this.renderEngine != null) {
                 return false;
             }
 
+            JClient.EVENT_BUS.invokeEvent(new RenderEntityEvent.Post(entity, x, y, z, entityYaw, partialTicks, hideDebugBox));
+
             return true;
-        }
-        catch (Throwable throwable3)
-        {
+        } catch (Throwable throwable3) {
             CrashReport crashreport = CrashReport.makeCrashReport(throwable3, "Rendering entity in world");
             CrashReportCategory crashreportcategory = crashreport.makeCategory("Entity being rendered");
             entity.addEntityCrashInfo(crashreportcategory);
@@ -455,16 +355,14 @@ public class RenderManager implements IRenderManager
     /**
      * Renders the bounding box around an entity when F3+B is pressed
      *
-     * @param x X position where to render the debug bounding box
-     * @param y Y position where to render the debug bounding box
-     * @param z Z position where to render the debug bounding box
-     * @param entityYaw The entity yaw
+     * @param x            X position where to render the debug bounding box
+     * @param y            Y position where to render the debug bounding box
+     * @param z            Z position where to render the debug bounding box
+     * @param entityYaw    The entity yaw
      * @param partialTicks The partials ticks
      */
-    private void renderDebugBoundingBox(Entity entityIn, double x, double y, double z, float entityYaw, float partialTicks)
-    {
-        if (!Shaders.isShadowPass)
-        {
+    private void renderDebugBoundingBox(Entity entityIn, double x, double y, double z, float entityYaw, float partialTicks) {
+        if (!Shaders.isShadowPass) {
             GlStateManager.depthMask(false);
             GlStateManager.disableTexture2D();
             GlStateManager.disableLighting();
@@ -475,18 +373,17 @@ public class RenderManager implements IRenderManager
             AxisAlignedBB axisalignedbb1 = new AxisAlignedBB(axisalignedbb.minX - entityIn.posX + x, axisalignedbb.minY - entityIn.posY + y, axisalignedbb.minZ - entityIn.posZ + z, axisalignedbb.maxX - entityIn.posX + x, axisalignedbb.maxY - entityIn.posY + y, axisalignedbb.maxZ - entityIn.posZ + z);
             RenderGlobal.drawOutlinedBoundingBox(axisalignedbb1, 255, 255, 255, 255);
 
-            if (entityIn instanceof EntityLivingBase)
-            {
+            if (entityIn instanceof EntityLivingBase) {
                 float f1 = 0.01F;
-                RenderGlobal.drawOutlinedBoundingBox(new AxisAlignedBB(x - (double)f, y + (double)entityIn.getEyeHeight() - 0.009999999776482582D, z - (double)f, x + (double)f, y + (double)entityIn.getEyeHeight() + 0.009999999776482582D, z + (double)f), 255, 0, 0, 255);
+                RenderGlobal.drawOutlinedBoundingBox(new AxisAlignedBB(x - (double) f, y + (double) entityIn.getEyeHeight() - 0.009999999776482582D, z - (double) f, x + (double) f, y + (double) entityIn.getEyeHeight() + 0.009999999776482582D, z + (double) f), 255, 0, 0, 255);
             }
 
             Tessellator tessellator = Tessellator.getInstance();
             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
             Vec3 vec3 = entityIn.getLook(partialTicks);
             worldrenderer.begin(3, DefaultVertexFormats.POSITION_COLOR);
-            worldrenderer.pos(x, y + (double)entityIn.getEyeHeight(), z).color(0, 0, 255, 255).endVertex();
-            worldrenderer.pos(x + vec3.xCoord * 2.0D, y + (double)entityIn.getEyeHeight() + vec3.yCoord * 2.0D, z + vec3.zCoord * 2.0D).color(0, 0, 255, 255).endVertex();
+            worldrenderer.pos(x, y + (double) entityIn.getEyeHeight(), z).color(0, 0, 255, 255).endVertex();
+            worldrenderer.pos(x + vec3.xCoord * 2.0D, y + (double) entityIn.getEyeHeight() + vec3.yCoord * 2.0D, z + vec3.zCoord * 2.0D).color(0, 0, 255, 255).endVertex();
             tessellator.draw();
             GlStateManager.enableTexture2D();
             GlStateManager.enableLighting();
@@ -499,13 +396,11 @@ public class RenderManager implements IRenderManager
     /**
      * World sets this RenderManager's worldObj to the world provided
      */
-    public void set(World worldIn)
-    {
+    public void set(World worldIn) {
         this.worldObj = worldIn;
     }
 
-    public double getDistanceToCamera(double x, double y, double z)
-    {
+    public double getDistanceToCamera(double x, double y, double z) {
         double d0 = x - this.viewerPosX;
         double d1 = y - this.viewerPosY;
         double d2 = z - this.viewerPosZ;
@@ -515,28 +410,23 @@ public class RenderManager implements IRenderManager
     /**
      * Returns the font renderer
      */
-    public FontRenderer getFontRenderer()
-    {
+    public FontRenderer getFontRenderer() {
         return this.textRenderer;
     }
 
-    public void setRenderOutlines(boolean renderOutlinesIn)
-    {
+    public void setRenderOutlines(boolean renderOutlinesIn) {
         this.renderOutlines = renderOutlinesIn;
     }
 
-    public Map<Class, Render> getEntityRenderMap()
-    {
+    public Map<Class, Render> getEntityRenderMap() {
         return this.entityRenderMap;
     }
 
-    public void setEntityRenderMap(Map p_setEntityRenderMap_1_)
-    {
+    public void setEntityRenderMap(Map p_setEntityRenderMap_1_) {
         this.entityRenderMap = p_setEntityRenderMap_1_;
     }
 
-    public Map<String, RenderPlayer> getSkinMap()
-    {
+    public Map<String, RenderPlayer> getSkinMap() {
         return Collections.<String, RenderPlayer>unmodifiableMap(this.skinMap);
     }
 
diff --git a/src/main/java/net/minecraft/client/resources/ResourceIndex.java b/src/main/java/net/minecraft/client/resources/ResourceIndex.java
index f00eaa7..81850c0 100644
--- a/src/main/java/net/minecraft/client/resources/ResourceIndex.java
+++ b/src/main/java/net/minecraft/client/resources/ResourceIndex.java
@@ -7,42 +7,37 @@ import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonParser;
+import net.minecraft.util.JsonUtils;
+import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.Reader;
 import java.util.Map;
 import java.util.Map.Entry;
-import net.minecraft.util.JsonUtils;
-import org.apache.commons.io.IOUtils;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
-public class ResourceIndex
-{
+public class ResourceIndex {
     private static final Logger logger = LogManager.getLogger();
     private final Map<String, File> resourceMap = Maps.<String, File>newHashMap();
 
-    public ResourceIndex(File p_i1047_1_, String p_i1047_2_)
-    {
-        if (p_i1047_2_ != null)
-        {
-            File file1 = new File(p_i1047_1_, "objects");
-            File file2 = new File(p_i1047_1_, "indexes/" + p_i1047_2_ + ".json");
+    public ResourceIndex(File directory, String index) {
+        if (index != null) {
+            File file1 = new File(directory, "objects");
+            File file2 = new File(directory, "indexes/" + index + ".json");
             BufferedReader bufferedreader = null;
 
-            try
-            {
+            try {
                 bufferedreader = Files.newReader(file2, Charsets.UTF_8);
-                JsonObject jsonobject = (new JsonParser()).parse((Reader)bufferedreader).getAsJsonObject();
-                JsonObject jsonobject1 = JsonUtils.getJsonObject(jsonobject, "objects", (JsonObject)null);
+                JsonObject jsonobject = (new JsonParser()).parse((Reader) bufferedreader).getAsJsonObject();
+                JsonObject jsonobject1 = JsonUtils.getJsonObject(jsonobject, "objects", (JsonObject) null);
 
-                if (jsonobject1 != null)
-                {
-                    for (Entry<String, JsonElement> entry : jsonobject1.entrySet())
-                    {
-                        JsonObject jsonobject2 = (JsonObject)entry.getValue();
-                        String s = (String)entry.getKey();
+                if (jsonobject1 != null) {
+                    for (Entry<String, JsonElement> entry : jsonobject1.entrySet()) {
+                        JsonObject jsonobject2 = (JsonObject) entry.getValue();
+                        String s = (String) entry.getKey();
                         String[] astring = s.split("/", 2);
                         String s1 = astring.length == 1 ? astring[0] : astring[0] + ":" + astring[1];
                         String s2 = JsonUtils.getString(jsonobject2, "hash");
@@ -50,24 +45,17 @@ public class ResourceIndex
                         this.resourceMap.put(s1, file3);
                     }
                 }
-            }
-            catch (JsonParseException var20)
-            {
+            } catch (JsonParseException var20) {
                 logger.error("Unable to parse resource index file: " + file2);
-            }
-            catch (FileNotFoundException var21)
-            {
+            } catch (FileNotFoundException var21) {
                 logger.error("Can\'t find the resource index file: " + file2);
-            }
-            finally
-            {
-                IOUtils.closeQuietly((Reader)bufferedreader);
+            } finally {
+                IOUtils.closeQuietly((Reader) bufferedreader);
             }
         }
     }
 
-    public Map<String, File> getResourceMap()
-    {
+    public Map<String, File> getResourceMap() {
         return this.resourceMap;
     }
 }
diff --git a/src/main/java/net/minecraft/network/PacketThreadUtil.java b/src/main/java/net/minecraft/network/PacketThreadUtil.java
index a978b3f..c7b5742 100644
--- a/src/main/java/net/minecraft/network/PacketThreadUtil.java
+++ b/src/main/java/net/minecraft/network/PacketThreadUtil.java
@@ -10,7 +10,7 @@ public class PacketThreadUtil
 {
     public static int lastDimensionId = Integer.MIN_VALUE;
 
-    public static <T extends INetHandler> void checkThreadAndEnqueue(final Packet<T> p_180031_0_, final T p_180031_1_, IThreadListener p_180031_2_) throws ThreadQuickExitException
+    public static <T extends INetHandler> void checkThreadAndEnqueue(final Packet<T> packet, final T netHandler, IThreadListener p_180031_2_) throws ThreadQuickExitException
     {
         if (!p_180031_2_.isCallingFromMinecraftThread())
         {
@@ -18,15 +18,15 @@ public class PacketThreadUtil
             {
                 public void run()
                 {
-                    PacketThreadUtil.clientPreProcessPacket(p_180031_0_);
-                    p_180031_0_.processPacket(p_180031_1_);
+                    PacketThreadUtil.clientPreProcessPacket(packet);
+                    packet.processPacket(netHandler);
                 }
             });
             throw ThreadQuickExitException.INSTANCE;
         }
         else
         {
-            clientPreProcessPacket(p_180031_0_);
+            clientPreProcessPacket(packet);
         }
     }
 
-- 
2.34.1

