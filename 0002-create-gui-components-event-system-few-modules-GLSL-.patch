From 32f7be25650f39ccc86e33976c4f48edbef6ff9a Mon Sep 17 00:00:00 2001
From: Jose Martinez <jmart652@montgomerycollege.edu>
Date: Sun, 22 Jun 2025 22:26:39 -0400
Subject: [PATCH 02/60] create gui, components, event system, few modules, GLSL
 shader

---
 src/main/java/com/jlmsz/JClient.java          |  23 +
 src/main/java/com/jlmsz/event/Event.java      |  23 +
 src/main/java/com/jlmsz/event/EventBus.java   | 106 +++
 .../java/com/jlmsz/event/EventHandler.java    |   9 +
 .../event/EventNotCancellableException.java   |   7 +
 .../event/impl/CrosshairRenderEvent.java      |  10 +
 .../jlmsz/event/impl/GameStartedEvent.java    |   6 +
 .../com/jlmsz/event/impl/RenderEvent.java     |  13 +
 .../com/jlmsz/gui/component/IComponent.java   |  18 +
 .../gui/component/impl/CheckboxComponent.java |  57 ++
 .../component/impl/ColorPickerComponent.java  | 235 ++++++
 .../component/impl/CrosshairComponent.java    |  99 +++
 .../impl/CrosshairPreviewComponent.java       |  93 +++
 .../gui/component/impl/SliderComponent.java   | 119 ++++
 .../jlmsz/gui/interfaces/IPanelSwitcher.java  |   9 +
 .../jlmsz/gui/settings/SettingsButton.java    | 124 ++++
 .../com/jlmsz/gui/settings/SettingsGui.java   | 128 ++++
 .../jlmsz/gui/settings/card/ModuleCard.java   |  84 +++
 .../settings/panel/ConfigureModulePanel.java  | 141 ++++
 .../gui/settings/panel/ModulesPanel.java      | 106 +++
 .../gui/settings/panel/ScrollablePanel.java   |  55 ++
 .../gui/settings/panel/SettingsPanel.java     |  19 +
 .../settings/panel/factory/PanelFactory.java  |  23 +
 src/main/java/com/jlmsz/module/Module.java    |  53 ++
 .../java/com/jlmsz/module/ModuleCategory.java |  10 +
 .../java/com/jlmsz/module/ModuleRegistry.java |  38 +
 .../module/config/BooleanModuleSetting.java   |  12 +
 .../module/config/ColorModuleSetting.java     |  29 +
 .../module/config/CrosshairModuleSetting.java |  10 +
 .../module/config/DoubleModuleSetting.java    |  16 +
 .../jlmsz/module/config/IntModuleSetting.java |  14 +
 .../jlmsz/module/config/ModuleSetting.java    |  25 +
 .../module/config/NumericModuleSetting.java   |  24 +
 .../module/config/StringModuleSetting.java    |   9 +
 .../jlmsz/module/impl/CrosshairModule.java    |  97 +++
 .../com/jlmsz/module/impl/SprintModule.java   |  27 +
 src/main/java/com/jlmsz/util/GuiUtil.java     | 201 ++++++
 .../java/net/minecraft/client/Minecraft.java  |  53 +-
 .../client/entity/EntityPlayerSP.java         |   4 +-
 .../net/minecraft/client/gui/GuiControls.java |   4 +-
 .../net/minecraft/client/gui/GuiIngame.java   | 667 +++++++-----------
 .../client/gui/GuiKeyBindingList.java         |   4 +-
 .../minecraft/client/gui/GuiScreenDemo.java   |   6 +-
 .../client/gui/GuiScreenServerList.java       |   4 +-
 .../client/gui/GuiVideoSettings.java          |   4 +-
 .../client/gui/ScaledResolution.java          |   2 +-
 .../gui/achievement/GuiAchievements.java      |   2 +-
 .../client/gui/inventory/GuiContainer.java    |  14 +-
 .../gui/inventory/GuiContainerCreative.java   |   2 +-
 .../client/network/NetHandlerPlayClient.java  |  10 +-
 .../client/renderer/EntityRenderer.java       |   8 +-
 .../client/renderer/RenderGlobal.java         |   4 +-
 .../renderer/tileentity/RenderItemFrame.java  |   2 +-
 .../tileentity/TileEntitySignRenderer.java    |   2 +-
 .../client/resources/DefaultResourcePack.java |   2 +-
 .../client/settings/GameSettings.java         | 298 ++++----
 .../minecraft/client/shader/Framebuffer.java  |   1 +
 .../server/integrated/IntegratedServer.java   |   6 +-
 .../util/MovementInputFromOptions.java        |  12 +-
 .../net/minecraft/util/ScreenShotHelper.java  |   6 +-
 src/main/java/net/optifine/LightMap.java      |   2 +-
 .../java/net/optifine/shaders/Shaders.java    |   2 +-
 .../assets/jclient/shaders/hsv_box.frag       |  48 ++
 .../assets/jclient/shaders/hsv_box.vert       |  12 +
 .../assets/jclient/shaders/hsv_slider.frag    |  47 ++
 .../assets/minecraft/lang/en_US.lang          |   1 +
 66 files changed, 2647 insertions(+), 654 deletions(-)
 create mode 100644 src/main/java/com/jlmsz/JClient.java
 create mode 100644 src/main/java/com/jlmsz/event/Event.java
 create mode 100644 src/main/java/com/jlmsz/event/EventBus.java
 create mode 100644 src/main/java/com/jlmsz/event/EventHandler.java
 create mode 100644 src/main/java/com/jlmsz/event/EventNotCancellableException.java
 create mode 100644 src/main/java/com/jlmsz/event/impl/CrosshairRenderEvent.java
 create mode 100644 src/main/java/com/jlmsz/event/impl/GameStartedEvent.java
 create mode 100644 src/main/java/com/jlmsz/event/impl/RenderEvent.java
 create mode 100644 src/main/java/com/jlmsz/gui/component/IComponent.java
 create mode 100644 src/main/java/com/jlmsz/gui/component/impl/CheckboxComponent.java
 create mode 100644 src/main/java/com/jlmsz/gui/component/impl/ColorPickerComponent.java
 create mode 100644 src/main/java/com/jlmsz/gui/component/impl/CrosshairComponent.java
 create mode 100644 src/main/java/com/jlmsz/gui/component/impl/CrosshairPreviewComponent.java
 create mode 100644 src/main/java/com/jlmsz/gui/component/impl/SliderComponent.java
 create mode 100644 src/main/java/com/jlmsz/gui/interfaces/IPanelSwitcher.java
 create mode 100644 src/main/java/com/jlmsz/gui/settings/SettingsButton.java
 create mode 100644 src/main/java/com/jlmsz/gui/settings/SettingsGui.java
 create mode 100644 src/main/java/com/jlmsz/gui/settings/card/ModuleCard.java
 create mode 100644 src/main/java/com/jlmsz/gui/settings/panel/ConfigureModulePanel.java
 create mode 100644 src/main/java/com/jlmsz/gui/settings/panel/ModulesPanel.java
 create mode 100644 src/main/java/com/jlmsz/gui/settings/panel/ScrollablePanel.java
 create mode 100644 src/main/java/com/jlmsz/gui/settings/panel/SettingsPanel.java
 create mode 100644 src/main/java/com/jlmsz/gui/settings/panel/factory/PanelFactory.java
 create mode 100644 src/main/java/com/jlmsz/module/Module.java
 create mode 100644 src/main/java/com/jlmsz/module/ModuleCategory.java
 create mode 100644 src/main/java/com/jlmsz/module/ModuleRegistry.java
 create mode 100644 src/main/java/com/jlmsz/module/config/BooleanModuleSetting.java
 create mode 100644 src/main/java/com/jlmsz/module/config/ColorModuleSetting.java
 create mode 100644 src/main/java/com/jlmsz/module/config/CrosshairModuleSetting.java
 create mode 100644 src/main/java/com/jlmsz/module/config/DoubleModuleSetting.java
 create mode 100644 src/main/java/com/jlmsz/module/config/IntModuleSetting.java
 create mode 100644 src/main/java/com/jlmsz/module/config/ModuleSetting.java
 create mode 100644 src/main/java/com/jlmsz/module/config/NumericModuleSetting.java
 create mode 100644 src/main/java/com/jlmsz/module/config/StringModuleSetting.java
 create mode 100644 src/main/java/com/jlmsz/module/impl/CrosshairModule.java
 create mode 100644 src/main/java/com/jlmsz/module/impl/SprintModule.java
 create mode 100644 src/main/java/com/jlmsz/util/GuiUtil.java
 create mode 100644 src/main/resources/assets/jclient/shaders/hsv_box.frag
 create mode 100644 src/main/resources/assets/jclient/shaders/hsv_box.vert
 create mode 100644 src/main/resources/assets/jclient/shaders/hsv_slider.frag

diff --git a/src/main/java/com/jlmsz/JClient.java b/src/main/java/com/jlmsz/JClient.java
new file mode 100644
index 0000000..d97b594
--- /dev/null
+++ b/src/main/java/com/jlmsz/JClient.java
@@ -0,0 +1,23 @@
+package com.jlmsz;
+
+import com.jlmsz.event.EventBus;
+import com.jlmsz.event.EventHandler;
+import com.jlmsz.event.impl.GameStartedEvent;
+import com.jlmsz.module.ModuleRegistry;
+import net.minecraft.util.ResourceLocation;
+
+public class JClient {
+    public static final EventBus EVENT_BUS = new EventBus();
+    public static JClient instance = new JClient();
+    public static final ResourceLocation ui = new ResourceLocation("jclient", "textures/gui/ui.png");
+
+    public JClient() {
+        EVENT_BUS.registerListener(this);
+    }
+
+    @EventHandler
+    public void handleEvent(GameStartedEvent event) {
+        ModuleRegistry.init();
+        System.out.println("jClient has started!!!");
+    }
+}
diff --git a/src/main/java/com/jlmsz/event/Event.java b/src/main/java/com/jlmsz/event/Event.java
new file mode 100644
index 0000000..d1e9103
--- /dev/null
+++ b/src/main/java/com/jlmsz/event/Event.java
@@ -0,0 +1,23 @@
+package com.jlmsz.event;
+
+public class Event {
+    private boolean cancellable = false;
+    private boolean cancelled = false;
+
+    public Event(boolean cancellable) {
+        this.cancellable = cancellable;
+    }
+
+    public Event() {
+        this(false);
+    }
+
+    public void setCancelled(boolean cancelled) {
+        if (!cancellable) throw new EventNotCancellableException();
+        this.cancelled = cancelled;
+    }
+
+    public boolean isCancelled() {
+        return cancelled;
+    }
+}
diff --git a/src/main/java/com/jlmsz/event/EventBus.java b/src/main/java/com/jlmsz/event/EventBus.java
new file mode 100644
index 0000000..0225bba
--- /dev/null
+++ b/src/main/java/com/jlmsz/event/EventBus.java
@@ -0,0 +1,106 @@
+package com.jlmsz.event;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.lang.reflect.Parameter;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+
+class HandlerInfo {
+    Object listener;
+    Method method;
+
+    public HandlerInfo(Object listener, Method method) {
+        this.listener = listener;
+        this.method = method;
+    }
+}
+
+public class EventBus {
+
+    HashMap<Class<? extends Event>, List<HandlerInfo>> eventHandlers = new HashMap<>();
+
+    public void registerListener(Object object) {
+        Class<?> clazz = object.getClass();
+
+        boolean found = false;
+        Method[] methods = clazz.getDeclaredMethods();
+        for (Method method : methods) {
+            if (Modifier.isStatic(method.getModifiers())) continue;
+
+            Annotation[] annotations = method.getDeclaredAnnotations();
+            for (Annotation annotation : annotations) {
+                if (annotation.annotationType().equals(EventHandler.class)) {
+                    // Found event handler method
+                    Parameter[] params = method.getParameters();
+                    if (params.length != 1) {
+                        System.out.printf("Event handler method %s has too many parameters!", method.getName());
+                        continue;
+                    }
+                    Parameter firstParam = params[0];
+                    Class<?> unknownClass = firstParam.getType();
+                    if (Event.class.isAssignableFrom(unknownClass)) {
+                        try {
+                            Class<? extends Event> eventClass = unknownClass.asSubclass(Event.class);
+                            HandlerInfo info = new HandlerInfo(object, method);
+                            if (eventHandlers.containsKey(eventClass)) {
+                                List<HandlerInfo> handlers = eventHandlers.get(eventClass);
+                                boolean duplicate = false;
+                                for (HandlerInfo otherInfo : handlers) {
+                                    if (otherInfo.listener == object) {
+                                        System.out.printf("Warning: Event handler method %s already registered!\n", method.getName());
+                                        duplicate = true;
+                                        break;
+                                    }
+                                }
+                                if (!duplicate) {
+                                    handlers.add(info);
+                                }
+                            } else {
+                                List<HandlerInfo> newHandlers = new ArrayList<>();
+                                newHandlers.add(info);
+                                eventHandlers.put(eventClass, newHandlers);
+                            }
+                        } catch (ClassCastException ex) {
+                            ex.printStackTrace();
+                        }
+                    }
+                    found = true;
+                }
+            }
+        }
+
+        if (!found) {
+            System.out.println("Warning: registered event class with no handlers!");
+        }
+    }
+
+    /**
+     * Invokes and passes the event to all registered event handlers
+     *
+     * @param event The event being invoked
+     * @return false if the event has been cancelled, true otherwise
+     */
+    public boolean invokeEvent(Event event) {
+        Class<? extends Event> clazz = event.getClass();
+        if (!eventHandlers.containsKey(clazz)) return true;
+
+        List<HandlerInfo> handlers = eventHandlers.get(clazz);
+        for (HandlerInfo handler : handlers) {
+            try {
+                handler.method.invoke(handler.listener, event);
+            } catch (IllegalAccessException | InvocationTargetException e) {
+                e.printStackTrace();
+            }
+        }
+
+        if (event.isCancelled()) {
+            return false;
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/com/jlmsz/event/EventHandler.java b/src/main/java/com/jlmsz/event/EventHandler.java
new file mode 100644
index 0000000..8585ea7
--- /dev/null
+++ b/src/main/java/com/jlmsz/event/EventHandler.java
@@ -0,0 +1,9 @@
+package com.jlmsz.event;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface EventHandler {
+
+}
diff --git a/src/main/java/com/jlmsz/event/EventNotCancellableException.java b/src/main/java/com/jlmsz/event/EventNotCancellableException.java
new file mode 100644
index 0000000..a89e57a
--- /dev/null
+++ b/src/main/java/com/jlmsz/event/EventNotCancellableException.java
@@ -0,0 +1,7 @@
+package com.jlmsz.event;
+
+public class EventNotCancellableException extends RuntimeException {
+    public EventNotCancellableException() {
+        super("A non-cancellable event cannot be cancelled");
+    }
+}
diff --git a/src/main/java/com/jlmsz/event/impl/CrosshairRenderEvent.java b/src/main/java/com/jlmsz/event/impl/CrosshairRenderEvent.java
new file mode 100644
index 0000000..f553563
--- /dev/null
+++ b/src/main/java/com/jlmsz/event/impl/CrosshairRenderEvent.java
@@ -0,0 +1,10 @@
+package com.jlmsz.event.impl;
+
+import com.jlmsz.event.Event;
+
+public class CrosshairRenderEvent extends Event {
+
+    public CrosshairRenderEvent() {
+        super(true);
+    }
+}
diff --git a/src/main/java/com/jlmsz/event/impl/GameStartedEvent.java b/src/main/java/com/jlmsz/event/impl/GameStartedEvent.java
new file mode 100644
index 0000000..0b32f4c
--- /dev/null
+++ b/src/main/java/com/jlmsz/event/impl/GameStartedEvent.java
@@ -0,0 +1,6 @@
+package com.jlmsz.event.impl;
+
+import com.jlmsz.event.Event;
+
+public class GameStartedEvent extends Event {
+}
diff --git a/src/main/java/com/jlmsz/event/impl/RenderEvent.java b/src/main/java/com/jlmsz/event/impl/RenderEvent.java
new file mode 100644
index 0000000..8e39478
--- /dev/null
+++ b/src/main/java/com/jlmsz/event/impl/RenderEvent.java
@@ -0,0 +1,13 @@
+package com.jlmsz.event.impl;
+
+import com.jlmsz.event.Event;
+
+public class RenderEvent {
+    public static class Pre extends Event {
+
+    }
+
+    public static class Post extends Event {
+
+    }
+}
diff --git a/src/main/java/com/jlmsz/gui/component/IComponent.java b/src/main/java/com/jlmsz/gui/component/IComponent.java
new file mode 100644
index 0000000..f13e6c8
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/component/IComponent.java
@@ -0,0 +1,18 @@
+package com.jlmsz.gui.component;
+
+public interface IComponent {
+
+    void renderComponent(int mouseX, int mouseY);
+
+    void mouseDragged(int mouseX, int mouseY);
+
+    void mouseReleased(int mouseX, int mouseY, int state);
+    void mouseClicked(int mouseX, int mouseY, int mouseButton);
+
+    int getHeight();
+//    double getMin();
+//
+//    double getMax();
+//
+//    double getValue();
+}
\ No newline at end of file
diff --git a/src/main/java/com/jlmsz/gui/component/impl/CheckboxComponent.java b/src/main/java/com/jlmsz/gui/component/impl/CheckboxComponent.java
new file mode 100644
index 0000000..7b46372
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/component/impl/CheckboxComponent.java
@@ -0,0 +1,57 @@
+package com.jlmsz.gui.component.impl;
+
+import com.jlmsz.JClient;
+import com.jlmsz.gui.component.IComponent;
+import com.jlmsz.module.config.BooleanModuleSetting;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.Gui;
+
+public class CheckboxComponent extends Gui implements IComponent {
+
+    private final BooleanModuleSetting setting;
+    private int x;
+    private int y;
+    private final int width = 16;
+    private final int height = 16;
+    private final Minecraft mc = Minecraft.getMinecraft();
+
+    public CheckboxComponent(BooleanModuleSetting setting, int x, int y) {
+        this.setting = setting;
+        this.x = x;
+        this.y = y;
+    }
+
+    @Override
+    public void renderComponent(int mouseX, int mouseY) {
+        // render 64x64 border box
+//        drawRect(x, y, x + width, y + width, 0xFFFFFFFF);
+        mc.getTextureManager().bindTexture(JClient.ui);
+        if (setting.getValue()) {
+            drawTexturedModalRect(x, y, 16, 0, 16, 16);
+        } else {
+            drawTexturedModalRect(x, y, 0, 0, 16, 16);
+        }
+    }
+
+    @Override
+    public void mouseDragged(int mouseX, int mouseY) {
+
+    }
+
+    @Override
+    public void mouseReleased(int mouseX, int mouseY, int state) {
+
+    }
+
+    @Override
+    public void mouseClicked(int mouseX, int mouseY, int mouseButton) {
+        if (mouseX >= x && mouseX <= x + width && mouseY >= y && mouseY <= y + height) {
+            setting.setValue(!setting.getValue());
+        }
+    }
+
+    @Override
+    public int getHeight() {
+        return height;
+    }
+}
diff --git a/src/main/java/com/jlmsz/gui/component/impl/ColorPickerComponent.java b/src/main/java/com/jlmsz/gui/component/impl/ColorPickerComponent.java
new file mode 100644
index 0000000..607c77d
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/component/impl/ColorPickerComponent.java
@@ -0,0 +1,235 @@
+package com.jlmsz.gui.component.impl;
+
+import com.jlmsz.gui.component.IComponent;
+import com.jlmsz.module.impl.CrosshairModule;
+import com.jlmsz.util.GuiUtil;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.Gui;
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL15;
+import org.lwjgl.opengl.GL20;
+import org.lwjgl.opengl.GL30;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.nio.FloatBuffer;
+
+public class ColorPickerComponent extends Gui implements IComponent {
+    private int x;
+    private int y;
+    private final int boxWidth = 200;
+    private final int sliderWidth = 20;
+    private final int height = 200;
+    private final Minecraft mc = Minecraft.getMinecraft();
+
+    // Box fields
+    private int boxProgramID = -1;
+    private int boxVao = -1;
+
+    // fragment shader variables
+    private int boxQuadSizeLoc;
+    private int boxHueLoc;
+
+    // vertex shader variables
+    private int boxScreenSizeLoc;
+
+    // fragment + vertex shader variables
+    private int boxQuadOffsetLoc;
+
+    // Slider fields
+    private int sliderProgramID = -1;
+    private int sliderVao = -1;
+
+    // vertical slider shader variables
+    private int sliderScreenSizeLoc;
+    private int sliderQuadOffsetLoc;
+    private int sliderQuadSizeLoc;
+
+    public ColorPickerComponent(int x, int y) {
+        this.x = x;
+        this.y = y;
+        initBox();
+        initSlider();
+    }
+
+    private void initBox() {
+        boxProgramID = GL20.glCreateProgram();
+        loadShader(boxProgramID, "/assets/jclient/shaders/hsv_box.frag", GL20.GL_FRAGMENT_SHADER);
+        loadShader(boxProgramID, "/assets/jclient/shaders/hsv_box.vert", GL20.GL_VERTEX_SHADER);
+        GL20.glLinkProgram(boxProgramID);
+
+        boxQuadSizeLoc = GL20.glGetUniformLocation(boxProgramID, "quadSize");
+        boxQuadOffsetLoc = GL20.glGetUniformLocation(boxProgramID, "quadOffset");
+        boxHueLoc = GL20.glGetUniformLocation(boxProgramID, "hue");
+
+        boxScreenSizeLoc = GL20.glGetUniformLocation(boxProgramID, "screenSize");
+
+        FloatBuffer vertexBuffer = BufferUtils.createFloatBuffer(8); // 4 vertices * 2 floats each
+        vertexBuffer.put(new float[]{
+                0, height,
+                0, 0,
+                boxWidth, height,
+                boxWidth, 0
+        });
+
+        vertexBuffer.flip();
+
+        // Create and bind VAO and VBO
+        this.boxVao = GL30.glGenVertexArrays();
+        GL30.glBindVertexArray(boxVao);
+
+        int boxVbo = GL15.glGenBuffers();
+        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, boxVbo);
+        GL15.glBufferData(GL15.GL_ARRAY_BUFFER, vertexBuffer, GL15.GL_STATIC_DRAW);
+
+        GL20.glEnableVertexAttribArray(0); // attribute 0 = position
+        GL20.glVertexAttribPointer(0, 2, GL11.GL_FLOAT, false, 0, 0);
+
+
+        // Unbind buffer
+        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+        GL30.glBindVertexArray(0);
+    }
+
+    private void initSlider() {
+        sliderProgramID = GL20.glCreateProgram();
+        if (!loadShader(sliderProgramID, "/assets/jclient/shaders/hsv_slider.frag", GL20.GL_FRAGMENT_SHADER)) {
+            System.exit(0);
+        }
+
+        if (!loadShader(sliderProgramID, "/assets/jclient/shaders/hsv_box.vert", GL20.GL_VERTEX_SHADER)) System.exit(0);
+        GL20.glLinkProgram(sliderProgramID);
+
+        sliderQuadSizeLoc = GL20.glGetUniformLocation(sliderProgramID, "quadSize");
+        sliderQuadOffsetLoc = GL20.glGetUniformLocation(sliderProgramID, "quadOffset");
+        sliderScreenSizeLoc = GL20.glGetUniformLocation(sliderProgramID, "screenSize");
+
+        FloatBuffer vertexBuffer = BufferUtils.createFloatBuffer(8); // 4 vertices * 2 floats each
+        vertexBuffer.put(new float[]{
+                0, height,
+                0, 0,
+                boxWidth, height,
+                boxWidth, 0
+        });
+
+        vertexBuffer.flip();
+
+        // Create and bind VAO and VBO
+        this.sliderVao = GL30.glGenVertexArrays();
+        GL30.glBindVertexArray(sliderVao);
+
+        int boxVbo = GL15.glGenBuffers();
+        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, boxVbo);
+        GL15.glBufferData(GL15.GL_ARRAY_BUFFER, vertexBuffer, GL15.GL_STATIC_DRAW);
+
+        GL20.glEnableVertexAttribArray(0); // attribute 0 = position
+        GL20.glVertexAttribPointer(0, 2, GL11.GL_FLOAT, false, 0, 0);
+
+        // Unbind buffer
+        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+        GL30.glBindVertexArray(0);
+    }
+
+    private boolean loadShader(int programID, String resource, int type) {
+        try (InputStream hsvBoxStream = CrosshairModule.class.getResourceAsStream(resource)) {
+            if (hsvBoxStream == null) {
+                System.out.println("Failed to get " + resource + " shader asset");
+                return false;
+            }
+
+            StringBuilder sb = new StringBuilder();
+            BufferedReader reader = new BufferedReader(new InputStreamReader(hsvBoxStream));
+            String line;
+            while ((line = reader.readLine()) != null) {
+                sb.append(line).append("\n");
+            }
+
+            String glslShader = sb.toString();
+
+            int shaderID = GL20.glCreateShader(type);
+            GL20.glShaderSource(shaderID, glslShader);
+            GL20.glCompileShader(shaderID);
+            int status = GL20.glGetShaderi(shaderID, GL20.GL_COMPILE_STATUS);
+            if (status != GL11.GL_TRUE) {
+                String log = GL20.glGetShaderInfoLog(shaderID, 1024);
+                System.out.println("GL Shader compilation FAILED: " + log);
+                return false;
+            }
+
+            GL20.glAttachShader(programID, shaderID);
+            return true;
+        } catch (IOException ex) {
+            System.out.println("Failed to load shader:");
+            ex.printStackTrace();
+            return false;
+        }
+    }
+
+    private void renderBox() {
+        GL20.glUseProgram(boxProgramID);
+        GL30.glBindVertexArray(boxVao);
+
+        // Set uniforms
+        GL20.glUniform2f(boxQuadOffsetLoc, x, mc.displayHeight - y - height);
+        GL20.glUniform2f(boxQuadSizeLoc, boxWidth, height); // <-- THIS IS CRUCIAL
+        GL20.glUniform1f(boxHueLoc, 0.4f);
+        GL20.glUniform2f(boxScreenSizeLoc, mc.displayWidth, mc.displayHeight);
+
+        GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+
+        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+        GL30.glBindVertexArray(0);
+        GL20.glUseProgram(0);
+    }
+
+    private void renderSlider() {
+        GL20.glUseProgram(sliderProgramID);
+        GL30.glBindVertexArray(sliderVao);
+
+        // Set uniforms
+        GL20.glUniform2f(sliderQuadOffsetLoc, x + 200 + 5, mc.displayHeight - y - height);
+        GL20.glUniform2f(sliderQuadSizeLoc, sliderWidth, height); // <-- THIS IS CRUCIAL
+        GL20.glUniform2f(sliderScreenSizeLoc, mc.displayWidth, mc.displayHeight);
+
+        GL11.glDrawArrays(GL11.GL_TRIANGLE_STRIP, 0, 4);
+
+        GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
+        GL30.glBindVertexArray(0);
+        GL20.glUseProgram(0);
+    }
+
+    private void renderBorder() {
+        int border = 2;
+        GuiUtil.drawUnscaledRect(x - border, y - border, x + boxWidth + 5 + sliderWidth + border, y + height + border, 0xFFDDDDDD);
+    }
+
+    @Override
+    public void renderComponent(int mouseX, int mouseY) {
+        renderBorder();
+        renderBox();
+        renderSlider();
+    }
+
+    @Override
+    public void mouseDragged(int mouseX, int mouseY) {
+
+    }
+
+    @Override
+    public void mouseReleased(int mouseX, int mouseY, int state) {
+
+    }
+
+    @Override
+    public void mouseClicked(int mouseX, int mouseY, int mouseButton) {
+
+    }
+
+    @Override
+    public int getHeight() {
+        return height;
+    }
+}
diff --git a/src/main/java/com/jlmsz/gui/component/impl/CrosshairComponent.java b/src/main/java/com/jlmsz/gui/component/impl/CrosshairComponent.java
new file mode 100644
index 0000000..9e5ea4a
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/component/impl/CrosshairComponent.java
@@ -0,0 +1,99 @@
+package com.jlmsz.gui.component.impl;
+
+import com.jlmsz.gui.component.IComponent;
+import com.jlmsz.module.config.CrosshairModuleSetting;
+import com.jlmsz.module.impl.CrosshairModule;
+import com.jlmsz.util.GuiUtil;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.Gui;
+import net.minecraft.client.renderer.GlStateManager;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class CrosshairComponent extends Gui implements IComponent {
+    private final CrosshairModuleSetting setting;
+    private int x;
+    private int y;
+    private final Minecraft mc = Minecraft.getMinecraft();
+    private int crosshair = 0;
+    private final List<IValueChange> changeCallbacks = new ArrayList<>();
+    private final int scale = 5;
+
+    public CrosshairComponent(CrosshairModuleSetting setting, int x, int y) {
+        this.setting = setting;
+        this.x = x;
+        this.y = y;
+    }
+
+    @Override
+    public void renderComponent(int mouseX, int mouseY) {
+        this.mc.getTextureManager().bindTexture(CrosshairModule.crosshairs);
+        int xOffset = 0;
+
+        int i = 0;
+        for (CrosshairModule.CrosshairOffset offset : CrosshairModule.crosshairOffsets) {
+            GlStateManager.pushMatrix();
+            GlStateManager.scale(scale, scale, 0);
+            GuiUtil.drawUnscaledRect((x + xOffset - 5) / scale, (y) / scale, (x + xOffset + 9 * scale + 5) / scale, (y + 9 * scale +10) / scale, setting.getValue() == i ? 0xFFFF0000 : 0xFF000000);
+            GlStateManager.color(1f, 1f, 1f);
+            this.mc.ingameGUI.drawTexturedModalRect((x + xOffset) / scale, (y+5) / scale, offset.x, offset.y, 9, 9);
+            GlStateManager.popMatrix();
+            xOffset += 9 * scale + 20;
+            i++;
+        }
+    }
+
+    //    public void onValueChange(IValueChange callback) {
+//        this.changeCallbacks.add(callback);
+//    }
+//
+    public void fireValueChange() {
+//        for (IValueChange cb : changeCallbacks) {
+//            cb.callback(this.crosshair);
+//        }
+        setting.setValue(this.crosshair);
+    }
+
+    @Override
+    public void mouseDragged(int mouseX, int mouseY) {
+
+    }
+
+    @Override
+    public void mouseReleased(int mouseX, int mouseY, int state) {
+
+    }
+
+    @Override
+    public void mouseClicked(int mouseX, int mouseY, int mouseButton) {
+        int xOffset = 0;
+
+        int scale = 5;
+        for (int i = 0; i < CrosshairModule.crosshairOffsets.size(); i++) {
+//            GuiUtil.drawUnscaledRect((x + xOffset - 5) / scale, (y - 5) / scale, (x + xOffset + 9 * scale + 5) / scale, (y + 9 * scale + 5) / scale, 0xFFFFFFFF);
+            int left = (x + xOffset - 5);
+            int top = (y - 5);
+            int right = (x + xOffset + 9 * scale + 5);
+            int bottom = (y + 9 * scale + 5);
+
+            if (mouseX >= left && mouseX <= right && mouseY >= top && mouseY <= bottom) {
+                crosshair = i;
+                this.fireValueChange();
+                break;
+            }
+
+            xOffset += 9 * scale + 20;
+        }
+    }
+
+
+    public interface IValueChange {
+        void callback(int value);
+    }
+
+    @Override
+    public int getHeight() {
+        return 9 * scale + 5;
+    }
+}
diff --git a/src/main/java/com/jlmsz/gui/component/impl/CrosshairPreviewComponent.java b/src/main/java/com/jlmsz/gui/component/impl/CrosshairPreviewComponent.java
new file mode 100644
index 0000000..b1cce93
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/component/impl/CrosshairPreviewComponent.java
@@ -0,0 +1,93 @@
+package com.jlmsz.gui.component.impl;
+
+import com.jlmsz.gui.component.IComponent;
+import com.jlmsz.module.config.CrosshairModuleSetting;
+import com.jlmsz.module.config.DoubleModuleSetting;
+import com.jlmsz.module.impl.CrosshairModule;
+import com.jlmsz.util.GuiUtil;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.Gui;
+import net.minecraft.client.gui.ScaledResolution;
+import net.minecraft.client.renderer.GlStateManager;
+import net.minecraft.client.renderer.Tessellator;
+import net.minecraft.client.renderer.WorldRenderer;
+import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+
+public class CrosshairPreviewComponent extends Gui implements IComponent {
+    private final CrosshairModule module;
+    private int x;
+    private int y;
+    private final int width = 500;
+    private final int height = 150;
+    private final Minecraft mc = Minecraft.getMinecraft();
+
+    public CrosshairPreviewComponent(CrosshairModule module, int x, int y) {
+        this.module = module;
+        this.x = x;
+        this.y = y;
+    }
+
+    @Override
+    public void renderComponent(int mouseX, int mouseY) {
+        ScaledResolution sr = new ScaledResolution(mc);
+
+        this.mc.getTextureManager().bindTexture(optionsBackground);
+        GlStateManager.pushMatrix();
+        GlStateManager.color(.3f, .3f, .3f);
+        this.mc.ingameGUI.drawTexturedModalRect(x, y, 0, 0, width, height);
+        GlStateManager.color(1f, 1f, 1f);
+        GlStateManager.popMatrix();
+
+//        GuiUtil.drawUnscaledRect(x, y, x + width, y + height, 0xFFFF0000);
+        DoubleModuleSetting scaleSetting = (DoubleModuleSetting) module.getSettings().get("Crosshair Scale");
+        CrosshairModuleSetting type = (CrosshairModuleSetting) module.getSettings().get("Crosshair Type");
+        double scale = scaleSetting.getValue();
+        int mcScale = sr.getScaleFactor();
+        scale *= mcScale;
+
+        CrosshairModule.CrosshairOffset offset = CrosshairModule.crosshairOffsets.get(type.getValue());
+        this.mc.getTextureManager().bindTexture(CrosshairModule.crosshairs);
+//        GlStateManager.color(0, 0, 0);
+
+
+        GlStateManager.pushMatrix();
+        GlStateManager.scale(scale, scale, 1D);
+
+        if (module.alphaEffect.getValue()) {
+            GlStateManager.enableAlpha();
+            GlStateManager.tryBlendFuncSeparate(775, 769, 1, 0);
+            GlStateManager.enableBlend();
+        }
+
+        GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
+
+        this.mc.ingameGUI.drawTexturedModalRect((float) ((x + width / 2f - (9f * scale) / 2) / scale), (float) ((y + height / 2f - (9f * scale) / 2) / scale), offset.x, offset.y, 9, 9);
+
+        if (module.alphaEffect.getValue()) {
+            GlStateManager.disableBlend();
+            GlStateManager.disableAlpha();
+        }
+        GlStateManager.popMatrix();
+
+    }
+
+    @Override
+    public void mouseDragged(int mouseX, int mouseY) {
+
+    }
+
+    @Override
+    public void mouseReleased(int mouseX, int mouseY, int state) {
+
+    }
+
+    @Override
+    public void mouseClicked(int mouseX, int mouseY, int mouseButton) {
+
+    }
+
+    @Override
+    public int getHeight() {
+        return 150;
+    }
+}
diff --git a/src/main/java/com/jlmsz/gui/component/impl/SliderComponent.java b/src/main/java/com/jlmsz/gui/component/impl/SliderComponent.java
new file mode 100644
index 0000000..bac76e8
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/component/impl/SliderComponent.java
@@ -0,0 +1,119 @@
+package com.jlmsz.gui.component.impl;
+
+import com.jlmsz.gui.component.IComponent;
+import com.jlmsz.util.GuiUtil;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.Gui;
+import net.minecraft.util.MathHelper;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+public class SliderComponent extends Gui implements IComponent {
+
+    private int x;
+    private int y;
+    private int width;
+    private int height;
+    private double min;
+    private double max;
+    private double value;
+    private boolean mouseDown = false;
+    public boolean clickedHandle = false;
+    private final Minecraft mc = Minecraft.getMinecraft();
+    private final int sliderX;
+    private final List<IValueChange> changeCallbacks = new ArrayList<>();
+
+    public SliderComponent(int x, int y, int width, int height, double min, double max, double defaultValue) {
+        this.x = x;
+        this.y = y;
+        this.width = width;
+        this.height = height;
+        this.min = min;
+        this.max = max;
+        this.value = defaultValue;
+        this.sliderX = x + 60;
+    }
+
+    public void renderComponent(int mouseX, int mouseY) {
+        double offset = max == min ? 0 : ((value - min) / (max - min)) * width;
+        GuiUtil.drawUnscaledString(mc.fontRendererObj, String.format("%.2f", value), x, y - mc.fontRendererObj.FONT_HEIGHT / 4, 0xFFFFFFFF, 2f);
+
+        GuiUtil.drawUnscaledRect(sliderX, y, sliderX + width, y + height, 0xFFFFFFFF);
+        GuiUtil.drawCircle(sliderX + offset, y + height / 2f, height / 2 + 5, 25, 0xFF444444);
+        if (mouseDown) {
+            if (clickedHandle && isMouseOnHandle(mouseX, mouseY)) {
+                return;
+            } else {
+                clickedHandle = false;
+            }
+            int mousePos = MathHelper.clamp_int(mouseX, sliderX, sliderX + width);
+            double mousePercent = ((double) mousePos - sliderX) / width;
+            value = MathHelper.clamp_double(min + (max - min) * mousePercent, min, max);
+            this.fireValueChange();
+            System.out.println(value);
+        }
+    }
+
+    public void onValueChange(IValueChange value) {
+        changeCallbacks.add(value);
+    }
+
+    public void fireValueChange() {
+        for (IValueChange cb : changeCallbacks) {
+            cb.callback(this.value);
+        }
+    }
+
+    @Override
+    public void mouseDragged(int mouseX, int mouseY) {
+
+    }
+
+    @Override
+    public void mouseReleased(int mouseX, int mouseY, int state) {
+        mouseDown = false;
+    }
+
+    private boolean isMouseOnHandle(int mouseX, int mouseY) {
+        double offset = max == min ? 0 : ((value - min) / (max - min)) * width;
+        double handleX = sliderX + offset;
+        double handleY = y + height / 2D;
+        int radius = 10;
+
+        // Euclidean distance
+        return ((handleX - mouseX) * (handleX - mouseX) + (handleY - mouseY) * (handleY - mouseY) <= radius * radius);
+    }
+
+    @Override
+    public void mouseClicked(int mouseX, int mouseY, int mouseButton) {
+        if (isMouseOnHandle(mouseX, mouseY)) {
+            clickedHandle = true;
+            mouseDown = true;
+        } else if (mouseX >= sliderX && mouseX <= sliderX + width && mouseY >= y && mouseY <= y + height) {
+            mouseDown = true;
+        }
+    }
+
+    public double getMin() {
+        return min;
+    }
+
+    public double getMax() {
+        return max;
+    }
+
+    public double getValue() {
+        return value;
+    }
+
+    @Override
+    public int getHeight() {
+        return Math.max(height + 3, mc.fontRendererObj.FONT_HEIGHT * 2);
+    }
+
+    public interface IValueChange {
+        void callback(double value);
+    }
+}
diff --git a/src/main/java/com/jlmsz/gui/interfaces/IPanelSwitcher.java b/src/main/java/com/jlmsz/gui/interfaces/IPanelSwitcher.java
new file mode 100644
index 0000000..2170290
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/interfaces/IPanelSwitcher.java
@@ -0,0 +1,9 @@
+package com.jlmsz.gui.interfaces;
+
+import com.jlmsz.gui.settings.panel.SettingsPanel;
+
+public interface IPanelSwitcher {
+
+    void switchPanel(SettingsPanel panel);
+
+}
diff --git a/src/main/java/com/jlmsz/gui/settings/SettingsButton.java b/src/main/java/com/jlmsz/gui/settings/SettingsButton.java
new file mode 100644
index 0000000..23fe40d
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/settings/SettingsButton.java
@@ -0,0 +1,124 @@
+package com.jlmsz.gui.settings;
+
+import com.jlmsz.util.GuiUtil;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.audio.SoundHandler;
+import net.minecraft.client.gui.GuiButton;
+import net.minecraft.client.gui.ScaledResolution;
+
+public class SettingsButton extends GuiButton {
+    private boolean hovered = false;
+    private int color = 0xFF363636;
+    private int hoverColor = 0xFF534e5c;
+
+    public SettingsButton(int buttonId, int x, int y, int widthIn, int heightIn, String buttonText) {
+        super(buttonId, x, y, widthIn, heightIn, buttonText);
+    }
+
+    public SettingsButton(int buttonId, int x, int y, int widthIn, int heightIn, String buttonText, int color, int hoverColor) {
+        super(buttonId, x, y, widthIn, heightIn, buttonText);
+        this.color = color;
+        this.hoverColor = hoverColor;
+    }
+
+    @Override
+    public void drawButton(Minecraft mc, int mouseX, int mouseY) {
+        ScaledResolution sr = new ScaledResolution(mc);
+        int scaleFactor = sr.getScaleFactor();
+//
+        int realMouseX = mouseX * scaleFactor;
+        int realMouseY = mouseY * scaleFactor;
+
+        this.hovered = realMouseX >= this.xPosition && realMouseY >= this.yPosition && realMouseX < this.xPosition + this.width && realMouseY < this.yPosition + this.height;
+//
+        int bgColor = hovered ? hoverColor : color;
+//
+        GuiUtil.drawUnscaledRect(xPosition, yPosition, xPosition + width, yPosition + height, bgColor);
+
+        GuiUtil.drawUnscaledCenteredString(mc.fontRendererObj, displayString, xPosition + width / 2, yPosition + height / 2, 0xFFFFFFFF, 2);
+
+    }
+
+    @Override
+    protected void mouseDragged(Minecraft mc, int mouseX, int mouseY) {
+
+    }
+
+    @Override
+    public void mouseReleased(int mouseX, int mouseY) {
+
+    }
+
+    @Override
+    public boolean mousePressed(Minecraft mc, int mouseX, int mouseY) {
+        return super.mousePressed(mc, mouseX, mouseY);
+    }
+
+    @Override
+    public boolean isMouseOver() {
+        return super.isMouseOver();
+    }
+
+    @Override
+    public void drawButtonForegroundLayer(int mouseX, int mouseY) {
+
+    }
+
+    @Override
+    public void playPressSound(SoundHandler soundHandlerIn) {
+
+    }
+
+    public void setButtonText(String buttonText) {
+        this.displayString = buttonText;
+    }
+
+    public int getWidth() {
+        return width;
+    }
+
+    @Override
+    public void setWidth(int width) {
+        super.setWidth(width);
+    }
+
+    public int getHeight() {
+        return height;
+    }
+
+    public void setHeight(int height) {
+        this.height = height;
+    }
+
+    public void setX(int x) {
+        this.xPosition = x;
+    }
+
+    public void setY(int y) {
+        this.yPosition = y;
+    }
+
+    public int getX() {
+        return this.xPosition;
+    }
+
+    public int getY() {
+        return this.yPosition;
+    }
+
+    public int getColor() {
+        return color;
+    }
+
+    public void setColor(int color) {
+        this.color = color;
+    }
+
+    public int getHoverColor() {
+        return hoverColor;
+    }
+
+    public void setHoverColor(int hoverColor) {
+        this.hoverColor = hoverColor;
+    }
+}
diff --git a/src/main/java/com/jlmsz/gui/settings/SettingsGui.java b/src/main/java/com/jlmsz/gui/settings/SettingsGui.java
new file mode 100644
index 0000000..e1d3d91
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/settings/SettingsGui.java
@@ -0,0 +1,128 @@
+package com.jlmsz.gui.settings;
+
+import com.jlmsz.gui.interfaces.IPanelSwitcher;
+import com.jlmsz.gui.settings.panel.ConfigureModulePanel;
+import com.jlmsz.gui.settings.panel.ModulesPanel;
+import com.jlmsz.gui.settings.panel.SettingsPanel;
+import com.jlmsz.gui.settings.panel.factory.PanelFactory;
+import com.jlmsz.util.GuiUtil;
+import net.minecraft.client.gui.Gui;
+import net.minecraft.client.gui.GuiButton;
+import net.minecraft.client.gui.GuiScreen;
+import net.minecraft.client.gui.ScaledResolution;
+import net.minecraft.client.renderer.GlStateManager;
+
+import java.io.IOException;
+
+public class SettingsGui extends GuiScreen implements IPanelSwitcher {
+
+    private SettingsButton modulesBtn;
+    private SettingsButton hypixelBtn;
+    private SettingsButton miscBtn;
+    private ModulesPanel modulesPanel;
+    private ConfigureModulePanel configureModulePanel;
+    private SettingsPanel activePanel;
+    private PanelFactory panelFactory;
+    private int windowX;
+    private int windowY;
+    private int windowWidth;
+    private int windowHeight;
+
+    @Override
+    public void initGui() {
+        int width = mc.displayWidth;
+        int height = mc.displayHeight;
+
+        windowWidth = (int) (width * 0.8F);
+        windowHeight = (int) (height * .8);
+
+        windowX = width / 2 - windowWidth / 2;
+        windowY = height / 2 - windowHeight / 2;
+
+        panelFactory = new PanelFactory(windowX + 300, windowY, windowWidth - 300, windowHeight);
+
+        buttonList.add(modulesBtn = new SettingsButton(1, windowX + 5, windowY + 40, 290, 40, "Modules"));
+        buttonList.add(hypixelBtn = new SettingsButton(1, windowX + 5, windowY + 90, 290, 40, "Hypixel"));
+        buttonList.add(miscBtn = new SettingsButton(1, windowX + 5, windowY + 140, 290, 40, "Misc"));
+
+        if (activePanel == null) {
+
+            activePanel = modulesPanel = new ModulesPanel(this, panelFactory, windowX + 300, windowY, windowWidth - 300, windowHeight);
+        }
+
+    }
+
+    @Override
+    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
+        ScaledResolution sr = new ScaledResolution(mc);
+        int scale = sr.getScaleFactor();
+        mouseX *= scale;
+        mouseY *= scale;
+
+        drawDefaultBackground();
+        GuiUtil.setupUnscaledOverlayRendering(mc);
+        // Window bg
+        GuiUtil.drawUnscaledRect(windowX, windowY, windowX + windowWidth, windowY + windowHeight, 0xFF111111);
+        // Sidebar bg
+        GuiUtil.drawUnscaledRect(windowX, windowY, windowX + 300, windowY + windowHeight, 0xFF1f1f1f);
+
+        GuiUtil.drawUnscaledCenteredString(mc.fontRendererObj, "jClient 1.0.0", windowX + 300 / 2, windowY + 20, 0xFFFFFFFF, 2);
+
+        // Render buttons
+        super.drawScreen(mouseX, mouseY, partialTicks);
+
+        if (activePanel != null) {
+            activePanel.renderPanel(mouseX, mouseY);
+        }
+
+//        ScaledResolution sr = new ScaledResolution(mc);
+
+//        GlStateManager.pushMatrix();
+//        GlStateManager.viewport(0, 0, mc.displayWidth, mc.displayHeight);
+//        GlStateManager.ortho(0.0D, mc.displayWidth, mc.displayHeight, 0.0D, 1000.0D, 3000.0D);
+//        GlStateManager.matrixMode(5888);
+
+
+//        GuiUtil.dumpGl();
+//        GlStateManager.loadIdentity();
+//        GlStateManager.translate(0, 0, -2000f);
+//        GuiUtil.dumpGl();
+
+        GuiUtil.setupScaledOverlayRendering(mc);
+//        GlStateManager.ortho(0.0D, (double) sr.getScaledWidth(), (double) sr.getScaledHeight(), 0.0D, 1000.0D, 3000.0D);
+//        GlStateManager.popMatrix();
+
+//        mc.displayGuiScreen(null);
+    }
+
+    @Override
+    public void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
+        ScaledResolution sr = new ScaledResolution(mc);
+        int scale = sr.getScaleFactor();
+        mouseX *= scale;
+        mouseY *= scale;
+
+        activePanel.mouseClicked(mouseX, mouseY, mouseButton);
+        super.mouseClicked(mouseX, mouseY, mouseButton);
+    }
+
+    @Override
+    protected void mouseReleased(int mouseX, int mouseY, int state) {
+        activePanel.mouseReleased(mouseX, mouseY, state);
+        super.mouseReleased(mouseX, mouseY, state);
+    }
+
+    @Override
+    public void switchPanel(SettingsPanel panel) {
+        this.activePanel = panel;
+    }
+
+    @Override
+    protected void actionPerformed(GuiButton button) throws IOException {
+        if (button == modulesBtn) {
+            switchPanel(modulesPanel);
+        }
+    }
+
+
+}
diff --git a/src/main/java/com/jlmsz/gui/settings/card/ModuleCard.java b/src/main/java/com/jlmsz/gui/settings/card/ModuleCard.java
new file mode 100644
index 0000000..8552724
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/settings/card/ModuleCard.java
@@ -0,0 +1,84 @@
+package com.jlmsz.gui.settings.card;
+
+import com.jlmsz.gui.interfaces.IPanelSwitcher;
+import com.jlmsz.gui.settings.SettingsButton;
+import com.jlmsz.gui.settings.panel.ConfigureModulePanel;
+import com.jlmsz.gui.settings.panel.factory.PanelFactory;
+import com.jlmsz.module.Module;
+import com.jlmsz.util.GuiUtil;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.Gui;
+import net.minecraft.client.gui.GuiButton;
+import net.minecraft.client.gui.ScaledResolution;
+
+import java.io.IOException;
+
+public class ModuleCard extends Gui {
+
+    private final Module module;
+    private final IPanelSwitcher switcher;
+    private final PanelFactory panelFactory;
+    private final int width;
+    private final int height;
+    private final SettingsButton enableBtn;
+    private final SettingsButton configBtn;
+    private final Minecraft mc = Minecraft.getMinecraft();
+    private final int btnWidth;
+    private final int btnHeight;
+    private boolean configuring = false;
+
+    public ModuleCard(Module module, IPanelSwitcher switcher, PanelFactory panelFactory, int width, int height) {
+        this.module = module;
+        this.switcher = switcher;
+        this.panelFactory = panelFactory;
+        this.width = width;
+        this.height = height;
+        this.btnWidth = width - 20;
+        this.btnHeight = 50;
+
+        enableBtn = new SettingsButton(1, 0, 0, btnWidth / 2 - 2, btnHeight, "Enable", 0xFF422a5a, 0xFF5c3b7c);
+        configBtn = new SettingsButton(1, 0, 0, btnWidth / 2 - 2, btnHeight, "Configure", 0xFF1B1B1B, 0xFF212121);
+    }
+
+    public void renderCard(int x, int y, int mouseX, int mouseY) {
+        boolean enabled = module.isEnabled();
+
+        // Draw bg
+        GuiUtil.drawUnscaledRect(x, y, x + width, y + height, 0xFF2b2b2b);
+        GuiUtil.drawUnscaledString(Minecraft.getMinecraft().fontRendererObj, module.getName(), x + 15, y + 15, 0xFFFFFFFF, 2);
+        GuiUtil.drawUnscaledString(Minecraft.getMinecraft().fontRendererObj, module.getDescription(), x + 15, y + 45, 0xFFBBBBBB, 2);
+
+        if (enabled) {
+            GuiUtil.drawUnscaledString(Minecraft.getMinecraft().fontRendererObj, "Active", x + width - mc.fontRendererObj.getStringWidth("Active") * 2 - 20, y + 15, 0xFFAAFFAA, 2);
+        }
+
+        int btnX = x + width / 2 - btnWidth / 2;
+        int btnY = y + height - btnHeight - 10;
+
+        enableBtn.setColor(enabled ? 0xFF5a2a2a : 0xFF422a5a);
+        enableBtn.setHoverColor(enabled ? 0xFF7c3b3b : 0xFF5c3b7c);
+        enableBtn.setButtonText(enabled ? "Disable" : "Enable");
+
+        enableBtn.setX(btnX);
+        enableBtn.setY(btnY);
+        enableBtn.drawButton(mc, mouseX, mouseY);
+
+        configBtn.setX(btnX + btnWidth / 2 + 2);
+        configBtn.setY(btnY);
+        configBtn.drawButton(mc, mouseX, mouseY);
+    }
+
+    public void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
+//        ScaledResolution sr = new ScaledResolution(mc);
+//        int scale = sr.getScaleFactor();
+        if (enableBtn.mousePressed(mc, mouseX, mouseY)) {
+            module.setEnabled(!module.isEnabled());
+        } else if (configBtn.mousePressed(mc, mouseX, mouseY)) {
+            this.switcher.switchPanel(panelFactory.createConfigureModulePanel(module));
+        }
+    }
+
+    public void mouseReleased(int mouseX, int mouseY, int state) {
+    }
+
+}
diff --git a/src/main/java/com/jlmsz/gui/settings/panel/ConfigureModulePanel.java b/src/main/java/com/jlmsz/gui/settings/panel/ConfigureModulePanel.java
new file mode 100644
index 0000000..54d329b
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/settings/panel/ConfigureModulePanel.java
@@ -0,0 +1,141 @@
+package com.jlmsz.gui.settings.panel;
+
+import com.jlmsz.gui.component.IComponent;
+import com.jlmsz.gui.component.impl.*;
+import com.jlmsz.module.Module;
+import com.jlmsz.module.config.*;
+import com.jlmsz.module.impl.CrosshairModule;
+import com.jlmsz.util.GuiUtil;
+import org.lwjgl.Sys;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class ConfigureModulePanel extends ScrollablePanel {
+    private final Module module;
+    //    private final List<IComponent> components = new ArrayList<>();
+//    private final HashMap<ModuleSetting<?>, IComponent> components = new HashMap<>();
+    List<ComponentSettingPair> components = new ArrayList<>();
+
+    public ConfigureModulePanel(Module module, int x, int y, int width, int height) {
+        super(x, y, width, height);
+        this.module = module;
+
+        int componentY = y + 20 - scrollY + 40;
+        Map<String, ModuleSetting<?>> settings = module.getSettings();
+
+        ComponentSettingPair elemBeingAdded = null;
+        if (module instanceof CrosshairModule) {
+            elemBeingAdded = new ComponentSettingPair(null, new CrosshairPreviewComponent((CrosshairModule) module, x + 20, componentY), null);
+            componentY += elemBeingAdded.component.getHeight() + 20;
+            components.add(elemBeingAdded);
+        }
+
+        for (Map.Entry<String, ModuleSetting<?>> entry : settings.entrySet()) {
+            String name = entry.getKey();
+            ModuleSetting<?> setting = entry.getValue();
+            int labelWidth = mc.fontRendererObj.getStringWidth(name) * 2;
+            int componentX = x + 20 + labelWidth + 20;
+
+            if (setting instanceof CrosshairModuleSetting) {
+                CrosshairModuleSetting crosshairSetting = (CrosshairModuleSetting) setting;
+
+                CrosshairComponent component = new CrosshairComponent(crosshairSetting, componentX, componentY);
+                elemBeingAdded = new ComponentSettingPair(name, component, setting);
+
+            } else if (setting instanceof IntModuleSetting) {
+//                GuiUtil.drawUnscaledString(mc.fontRendererObj, setting.getKey(), x + 20, settingY, 0xFFFFFFFF, 1);
+            } else if (setting instanceof DoubleModuleSetting) {
+                DoubleModuleSetting doubleSetting = (DoubleModuleSetting) setting;
+                SliderComponent component = new SliderComponent(componentX, componentY, 320, 12, doubleSetting.getMin(), doubleSetting.getMax(), doubleSetting.getValue());
+                component.onValueChange(doubleSetting::setValue);
+                elemBeingAdded = new ComponentSettingPair(name, component, setting);
+//                componentY += mc.fontRendererObj.FONT_HEIGHT * 2 + 20;
+            } else if (setting instanceof BooleanModuleSetting) {
+                BooleanModuleSetting boolSetting = (BooleanModuleSetting) setting;
+                elemBeingAdded = new ComponentSettingPair(name, new CheckboxComponent(boolSetting, componentX, componentY), setting);
+//                componentY += mc.fontRendererObj.FONT_HEIGHT * 2 + 20;
+
+//                GuiUtil.drawUnscaledString(mc.fontRendererObj, setting.getKey(), x + 20, settingY, 0xFFFFFFFF, 1);
+
+            } else if (setting instanceof ColorModuleSetting) {
+//                ColorModuleSetting colorSetting = (ColorModuleSetting) setting;
+                elemBeingAdded = new ComponentSettingPair(name, new ColorPickerComponent(componentX, componentY), setting);
+            }
+
+            if (elemBeingAdded != null) {
+                components.add(elemBeingAdded);
+                componentY += elemBeingAdded.component.getHeight() + 20;
+            }
+        }
+    }
+
+    @Override
+    public void renderClipped(int mouseX, int mouseY) {
+        GuiUtil.drawUnscaledString(mc.fontRendererObj, "Configure " + module.getName(), x + 20, y + 20 - scrollY, 0xFFFFFFFF, 3);
+        Map<String, ModuleSetting<?>> settings = module.getSettings();
+        int settingY = y + 20 - scrollY + 40;
+
+//        for (IComponent component : unnamedComponents) {
+//            component.renderComponent(mouseX, mouseY);
+//            settingY += component.getHeight() + 20;
+//        }
+
+        for (ComponentSettingPair elem : components) {
+            String name = elem.name;
+            IComponent component = elem.component;
+            ModuleSetting<?> setting = elem.setting;
+
+            if (name != null) {
+                GuiUtil.drawUnscaledString(mc.fontRendererObj, name, x + 20, settingY, 0xFFFFFFFF, 2);
+            }
+
+            component.renderComponent(mouseX, mouseY);
+            settingY += component.getHeight() + 20;
+
+//            GuiUtil.drawUnscaledRect(x, settingY, x + 1000, settingY + 1, 0xFFFF0000);
+//            if (value instanceof Integer) {
+//                GuiUtil.drawUnscaledString(mc.fontRendererObj, setting.getKey(), x + 20, settingY, 0xFFFFFFFF, 2);
+//            } else if (value instanceof Double) {
+//                GuiUtil.drawUnscaledString(mc.fontRendererObj, setting.getKey(), x + 20, settingY - mc.fontRendererObj.FONT_HEIGHT / 4, 0xFFFFFFFF, 2);
+//
+//            } else if (value instanceof Boolean) {
+//                GuiUtil.drawUnscaledString(mc.fontRendererObj, setting.getKey(), x + 20, settingY, 0xFFFFFFFF, 2);
+//            }
+//            settingY += mc.fontRendererObj.FONT_HEIGHT * 2 + 20 - mc.fontRendererObj.FONT_HEIGHT / 2;
+        }
+
+//        for (IComponent component : components) {
+//        }
+    }
+
+    @Override
+    public void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
+        for (ComponentSettingPair elem : components) {
+            elem.component.mouseClicked(mouseX, mouseY, mouseButton);
+        }
+    }
+
+    @Override
+    public void mouseReleased(int mouseX, int mouseY, int state) {
+        for (ComponentSettingPair elem : components) {
+            elem.component.mouseReleased(mouseX, mouseY, state);
+        }
+    }
+
+    private static class ComponentSettingPair {
+        public String name;
+        public IComponent component;
+        public ModuleSetting<?> setting;
+
+        public ComponentSettingPair(String name, IComponent component, ModuleSetting<?> setting) {
+            this.name = name;
+            this.component = component;
+            this.setting = setting;
+        }
+    }
+
+}
diff --git a/src/main/java/com/jlmsz/gui/settings/panel/ModulesPanel.java b/src/main/java/com/jlmsz/gui/settings/panel/ModulesPanel.java
new file mode 100644
index 0000000..15a5ee2
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/settings/panel/ModulesPanel.java
@@ -0,0 +1,106 @@
+package com.jlmsz.gui.settings.panel;
+
+import com.jlmsz.gui.interfaces.IPanelSwitcher;
+import com.jlmsz.gui.settings.card.ModuleCard;
+import com.jlmsz.gui.settings.panel.factory.PanelFactory;
+import com.jlmsz.module.Module;
+import com.jlmsz.module.ModuleRegistry;
+import com.jlmsz.util.GuiUtil;
+import org.lwjgl.opengl.GL11;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+public class ModulesPanel extends ScrollablePanel {
+
+    private final IPanelSwitcher switcher;
+    private final PanelFactory panelFactory;
+    //    private int x;
+//    private int y;
+//    private int width;
+//    private int height;
+    private List<ModuleCard> cards = new ArrayList<>();
+    private final int cardWidth = 350;
+    private final int cardHeight = 200;
+
+    public ModulesPanel(IPanelSwitcher switcher, PanelFactory panelFactory, int x, int y, int width, int height) {
+        super(x, y, width, height);
+        this.switcher = switcher;
+        this.panelFactory = panelFactory;
+//        this.x = x;
+//        this.y = y;
+//        this.width = width;
+//        this.height = height;
+
+        List<Module> moduleList = ModuleRegistry.getModuleList();
+
+        while (!moduleList.isEmpty()) {
+            Module module = moduleList.remove(0);
+            cards.add(new ModuleCard(module, switcher, panelFactory, cardWidth, cardHeight));
+        }
+    }
+
+    private void renderCards(int mouseX, int mouseY, int scrollY) {
+        int gap = 20;
+        int cardX = x + gap;
+        int cardY = y + 40 + gap;
+        boolean elementInCol = false;
+
+        for (int i = 0; i < cards.size(); i++) {
+            if (elementInCol && cardX + cardWidth > x + width - gap) {
+                cardX = x + gap;
+                cardY += cardHeight + gap;
+                elementInCol = false;
+            } else {
+                elementInCol = true;
+            }
+
+
+            ModuleCard card = cards.get(i);
+            card.renderCard(cardX, cardY - scrollY, mouseX, mouseY);
+
+            cardX += cardWidth + gap;
+        }
+
+        setMaxScroll(cardY - y - height);
+    }
+
+    @Override
+    public void renderClipped(int mouseX, int mouseY) {
+        int scrollY = getScrollY();
+        int screenHeight = mc.displayHeight;
+        int bottom = screenHeight - (y + height);
+
+//        GL11.glEnable(GL11.GL_SCISSOR_TEST);
+//        GL11.glScissor(x, bottom, width, height);
+
+        GuiUtil.drawUnscaledString(mc.fontRendererObj, "Modules", x + 20, y + 20 - scrollY, 0xFFFFFFFF, 3);
+        renderCards(mouseX, mouseY, scrollY);
+
+        GL11.glDisable(GL11.GL_SCISSOR_TEST);
+
+//        int scroll = Mouse.getDWheel();
+//        if (scroll > 0) {
+//            scroll = 30;
+//        } else if (scroll < 0) {
+//            scroll = -30;
+//        }
+//        scrollY -= scroll;
+//        scrollY = MathHelper.clamp_int(scrollY, 0, height);
+    }
+
+    @Override
+    public void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException {
+        for (ModuleCard card : cards) {
+            card.mouseClicked(mouseX, mouseY, mouseButton);
+        }
+    }
+
+    @Override
+    public void mouseReleased(int mouseX, int mouseY, int state) {
+        for (ModuleCard card : cards) {
+            card.mouseReleased(mouseX, mouseY, state);
+        }
+    }
+}
diff --git a/src/main/java/com/jlmsz/gui/settings/panel/ScrollablePanel.java b/src/main/java/com/jlmsz/gui/settings/panel/ScrollablePanel.java
new file mode 100644
index 0000000..37be59c
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/settings/panel/ScrollablePanel.java
@@ -0,0 +1,55 @@
+package com.jlmsz.gui.settings.panel;
+
+import net.minecraft.util.MathHelper;
+import org.lwjgl.input.Mouse;
+import org.lwjgl.opengl.GL11;
+
+public abstract class ScrollablePanel extends SettingsPanel {
+    protected int scrollY = 0;
+    protected final int x;
+    protected final int y;
+    protected final int width;
+    protected final int height;
+    private int maxScroll;
+
+    public ScrollablePanel(int x, int y, int width, int height) {
+        this.x = x;
+        this.y = y;
+        this.width = width;
+        this.height = height;
+    }
+
+    @Override
+    public final void renderPanel(int mouseX, int mouseY) {
+        int screenHeight = mc.displayHeight;
+        int bottom = screenHeight - (y + height);
+
+        GL11.glEnable(GL11.GL_SCISSOR_TEST);
+        GL11.glScissor(x, bottom, width, height);
+
+        renderClipped(mouseX, mouseY);
+
+        GL11.glDisable(GL11.GL_SCISSOR_TEST);
+
+        int scroll = Mouse.getDWheel();
+        if (scroll > 0) {
+            scroll = 30;
+        } else if (scroll < 0) {
+            scroll = -30;
+        }
+        scrollY -= scroll;
+        scrollY = MathHelper.clamp_int(scrollY, 0, maxScroll);
+    }
+
+    public abstract void renderClipped(int mouseX, int mouseY);
+
+    public int getScrollY() {
+        return scrollY;
+    }
+
+    protected void setMaxScroll(int maxScroll) {
+        if (maxScroll > 0) {
+            this.maxScroll = maxScroll;
+        }
+    }
+}
diff --git a/src/main/java/com/jlmsz/gui/settings/panel/SettingsPanel.java b/src/main/java/com/jlmsz/gui/settings/panel/SettingsPanel.java
new file mode 100644
index 0000000..4b31ae0
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/settings/panel/SettingsPanel.java
@@ -0,0 +1,19 @@
+package com.jlmsz.gui.settings.panel;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.Gui;
+import net.minecraft.client.gui.GuiButton;
+
+import java.io.IOException;
+
+public abstract class SettingsPanel extends Gui {
+    protected Minecraft mc = Minecraft.getMinecraft();
+
+    public abstract void renderPanel(int mouseX, int mouseY);
+
+    public abstract void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException;
+
+    public abstract void mouseReleased(int mouseX, int mouseY, int state);
+
+
+}
diff --git a/src/main/java/com/jlmsz/gui/settings/panel/factory/PanelFactory.java b/src/main/java/com/jlmsz/gui/settings/panel/factory/PanelFactory.java
new file mode 100644
index 0000000..67b9eb8
--- /dev/null
+++ b/src/main/java/com/jlmsz/gui/settings/panel/factory/PanelFactory.java
@@ -0,0 +1,23 @@
+package com.jlmsz.gui.settings.panel.factory;
+
+import com.jlmsz.gui.settings.panel.ConfigureModulePanel;
+import com.jlmsz.module.Module;
+
+public class PanelFactory {
+
+    private final int x;
+    private final int y;
+    private final int width;
+    private final int height;
+
+    public PanelFactory(int x, int y, int width, int height) {
+        this.x = x;
+        this.y = y;
+        this.width = width;
+        this.height = height;
+    }
+
+    public ConfigureModulePanel createConfigureModulePanel(Module module) {
+        return new ConfigureModulePanel(module, x, y, width, height);
+    }
+}
diff --git a/src/main/java/com/jlmsz/module/Module.java b/src/main/java/com/jlmsz/module/Module.java
new file mode 100644
index 0000000..b2183f2
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/Module.java
@@ -0,0 +1,53 @@
+package com.jlmsz.module;
+
+import com.jlmsz.module.config.ModuleSetting;
+import com.jlmsz.module.impl.SprintModule;
+import net.minecraft.client.Minecraft;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class Module {
+
+    private final String name;
+    private final String description;
+    private final ModuleCategory category;
+    private boolean enabled;
+    protected final Minecraft mc = Minecraft.getMinecraft();
+    private final Map<String, ModuleSetting<?>> settings = new HashMap<>();
+
+    public Module(String name, String description, ModuleCategory category) {
+        this.name = name;
+        this.description = description;
+        this.category = category;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public ModuleCategory getCategory() {
+        return category;
+    }
+
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    public void setEnabled(boolean enabled) {
+        this.enabled = enabled;
+    }
+
+    protected void addSetting(String name, ModuleSetting<?> setting) {
+        settings.put(name, setting);
+    }
+
+    public Map<String, ModuleSetting<?>> getSettings() {
+        return new HashMap<>(settings);
+    }
+}
diff --git a/src/main/java/com/jlmsz/module/ModuleCategory.java b/src/main/java/com/jlmsz/module/ModuleCategory.java
new file mode 100644
index 0000000..b819921
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/ModuleCategory.java
@@ -0,0 +1,10 @@
+package com.jlmsz.module;
+
+public enum ModuleCategory {
+
+    COMBAT,
+    MOVEMENT,
+    RENDER,
+    UTIL
+
+}
diff --git a/src/main/java/com/jlmsz/module/ModuleRegistry.java b/src/main/java/com/jlmsz/module/ModuleRegistry.java
new file mode 100644
index 0000000..0c3337f
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/ModuleRegistry.java
@@ -0,0 +1,38 @@
+package com.jlmsz.module;
+
+import com.jlmsz.module.impl.SprintModule;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import com.jlmsz.module.impl.CrosshairModule;
+
+public class ModuleRegistry {
+
+    private static List<Module> moduleList;
+
+    public static void init() {
+        moduleList = Arrays.asList(new SprintModule(), new CrosshairModule());
+    }
+
+    public static Module getModuleByName(String name) {
+        for (Module module : moduleList) {
+            if (module.getName().equalsIgnoreCase(name)) {
+                return module;
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * Returns a copy of the module list.
+     * The returned list can be safely modified.
+     * @return A new list of modules
+     */
+    public static List<Module> getModuleList() {
+        return new ArrayList<>(moduleList);
+    }
+
+}
diff --git a/src/main/java/com/jlmsz/module/config/BooleanModuleSetting.java b/src/main/java/com/jlmsz/module/config/BooleanModuleSetting.java
new file mode 100644
index 0000000..63c0f1d
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/config/BooleanModuleSetting.java
@@ -0,0 +1,12 @@
+package com.jlmsz.module.config;
+
+public class BooleanModuleSetting extends ModuleSetting<Boolean> {
+    public BooleanModuleSetting(boolean value) {
+        super(value);
+    }
+
+    public BooleanModuleSetting() {
+        this(false);
+    }
+
+}
diff --git a/src/main/java/com/jlmsz/module/config/ColorModuleSetting.java b/src/main/java/com/jlmsz/module/config/ColorModuleSetting.java
new file mode 100644
index 0000000..f5845d8
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/config/ColorModuleSetting.java
@@ -0,0 +1,29 @@
+package com.jlmsz.module.config;
+
+public class ColorModuleSetting extends ModuleSetting<ColorModuleSetting.RGBColor> {
+
+    public ColorModuleSetting(RGBColor defaultValue) {
+        super(defaultValue);
+    }
+
+    private boolean isInRange(int num) {
+        return num >= 0 && num <= 255;
+    }
+
+    @Override
+    public boolean isValidValue(RGBColor value) {
+        return isInRange(value.r) && isInRange(value.g) && isInRange(value.b);
+    }
+
+    public static class RGBColor {
+        int r;
+        int g;
+        int b;
+
+        public RGBColor(int r, int g, int b) {
+            this.r = r;
+            this.g = g;
+            this.b = b;
+        }
+    }
+}
diff --git a/src/main/java/com/jlmsz/module/config/CrosshairModuleSetting.java b/src/main/java/com/jlmsz/module/config/CrosshairModuleSetting.java
new file mode 100644
index 0000000..ca1b4c0
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/config/CrosshairModuleSetting.java
@@ -0,0 +1,10 @@
+package com.jlmsz.module.config;
+
+public class CrosshairModuleSetting extends IntModuleSetting {
+
+    public CrosshairModuleSetting(int defaultValue, int crosshairCount) {
+        super(defaultValue, 0, crosshairCount - 1);
+    }
+
+
+}
diff --git a/src/main/java/com/jlmsz/module/config/DoubleModuleSetting.java b/src/main/java/com/jlmsz/module/config/DoubleModuleSetting.java
new file mode 100644
index 0000000..c83087c
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/config/DoubleModuleSetting.java
@@ -0,0 +1,16 @@
+package com.jlmsz.module.config;
+
+public class DoubleModuleSetting extends NumericModuleSetting<Double> {
+    public DoubleModuleSetting(double defaultValue,
+                               double min,
+                               double max) {
+        super(defaultValue, min, max);
+    }
+
+    @Override
+    public boolean isValidValue(Double value) {
+        return min <= value && value <= max;
+    }
+
+
+}
diff --git a/src/main/java/com/jlmsz/module/config/IntModuleSetting.java b/src/main/java/com/jlmsz/module/config/IntModuleSetting.java
new file mode 100644
index 0000000..6524edf
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/config/IntModuleSetting.java
@@ -0,0 +1,14 @@
+package com.jlmsz.module.config;
+
+public class IntModuleSetting extends NumericModuleSetting<Integer> {
+    public IntModuleSetting(int defaultValue, int min, int max) {
+        super(defaultValue, min, max);
+    }
+
+    @Override
+    public boolean isValidValue(Integer value) {
+        return min <= value && value <= max;
+    }
+
+
+}
diff --git a/src/main/java/com/jlmsz/module/config/ModuleSetting.java b/src/main/java/com/jlmsz/module/config/ModuleSetting.java
new file mode 100644
index 0000000..20721ba
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/config/ModuleSetting.java
@@ -0,0 +1,25 @@
+package com.jlmsz.module.config;
+
+public abstract class ModuleSetting<T> {
+
+    protected T value;
+
+    public ModuleSetting(T value) {
+        this.value = value;
+    }
+
+    public void setValue(T value) {
+        if (!this.isValidValue(value)) {
+            return;
+        }
+        this.value = value;
+    }
+
+    public T getValue() {
+        return value;
+    }
+
+    public boolean isValidValue(T value) {
+        return true;
+    }
+}
diff --git a/src/main/java/com/jlmsz/module/config/NumericModuleSetting.java b/src/main/java/com/jlmsz/module/config/NumericModuleSetting.java
new file mode 100644
index 0000000..aa12363
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/config/NumericModuleSetting.java
@@ -0,0 +1,24 @@
+package com.jlmsz.module.config;
+
+import org.apache.commons.lang3.NotImplementedException;
+
+public abstract class NumericModuleSetting<T extends Number> extends ModuleSetting<T> {
+    protected T min;
+    protected T max;
+
+    public NumericModuleSetting(T defaultValue, T min, T max) {
+        super(defaultValue);
+        this.min = min;
+        this.max = max;
+    }
+
+    public T getMin() {
+        return min;
+    }
+
+    public T getMax() {
+        return max;
+    }
+
+    public abstract boolean isValidValue(T value);
+}
diff --git a/src/main/java/com/jlmsz/module/config/StringModuleSetting.java b/src/main/java/com/jlmsz/module/config/StringModuleSetting.java
new file mode 100644
index 0000000..e45d536
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/config/StringModuleSetting.java
@@ -0,0 +1,9 @@
+package com.jlmsz.module.config;
+
+public class StringModuleSetting extends ModuleSetting<String> {
+    public StringModuleSetting(String value) {
+        super(value);
+    }
+
+
+}
diff --git a/src/main/java/com/jlmsz/module/impl/CrosshairModule.java b/src/main/java/com/jlmsz/module/impl/CrosshairModule.java
new file mode 100644
index 0000000..0fb3772
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/impl/CrosshairModule.java
@@ -0,0 +1,97 @@
+package com.jlmsz.module.impl;
+
+import com.jlmsz.JClient;
+import com.jlmsz.event.EventHandler;
+import com.jlmsz.event.impl.CrosshairRenderEvent;
+import com.jlmsz.module.Module;
+import com.jlmsz.module.ModuleCategory;
+import com.jlmsz.module.config.BooleanModuleSetting;
+import com.jlmsz.module.config.ColorModuleSetting;
+import com.jlmsz.module.config.CrosshairModuleSetting;
+import com.jlmsz.module.config.DoubleModuleSetting;
+import com.jlmsz.util.GuiUtil;
+import jdk.internal.util.xml.impl.Input;
+import net.minecraft.client.gui.GuiIngame;
+import net.minecraft.client.gui.ScaledResolution;
+import net.minecraft.client.renderer.GlStateManager;
+import net.minecraft.util.ResourceLocation;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL20;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.List;
+
+public class CrosshairModule extends Module {
+    public static final ResourceLocation crosshairs = new ResourceLocation("jclient", "textures/gui/crosshairs.png");
+    private static final ResourceLocation debug = new ResourceLocation("jclient", "textures/gui/debug.png");
+    public static final List<CrosshairOffset> crosshairOffsets = new ArrayList<>();
+    //    private int selectedCrosshair = 1;
+    public final DoubleModuleSetting crosshairScale = new DoubleModuleSetting(1D, 0.01, 5);
+    public final CrosshairModuleSetting crosshair;
+    public final BooleanModuleSetting alphaEffect;
+    public final ColorModuleSetting color;
+    //    private static String glslShader = null;
+
+    static {
+        crosshairOffsets.add(new CrosshairOffset(0, 0));
+        crosshairOffsets.add(new CrosshairOffset(10, 0));
+        crosshairOffsets.add(new CrosshairOffset(20, 0));
+        crosshairOffsets.add(new CrosshairOffset(30, 0));
+        crosshairOffsets.add(new CrosshairOffset(40, 0));
+        crosshairOffsets.add(new CrosshairOffset(50, 0));
+        crosshairOffsets.add(new CrosshairOffset(60, 0));
+        crosshairOffsets.add(new CrosshairOffset(70, 0));
+    }
+
+    public CrosshairModule() {
+        super("Crosshair", "Change your crosshair", ModuleCategory.RENDER);
+        JClient.EVENT_BUS.registerListener(this);
+        addSetting("Crosshair Scale", crosshairScale);
+        addSetting("Crosshair Type", crosshair = new CrosshairModuleSetting(0, crosshairOffsets.size()));
+        addSetting("Alpha Effect", alphaEffect = new BooleanModuleSetting(true));
+        addSetting("Color", color = new ColorModuleSetting(new ColorModuleSetting.RGBColor(0, 0, 0)));
+    }
+
+    @EventHandler
+    public void onCrosshairRender(CrosshairRenderEvent event) {
+        if (!this.isEnabled()) return;
+        event.setCancelled(true);
+        ScaledResolution sr = new ScaledResolution(mc);
+        this.mc.getTextureManager().bindTexture(crosshairs);
+//        GlStateManager.enableBlend();
+
+//        GlStateManager.enableAlpha();
+
+        CrosshairOffset offset = crosshairOffsets.get(crosshair.getValue());
+
+        GlStateManager.pushMatrix();
+        double scale = crosshairScale.getValue();
+        GlStateManager.scale(scale, scale, 1D);
+
+        if (alphaEffect.getValue()) {
+            GlStateManager.tryBlendFuncSeparate(775, 769, 1, 0);
+            GlStateManager.enableAlpha();
+        }
+//        GlStateManager.color(1f, 1f, 1f);
+
+        this.mc.ingameGUI.drawTexturedModalRect((int) ((sr.getScaledWidth() / 2D - 4 * scale) / scale), (int) ((sr.getScaledHeight() / 2D - 4 * scale) / scale), offset.x, offset.y, 9, 9);
+        GlStateManager.color(1f, 1f, 1f);
+        GlStateManager.popMatrix();
+
+        this.mc.getTextureManager().bindTexture(GuiIngame.icons);
+    }
+
+    public static class CrosshairOffset {
+        public int x;
+        public int y;
+
+        public CrosshairOffset(int x, int y) {
+            this.x = x;
+            this.y = y;
+        }
+    }
+}
diff --git a/src/main/java/com/jlmsz/module/impl/SprintModule.java b/src/main/java/com/jlmsz/module/impl/SprintModule.java
new file mode 100644
index 0000000..dfbdbf7
--- /dev/null
+++ b/src/main/java/com/jlmsz/module/impl/SprintModule.java
@@ -0,0 +1,27 @@
+package com.jlmsz.module.impl;
+
+import com.jlmsz.JClient;
+import com.jlmsz.event.EventHandler;
+import com.jlmsz.event.impl.RenderEvent;
+import com.jlmsz.module.Module;
+import com.jlmsz.module.ModuleCategory;
+import net.minecraft.client.settings.KeyBinding;
+
+public class SprintModule extends Module {
+    public SprintModule() {
+        super("Sprint", "Keeps you sprinting", ModuleCategory.MOVEMENT);
+        JClient.EVENT_BUS.registerListener(this);
+    }
+
+    @EventHandler
+    public void onRender(RenderEvent.Pre event) {
+        if (!this.isEnabled() || mc.theWorld == null || mc.thePlayer == null) return;
+        KeyBinding.setKeyBindState(mc.gameSettings.keyBindSprint.getKeyCode(), true);
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        KeyBinding.setKeyBindState(mc.gameSettings.keyBindSprint.getKeyCode(), false);
+        super.setEnabled(enabled);
+    }
+}
diff --git a/src/main/java/com/jlmsz/util/GuiUtil.java b/src/main/java/com/jlmsz/util/GuiUtil.java
new file mode 100644
index 0000000..b0518c8
--- /dev/null
+++ b/src/main/java/com/jlmsz/util/GuiUtil.java
@@ -0,0 +1,201 @@
+package com.jlmsz.util;
+
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.FontRenderer;
+import net.minecraft.client.gui.Gui;
+import net.minecraft.client.gui.ScaledResolution;
+import net.minecraft.client.renderer.GlStateManager;
+import net.minecraft.client.renderer.Tessellator;
+import net.minecraft.client.renderer.WorldRenderer;
+import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+import org.lwjgl.opengl.GL20;
+
+import javax.vecmath.Vector2f;
+import java.nio.FloatBuffer;
+import java.nio.IntBuffer;
+
+public class GuiUtil {
+    public static void drawUnscaledRect(int left, int top, int right, int bottom, int color) {
+//        ScaledResolution sr = new ScaledResolution(Minecraft.getMinecraft());
+//        float scale = 1F / sr.getScaleFactor();
+//        GlStateManager.pushMatrix();
+//        GlStateManager.scale(scale, scale, scale);
+        Gui.drawRect(left, top, right, bottom, color);
+
+//        Gui.drawRect((int) (left * scale), (int) (top * scale), (int) (right * scale), (int) (bottom * scale), color);
+
+//        GlStateManager.popMatrix();
+
+    }
+
+    public static void drawCircle(double x, double y, int radius, int sides, int color) {
+        Tessellator tessellator = Tessellator.getInstance();
+        WorldRenderer worldRenderer = tessellator.getWorldRenderer();
+        GL11.glEnable(GL11.GL_BLEND);
+        GL11.glDisable(GL11.GL_TEXTURE_2D);
+        GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+        float a = (float) (color >> 24 & 255) / 255.0F;
+        float r = (float) (color >> 16 & 255) / 255.0F;
+        float g = (float) (color >> 8 & 255) / 255.0F;
+        float b = (float) (color & 255) / 255.0F;
+
+        GlStateManager.color(r, g, b, a);
+
+        worldRenderer.begin(GL11.GL_TRIANGLE_FAN, DefaultVertexFormats.POSITION);
+        worldRenderer.pos(x, y, 0).endVertex();
+        for (int i = 0; i <= sides; i++) {
+            double angle = (2 * Math.PI * i / sides) + Math.toRadians(180);
+            worldRenderer.pos(x + Math.sin(angle) * radius, y + Math.cos(angle) * radius, 0).endVertex();
+        }
+        tessellator.draw();
+        GL11.glEnable(GL11.GL_TEXTURE_2D);
+        GL11.glDisable(GL11.GL_BLEND);
+    }
+
+
+    public static void drawUnscaledString(FontRenderer fontRendererIn, String text, int x, int y, int color, float scale) {
+        Minecraft mc = Minecraft.getMinecraft();
+
+        ScaledResolution sr = new ScaledResolution(mc);
+//        float scaleFactor = (float) scale / sr.getScaleFactor();
+
+        GlStateManager.pushMatrix();
+
+//        GlStateManager.scale(scaleFactor, scaleFactor, scaleFactor);
+
+        GlStateManager.scale(scale, scale, scale);
+
+        float scaledX = (float) x / scale;
+        float scaledY = (float) y / scale;
+
+        fontRendererIn.drawStringWithShadow(text, scaledX, scaledY, color);
+
+        GlStateManager.popMatrix();
+
+    }
+
+    public static void drawUnscaledCenteredString(FontRenderer fontRendererIn, String text, int x, int y, int color, int scale) {
+        Minecraft mc = Minecraft.getMinecraft();
+
+//        ScaledResolution sr = new ScaledResolution(mc);
+//        float scaleFactor = (float) scale / sr.getScaleFactor();
+
+        GlStateManager.pushMatrix();
+
+//        GlStateManager.scale(scaleFactor, scaleFactor, scaleFactor);
+
+        GlStateManager.scale(scale, scale, scale);
+        int width = fontRendererIn.getStringWidth(text) * scale;
+        int height = fontRendererIn.FONT_HEIGHT * scale;
+
+        float scaledX = ((float) x - width / 2f) / scale;
+        float scaledY = ((float) y - height / 2f) / scale;
+
+        fontRendererIn.drawStringWithShadow(text, scaledX, scaledY, color);
+
+        GlStateManager.popMatrix();
+
+    }
+
+    public static void dumpGl() {
+        // 1. Output OpenGL version and vendor info
+        System.out.println("OpenGL Version: " + GL11.glGetString(GL11.GL_VERSION));
+        System.out.println("Vendor: " + GL11.glGetString(GL11.GL_VENDOR));
+        System.out.println("Renderer: " + GL11.glGetString(GL11.GL_RENDERER));
+        System.out.println("GLSL Version: " + GL11.glGetString(GL20.GL_SHADING_LANGUAGE_VERSION));
+
+        // 2. Dump enable/disable flags
+        System.out.println("\n--- Enabled States ---");
+        int[] caps = {
+                GL11.GL_DEPTH_TEST, GL11.GL_SCISSOR_TEST, GL11.GL_STENCIL_TEST,
+                GL11.GL_BLEND, GL11.GL_LIGHTING, GL11.GL_CULL_FACE,
+                GL11.GL_ALPHA_TEST, GL11.GL_TEXTURE_2D, GL11.GL_FOG
+        };
+        String[] capNames = {
+                "GL_DEPTH_TEST", "GL_SCISSOR_TEST", "GL_STENCIL_TEST",
+                "GL_BLEND", "GL_LIGHTING", "GL_CULL_FACE",
+                "GL_ALPHA_TEST", "GL_TEXTURE_2D", "GL_FOG"
+        };
+        for (int i = 0; i < caps.length; i++) {
+            System.out.println(capNames[i] + ": " + GL11.glIsEnabled(caps[i]));
+        }
+
+        // 3. Dump current matrices
+        System.out.println("\n--- Current Matrices ---");
+        float[] matrix = new float[16];
+        FloatBuffer buffer = BufferUtils.createFloatBuffer(16);
+        GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX, buffer);
+        buffer.get(matrix);
+        System.out.println("ModelView Matrix:");
+        printMatrix(matrix);
+
+        buffer = BufferUtils.createFloatBuffer(16);
+        GL11.glGetFloat(GL11.GL_PROJECTION_MATRIX, buffer);
+        buffer.get(matrix);
+        System.out.println("Projection Matrix:");
+        printMatrix(matrix);
+
+        buffer = BufferUtils.createFloatBuffer(16);
+        GL11.glGetFloat(GL11.GL_TEXTURE_MATRIX, buffer);
+        buffer.get(matrix);
+        System.out.println("Texture Matrix:");
+        printMatrix(matrix);
+
+        // 4. Dump viewport and scissor
+        IntBuffer viewport = BufferUtils.createIntBuffer(16);
+        GL11.glGetInteger(GL11.GL_VIEWPORT, viewport);
+        System.out.println("\n--- Viewport ---");
+        System.out.println("x=" + viewport.get(0) + " y=" + viewport.get(1) +
+                " w=" + viewport.get(2) + " h=" + viewport.get(3));
+
+        IntBuffer scissor = BufferUtils.createIntBuffer(16);
+        GL11.glGetInteger(GL11.GL_SCISSOR_BOX, scissor);
+        System.out.println("\n--- Scissor Box ---");
+        System.out.println("x=" + scissor.get(0) + " y=" + scissor.get(1) +
+                " w=" + scissor.get(2) + " h=" + scissor.get(3));
+
+        // 5. Dump current color and blending
+        FloatBuffer color = BufferUtils.createFloatBuffer(16);
+        GL11.glGetFloat(GL11.GL_CURRENT_COLOR, color);
+        System.out.println("\n--- Current Color ---");
+        System.out.println("r=" + color.get(0) + " g=" + color.get(1) +
+                " b=" + color.get(2) + " a=" + color.get(3));
+
+        IntBuffer blendFunc = BufferUtils.createIntBuffer(32);
+        GL11.glGetInteger(GL11.GL_BLEND_SRC, blendFunc);
+        GL11.glGetInteger(GL11.GL_BLEND_DST, blendFunc);
+        System.out.println("\n--- Blending ---");
+        System.out.println("src=" + blendFunc.get(0) + " dst=" + blendFunc.get(1));
+    }
+
+    private static void printMatrix(float[] matrix) {
+        for (int i = 0; i < 4; i++) {
+            System.out.printf("%8.3f %8.3f %8.3f %8.3f\n",
+                    matrix[i], matrix[i + 4], matrix[i + 8], matrix[i + 12]);
+        }
+    }
+
+    public static void setupUnscaledOverlayRendering(Minecraft mc) {
+        ScaledResolution scaledresolution = new ScaledResolution(mc);
+        GlStateManager.clear(256);
+        GlStateManager.matrixMode(5889);
+        GlStateManager.loadIdentity();
+        GlStateManager.ortho(0.0D, mc.displayWidth, mc.displayHeight, 0.0D, 1000.0D, 3000.0D);
+        GlStateManager.matrixMode(5888);
+        GlStateManager.loadIdentity();
+        GlStateManager.translate(0.0F, 0.0F, -2000.0F);
+    }
+
+    public static void setupScaledOverlayRendering(Minecraft mc) {
+        ScaledResolution scaledresolution = new ScaledResolution(mc);
+        GlStateManager.clear(256);
+        GlStateManager.matrixMode(5889);
+        GlStateManager.loadIdentity();
+        GlStateManager.ortho(0.0D, scaledresolution.getScaledWidth_double(), scaledresolution.getScaledHeight_double(), 0.0D, 1000.0D, 3000.0D);
+        GlStateManager.matrixMode(5888);
+        GlStateManager.loadIdentity();
+        GlStateManager.translate(0.0F, 0.0F, -2000.0F);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/client/Minecraft.java b/src/main/java/net/minecraft/client/Minecraft.java
index 02c5f39..627bf44 100644
--- a/src/main/java/net/minecraft/client/Minecraft.java
+++ b/src/main/java/net/minecraft/client/Minecraft.java
@@ -1,6 +1,5 @@
 package net.minecraft.client;
 
-import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
@@ -8,9 +7,12 @@ import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.ListenableFutureTask;
+import com.jlmsz.JClient;
+import com.jlmsz.event.impl.GameStartedEvent;
+import com.jlmsz.event.impl.RenderEvent;
+import com.jlmsz.gui.settings.SettingsGui;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
-import com.mojang.authlib.properties.Property;
 import com.mojang.authlib.properties.PropertyMap;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 
@@ -52,8 +54,6 @@ import net.minecraft.client.gui.GuiMainMenu;
 import net.minecraft.client.gui.GuiMemoryErrorScreen;
 import net.minecraft.client.gui.GuiScreen;
 import net.minecraft.client.gui.GuiSleepMP;
-import net.minecraft.client.gui.GuiYesNo;
-import net.minecraft.client.gui.GuiYesNoCallback;
 import net.minecraft.client.gui.ScaledResolution;
 import net.minecraft.client.gui.achievement.GuiAchievement;
 import net.minecraft.client.gui.inventory.GuiInventory;
@@ -143,7 +143,6 @@ import net.minecraft.stats.IStatStringFormat;
 import net.minecraft.stats.StatFileWriter;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.BlockPos;
-import net.minecraft.util.ChatComponentText;
 import net.minecraft.util.FrameTimer;
 import net.minecraft.util.IThreadListener;
 import net.minecraft.util.MathHelper;
@@ -535,7 +534,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
         AchievementList.openInventory.setStatStringFormatter(new IStatStringFormat() {
             public String formatString(String str) {
                 try {
-                    return String.format(str, new Object[]{GameSettings.getKeyDisplayString(Minecraft.this.gameSettings.keyBindUseItem.getKeyCode())});
+                    return String.format(str, new Object[]{GameSettings.getKeyDisplayString(Minecraft.this.gameSettings.keyBindInventory.getKeyCode())});
                 } catch (Exception exception) {
                     return "Error: " + exception.getLocalizedMessage();
                 }
@@ -600,6 +599,8 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
         }
 
         this.renderGlobal.makeEntityOutlineShader();
+
+        JClient.EVENT_BUS.invokeEvent(new GameStartedEvent());
     }
 
     private void registerMetadataSerializers() {
@@ -1035,7 +1036,9 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
 
         if (!this.skipRenderWorld) {
             this.mcProfiler.endStartSection("gameRenderer");
+            JClient.EVENT_BUS.invokeEvent(new RenderEvent.Pre());
             this.entityRenderer.updateCameraAndRender(this.timer.renderPartialTicks, i);
+            JClient.EVENT_BUS.invokeEvent(new RenderEvent.Post());
             this.mcProfiler.endSection();
         }
 
@@ -1739,7 +1742,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
                             this.gameSettings.lastServer = GuiScreen.isAltKeyDown();
                         }
 
-                        if (this.gameSettings.keyBindSmoothCamera.isPressed()) {
+                        if (this.gameSettings.keyBindPerspective.isPressed()) {
                             ++this.gameSettings.showDebugInfo;
 
                             if (this.gameSettings.showDebugInfo > 2) {
@@ -1755,9 +1758,13 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
                             this.renderGlobal.setDisplayListEntitiesDirty();
                         }
 
-                        if (this.gameSettings.keyBindFullscreen.isPressed()) {
+                        if (this.gameSettings.keyBindSmoothCamera.isPressed()) {
                             this.gameSettings.debugCamEnable = !this.gameSettings.debugCamEnable;
                         }
+
+                        if (this.gameSettings.keyBindClientSettings.isPressed()) {
+                            this.displayGuiScreen(new SettingsGui());
+                        }
                     }
 
                     if (this.gameSettings.showDebugProfilerChart && this.gameSettings.showLagometer) {
@@ -1786,7 +1793,7 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
 
             boolean flag = this.gameSettings.chatVisibility != EntityPlayer.EnumChatVisibility.HIDDEN;
 
-            while (this.gameSettings.keyBindUseItem.isPressed()) {
+            while (this.gameSettings.keyBindInventory.isPressed()) {
                 if (this.playerController.isRidingHorse()) {
                     this.thePlayer.sendHorseInventory();
                 } else {
@@ -1795,55 +1802,55 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
                 }
             }
 
-            while (this.gameSettings.keyBindAttack.isPressed()) {
+            while (this.gameSettings.keyBindDrop.isPressed()) {
                 if (!this.thePlayer.isSpectator()) {
                     this.thePlayer.dropOneItem(GuiScreen.isCtrlKeyDown());
                 }
             }
 
-            while (this.gameSettings.keyBindPlayerList.isPressed() && flag) {
+            while (this.gameSettings.keyBindChat.isPressed() && flag) {
                 this.displayGuiScreen(new GuiChat());
             }
 
-            if (this.currentScreen == null && this.gameSettings.keyBindScreenshot.isPressed() && flag) {
+            if (this.currentScreen == null && this.gameSettings.keyBindCommand.isPressed() && flag) {
                 this.displayGuiScreen(new GuiChat("/"));
             }
 
             if (this.thePlayer.isUsingItem()) {
-                if (!this.gameSettings.keyBindDrop.isKeyDown()) {
+                if (!this.gameSettings.keyBindUseItem.isKeyDown()) {
                     this.playerController.onStoppedUsingItem(this.thePlayer);
                 }
 
-                while (this.gameSettings.keyBindPickBlock.isPressed()) {
+                while (this.gameSettings.keyBindAttack.isPressed()) {
                     ;
                 }
 
-                while (this.gameSettings.keyBindDrop.isPressed()) {
+                while (this.gameSettings.keyBindUseItem.isPressed()) {
                     ;
                 }
 
-                while (this.gameSettings.keyBindChat.isPressed()) {
+                while (this.gameSettings.keyBindPickBlock.isPressed()) {
                     ;
                 }
             } else {
-                while (this.gameSettings.keyBindPickBlock.isPressed()) {
+                while (this.gameSettings.keyBindAttack.isPressed()) {
                     this.clickMouse();
                 }
 
-                while (this.gameSettings.keyBindDrop.isPressed()) {
+                while (this.gameSettings.keyBindUseItem.isPressed()) {
                     this.rightClickMouse();
                 }
 
-                while (this.gameSettings.keyBindChat.isPressed()) {
+                while (this.gameSettings.keyBindPickBlock.isPressed()) {
                     this.middleClickMouse();
                 }
             }
 
-            if (this.gameSettings.keyBindDrop.isKeyDown() && this.rightClickDelayTimer == 0 && !this.thePlayer.isUsingItem()) {
+            if (this.gameSettings.keyBindUseItem.isKeyDown() && this.rightClickDelayTimer == 0 && !this.thePlayer.isUsingItem()) {
                 this.rightClickMouse();
             }
 
-            this.sendClickBlockToController(this.currentScreen == null && this.gameSettings.keyBindPickBlock.isKeyDown() && this.inGameHasFocus);
+            this.sendClickBlockToController(this.currentScreen == null && this.gameSettings.keyBindAttack.isKeyDown() && this.inGameHasFocus);
         }
 
         if (this.theWorld != null) {
@@ -2634,9 +2641,9 @@ public class Minecraft implements IThreadListener, IPlayerUsage {
             if (!(this.currentScreen instanceof GuiControls) || ((GuiControls) this.currentScreen).time <= getSystemTime() - 20L) {
                 if (Keyboard.getEventKeyState()) {
 
-                    if (i == this.gameSettings.keyBindSpectatorOutlines.getKeyCode()) {
+                    if (i == this.gameSettings.keyBindFullscreen.getKeyCode()) {
                         this.toggleFullscreen();
-                    } else if (i == this.gameSettings.keyBindTogglePerspective.getKeyCode()) {
+                    } else if (i == this.gameSettings.keyBindScreenshot.getKeyCode()) {
                         this.ingameGUI.getChatGUI().printChatMessage(ScreenShotHelper.saveScreenshot(this.mcDataDir, this.displayWidth, this.displayHeight, this.framebufferMc));
                     }
                 }
diff --git a/src/main/java/net/minecraft/client/entity/EntityPlayerSP.java b/src/main/java/net/minecraft/client/entity/EntityPlayerSP.java
index 3bd4eae..ef53142 100644
--- a/src/main/java/net/minecraft/client/entity/EntityPlayerSP.java
+++ b/src/main/java/net/minecraft/client/entity/EntityPlayerSP.java
@@ -800,7 +800,7 @@ public class EntityPlayerSP extends AbstractClientPlayer
 
         if (this.onGround && !flag1 && !flag2 && this.movementInput.moveForward >= f && !this.isSprinting() && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness))
         {
-            if (this.sprintToggleTimer <= 0 && !this.mc.gameSettings.keyBindInventory.isKeyDown())
+            if (this.sprintToggleTimer <= 0 && !this.mc.gameSettings.keyBindSprint.isKeyDown())
             {
                 this.sprintToggleTimer = 7;
             }
@@ -810,7 +810,7 @@ public class EntityPlayerSP extends AbstractClientPlayer
             }
         }
 
-        if (!this.isSprinting() && this.movementInput.moveForward >= f && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness) && this.mc.gameSettings.keyBindInventory.isKeyDown())
+        if (!this.isSprinting() && this.movementInput.moveForward >= f && flag3 && !this.isUsingItem() && !this.isPotionActive(Potion.blindness) && this.mc.gameSettings.keyBindSprint.isKeyDown())
         {
             this.setSprinting(true);
         }
diff --git a/src/main/java/net/minecraft/client/gui/GuiControls.java b/src/main/java/net/minecraft/client/gui/GuiControls.java
index f2da98c..08b8c45 100644
--- a/src/main/java/net/minecraft/client/gui/GuiControls.java
+++ b/src/main/java/net/minecraft/client/gui/GuiControls.java
@@ -78,7 +78,7 @@ public class GuiControls extends GuiScreen
         }
         else if (button.id == 201)
         {
-            for (KeyBinding keybinding : this.mc.gameSettings.mc)
+            for (KeyBinding keybinding : this.mc.gameSettings.moreKeyBindings)
             {
                 keybinding.setKeyCode(keybinding.getKeyCodeDefault());
             }
@@ -161,7 +161,7 @@ public class GuiControls extends GuiScreen
         this.drawCenteredString(this.fontRendererObj, this.screenTitle, this.width / 2, 8, 16777215);
         boolean flag = true;
 
-        for (KeyBinding keybinding : this.options.mc)
+        for (KeyBinding keybinding : this.options.moreKeyBindings)
         {
             if (keybinding.getKeyCode() != keybinding.getKeyCodeDefault())
             {
diff --git a/src/main/java/net/minecraft/client/gui/GuiIngame.java b/src/main/java/net/minecraft/client/gui/GuiIngame.java
index a8a4324..13a3aa0 100644
--- a/src/main/java/net/minecraft/client/gui/GuiIngame.java
+++ b/src/main/java/net/minecraft/client/gui/GuiIngame.java
@@ -3,9 +3,13 @@ package net.minecraft.client.gui;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
+
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
+
+import com.jlmsz.JClient;
+import com.jlmsz.event.impl.CrosshairRenderEvent;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.GlStateManager;
@@ -40,12 +44,10 @@ import net.minecraft.util.IChatComponent;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.MovingObjectPosition;
 import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.StringUtils;
 import net.minecraft.world.border.WorldBorder;
 import net.optifine.CustomColors;
 
-public class GuiIngame extends Gui
-{
+public class GuiIngame extends Gui {
     private static final ResourceLocation vignetteTexPath = new ResourceLocation("textures/misc/vignette.png");
     private static final ResourceLocation widgetsTexPath = new ResourceLocation("textures/gui/widgets.png");
     private static final ResourceLocation pumpkinBlurTexPath = new ResourceLocation("textures/misc/pumpkinblur.png");
@@ -53,59 +55,88 @@ public class GuiIngame extends Gui
     private final Minecraft mc;
     private final RenderItem itemRenderer;
 
-    /** ChatGUI instance that retains all previous chat data */
+    /**
+     * ChatGUI instance that retains all previous chat data
+     */
     private final GuiNewChat persistantChatGUI;
     private int updateCounter;
 
-    /** The string specifying which record music is playing */
+    /**
+     * The string specifying which record music is playing
+     */
     private String recordPlaying = "";
 
-    /** How many ticks the record playing message will be displayed */
+    /**
+     * How many ticks the record playing message will be displayed
+     */
     private int recordPlayingUpFor;
     private boolean recordIsPlaying;
 
-    /** Previous frame vignette brightness (slowly changes by 1% each frame) */
+    /**
+     * Previous frame vignette brightness (slowly changes by 1% each frame)
+     */
     public float prevVignetteBrightness = 1.0F;
 
-    /** Remaining ticks the item highlight should be visible */
+    /**
+     * Remaining ticks the item highlight should be visible
+     */
     private int remainingHighlightTicks;
 
-    /** The ItemStack that is currently being highlighted */
+    /**
+     * The ItemStack that is currently being highlighted
+     */
     private ItemStack highlightingItemStack;
     private final GuiOverlayDebug overlayDebug;
 
-    /** The spectator GUI for this in-game GUI instance */
+    /**
+     * The spectator GUI for this in-game GUI instance
+     */
     private final GuiSpectator spectatorGui;
     private final GuiPlayerTabOverlay overlayPlayerList;
 
-    /** A timer for the current title and subtitle displayed */
+    /**
+     * A timer for the current title and subtitle displayed
+     */
     private int titlesTimer;
 
-    /** The current title displayed */
+    /**
+     * The current title displayed
+     */
     private String displayedTitle = "";
 
-    /** The current sub-title displayed */
+    /**
+     * The current sub-title displayed
+     */
     private String displayedSubTitle = "";
 
-    /** The time that the title take to fade in */
+    /**
+     * The time that the title take to fade in
+     */
     private int titleFadeIn;
 
-    /** The time that the title is display */
+    /**
+     * The time that the title is display
+     */
     private int titleDisplayTime;
 
-    /** The time that the title take to fade out */
+    /**
+     * The time that the title take to fade out
+     */
     private int titleFadeOut;
     private int playerHealth = 0;
     private int lastPlayerHealth = 0;
 
-    /** The last recorded system time */
+    /**
+     * The last recorded system time
+     */
     private long lastSystemTime = 0L;
 
-    /** Used with updateCounter to make the heart bar flash */
+    /**
+     * Used with updateCounter to make the heart bar flash
+     */
     private long healthUpdateCounter = 0L;
 
-    public GuiIngame(Minecraft mcIn)
-    {
+    public GuiIngame(Minecraft mcIn) {
         this.mc = mcIn;
         this.itemRenderer = mcIn.getRenderItem();
         this.overlayDebug = new GuiOverlayDebug(mcIn);
@@ -118,53 +149,42 @@ public class GuiIngame extends Gui
     /**
      * Set the differents times for the titles to their default values
      */
-    public void setDefaultTitlesTimes()
-    {
+    public void setDefaultTitlesTimes() {
         this.titleFadeIn = 10;
         this.titleDisplayTime = 70;
         this.titleFadeOut = 20;
     }
 
-    public void renderGameOverlay(float partialTicks)
-    {
+    public void renderGameOverlay(float partialTicks) {
         ScaledResolution scaledresolution = new ScaledResolution(this.mc);
         int i = scaledresolution.getScaledWidth();
         int j = scaledresolution.getScaledHeight();
         this.mc.entityRenderer.setupOverlayRendering();
         GlStateManager.enableBlend();
 
-        if (Config.isVignetteEnabled())
-        {
+        if (Config.isVignetteEnabled()) {
             this.renderVignette(this.mc.thePlayer.getBrightness(partialTicks), scaledresolution);
-        }
-        else
-        {
+        } else {
             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
         }
 
         ItemStack itemstack = this.mc.thePlayer.inventory.armorItemInSlot(3);
 
-        if (this.mc.gameSettings.showDebugInfo == 0 && itemstack != null && itemstack.getItem() == Item.getItemFromBlock(Blocks.pumpkin))
-        {
+        if (this.mc.gameSettings.showDebugInfo == 0 && itemstack != null && itemstack.getItem() == Item.getItemFromBlock(Blocks.pumpkin)) {
             this.renderPumpkinOverlay(scaledresolution);
         }
 
-        if (!this.mc.thePlayer.isPotionActive(Potion.confusion))
-        {
+        if (!this.mc.thePlayer.isPotionActive(Potion.confusion)) {
             float f = this.mc.thePlayer.prevTimeInPortal + (this.mc.thePlayer.timeInPortal - this.mc.thePlayer.prevTimeInPortal) * partialTicks;
 
-            if (f > 0.0F)
-            {
+            if (f > 0.0F) {
                 this.renderPortal(f, scaledresolution);
             }
         }
 
-        if (this.mc.playerController.isSpectator())
-        {
+        if (this.mc.playerController.isSpectator()) {
             this.spectatorGui.renderTooltip(scaledresolution, partialTicks);
-        }
-        else
-        {
+        } else {
             this.renderTooltip(scaledresolution, partialTicks);
         }
 
@@ -172,8 +192,7 @@ public class GuiIngame extends Gui
         this.mc.getTextureManager().bindTexture(icons);
         GlStateManager.enableBlend();
 
-        if (this.showCrosshair())
-        {
+        if (this.showCrosshair() && JClient.EVENT_BUS.invokeEvent(new CrosshairRenderEvent())) {
             GlStateManager.tryBlendFuncSeparate(775, 769, 1, 0);
             GlStateManager.enableAlpha();
             this.drawTexturedModalRect(i / 2 - 7, j / 2 - 7, 0, 0, 16, 16);
@@ -185,27 +204,24 @@ public class GuiIngame extends Gui
         this.renderBossHealth();
         this.mc.mcProfiler.endSection();
 
-        if (this.mc.playerController.shouldDrawHUD())
-        {
+        if (this.mc.playerController.shouldDrawHUD()) {
             this.renderPlayerStats(scaledresolution);
         }
 
         GlStateManager.disableBlend();
 
-        if (this.mc.thePlayer.getSleepTimer() > 0)
-        {
+        if (this.mc.thePlayer.getSleepTimer() > 0) {
             this.mc.mcProfiler.startSection("sleep");
             GlStateManager.disableDepth();
             GlStateManager.disableAlpha();
             int j1 = this.mc.thePlayer.getSleepTimer();
-            float f1 = (float)j1 / 100.0F;
+            float f1 = (float) j1 / 100.0F;
 
-            if (f1 > 1.0F)
-            {
-                f1 = 1.0F - (float)(j1 - 100) / 10.0F;
+            if (f1 > 1.0F) {
+                f1 = 1.0F - (float) (j1 - 100) / 10.0F;
             }
 
-            int k = (int)(220.0F * f1) << 24 | 1052704;
+            int k = (int) (220.0F * f1) << 24 | 1052704;
             drawRect(0, 0, i, j, k);
             GlStateManager.enableAlpha();
             GlStateManager.enableDepth();
@@ -215,50 +231,39 @@ public class GuiIngame extends Gui
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
         int k1 = i / 2 - 91;
 
-        if (this.mc.thePlayer.isRidingHorse())
-        {
+        if (this.mc.thePlayer.isRidingHorse()) {
             this.renderHorseJumpBar(scaledresolution, k1);
-        }
-        else if (this.mc.playerController.gameIsSurvivalOrAdventure())
-        {
+        } else if (this.mc.playerController.gameIsSurvivalOrAdventure()) {
             this.renderExpBar(scaledresolution, k1);
         }
 
-        if (this.mc.gameSettings.heldItemTooltips && !this.mc.playerController.isSpectator())
-        {
+        if (this.mc.gameSettings.heldItemTooltips && !this.mc.playerController.isSpectator()) {
             this.renderSelectedItem(scaledresolution);
-        }
-        else if (this.mc.thePlayer.isSpectator())
-        {
+        } else if (this.mc.thePlayer.isSpectator()) {
             this.spectatorGui.renderSelectedItem(scaledresolution);
         }
 
-        if (this.mc.gameSettings.showDebugProfilerChart)
-        {
+        if (this.mc.gameSettings.showDebugProfilerChart) {
             this.overlayDebug.renderDebugInfo(scaledresolution);
         }
 
-        if (this.recordPlayingUpFor > 0)
-        {
+        if (this.recordPlayingUpFor > 0) {
             this.mc.mcProfiler.startSection("overlayMessage");
-            float f2 = (float)this.recordPlayingUpFor - partialTicks;
-            int l1 = (int)(f2 * 255.0F / 20.0F);
+            float f2 = (float) this.recordPlayingUpFor - partialTicks;
+            int l1 = (int) (f2 * 255.0F / 20.0F);
 
-            if (l1 > 255)
-            {
+            if (l1 > 255) {
                 l1 = 255;
             }
 
-            if (l1 > 8)
-            {
+            if (l1 > 8) {
                 GlStateManager.pushMatrix();
-                GlStateManager.translate((float)(i / 2), (float)(j - 68), 0.0F);
+                GlStateManager.translate((float) (i / 2), (float) (j - 68), 0.0F);
                 GlStateManager.enableBlend();
                 GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
                 int l = 16777215;
 
-                if (this.recordIsPlaying)
-                {
+                if (this.recordIsPlaying) {
                     l = MathHelper.hsvToRGB(f2 / 50.0F, 0.7F, 0.6F) & 16777215;
                 }
 
@@ -270,39 +275,35 @@ public class GuiIngame extends Gui
             this.mc.mcProfiler.endSection();
         }
 
-        if (this.titlesTimer > 0)
-        {
+        if (this.titlesTimer > 0) {
             this.mc.mcProfiler.startSection("titleAndSubtitle");
-            float f3 = (float)this.titlesTimer - partialTicks;
+            float f3 = (float) this.titlesTimer - partialTicks;
             int i2 = 255;
 
-            if (this.titlesTimer > this.titleFadeOut + this.titleDisplayTime)
-            {
-                float f4 = (float)(this.titleFadeIn + this.titleDisplayTime + this.titleFadeOut) - f3;
-                i2 = (int)(f4 * 255.0F / (float)this.titleFadeIn);
+            if (this.titlesTimer > this.titleFadeOut + this.titleDisplayTime) {
+                float f4 = (float) (this.titleFadeIn + this.titleDisplayTime + this.titleFadeOut) - f3;
+                i2 = (int) (f4 * 255.0F / (float) this.titleFadeIn);
             }
 
-            if (this.titlesTimer <= this.titleFadeOut)
-            {
-                i2 = (int)(f3 * 255.0F / (float)this.titleFadeOut);
+            if (this.titlesTimer <= this.titleFadeOut) {
+                i2 = (int) (f3 * 255.0F / (float) this.titleFadeOut);
             }
 
             i2 = MathHelper.clamp_int(i2, 0, 255);
 
-            if (i2 > 8)
-            {
+            if (i2 > 8) {
                 GlStateManager.pushMatrix();
-                GlStateManager.translate((float)(i / 2), (float)(j / 2), 0.0F);
+                GlStateManager.translate((float) (i / 2), (float) (j / 2), 0.0F);
                 GlStateManager.enableBlend();
                 GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
                 GlStateManager.pushMatrix();
                 GlStateManager.scale(4.0F, 4.0F, 4.0F);
                 int j2 = i2 << 24 & -16777216;
-                this.getFontRenderer().drawString(this.displayedTitle, (float)(-this.getFontRenderer().getStringWidth(this.displayedTitle) / 2), -10.0F, 16777215 | j2, true);
+                this.getFontRenderer().drawString(this.displayedTitle, (float) (-this.getFontRenderer().getStringWidth(this.displayedTitle) / 2), -10.0F, 16777215 | j2, true);
                 GlStateManager.popMatrix();
                 GlStateManager.pushMatrix();
                 GlStateManager.scale(2.0F, 2.0F, 2.0F);
-                this.getFontRenderer().drawString(this.displayedSubTitle, (float)(-this.getFontRenderer().getStringWidth(this.displayedSubTitle) / 2), 5.0F, 16777215 | j2, true);
+                this.getFontRenderer().drawString(this.displayedSubTitle, (float) (-this.getFontRenderer().getStringWidth(this.displayedSubTitle) / 2), 5.0F, 16777215 | j2, true);
                 GlStateManager.popMatrix();
                 GlStateManager.disableBlend();
                 GlStateManager.popMatrix();
@@ -315,20 +316,17 @@ public class GuiIngame extends Gui
         ScoreObjective scoreobjective = null;
         ScorePlayerTeam scoreplayerteam = scoreboard.getPlayersTeam(this.mc.thePlayer.getName());
 
-        if (scoreplayerteam != null)
-        {
+        if (scoreplayerteam != null) {
             int i1 = scoreplayerteam.getChatFormat().getColorIndex();
 
-            if (i1 >= 0)
-            {
+            if (i1 >= 0) {
                 scoreobjective = scoreboard.getObjectiveInDisplaySlot(3 + i1);
             }
         }
 
         ScoreObjective scoreobjective1 = scoreobjective != null ? scoreobjective : scoreboard.getObjectiveInDisplaySlot(1);
 
-        if (scoreobjective1 != null)
-        {
+        if (scoreobjective1 != null) {
             this.renderScoreboard(scoreobjective1, scaledresolution);
         }
 
@@ -336,20 +334,17 @@ public class GuiIngame extends Gui
         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
         GlStateManager.disableAlpha();
         GlStateManager.pushMatrix();
-        GlStateManager.translate(0.0F, (float)(j - 48), 0.0F);
+        GlStateManager.translate(0.0F, (float) (j - 48), 0.0F);
         this.mc.mcProfiler.startSection("chat");
         this.persistantChatGUI.drawChat(this.updateCounter);
         this.mc.mcProfiler.endSection();
         GlStateManager.popMatrix();
         scoreobjective1 = scoreboard.getObjectiveInDisplaySlot(0);
 
-        if (this.mc.gameSettings.keyBindCommand.isKeyDown() && (!this.mc.isIntegratedServerRunning() || this.mc.thePlayer.sendQueue.getPlayerInfoMap().size() > 1 || scoreobjective1 != null))
-        {
+        if (this.mc.gameSettings.keyBindPlayerList.isKeyDown() && (!this.mc.isIntegratedServerRunning() || this.mc.thePlayer.sendQueue.getPlayerInfoMap().size() > 1 || scoreobjective1 != null)) {
             this.overlayPlayerList.updatePlayerList(true);
             this.overlayPlayerList.renderPlayerlist(i, scoreboard, scoreobjective1);
-        }
-        else
-        {
+        } else {
             this.overlayPlayerList.updatePlayerList(false);
         }
 
@@ -358,13 +353,11 @@ public class GuiIngame extends Gui
         GlStateManager.enableAlpha();
     }
 
-    protected void renderTooltip(ScaledResolution sr, float partialTicks)
-    {
-        if (this.mc.getRenderViewEntity() instanceof EntityPlayer)
-        {
+    protected void renderTooltip(ScaledResolution sr, float partialTicks) {
+        if (this.mc.getRenderViewEntity() instanceof EntityPlayer) {
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             this.mc.getTextureManager().bindTexture(widgetsTexPath);
-            EntityPlayer entityplayer = (EntityPlayer)this.mc.getRenderViewEntity();
+            EntityPlayer entityplayer = (EntityPlayer) this.mc.getRenderViewEntity();
             int i = sr.getScaledWidth() / 2;
             float f = this.zLevel;
             this.zLevel = -90.0F;
@@ -376,8 +369,7 @@ public class GuiIngame extends Gui
             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
             RenderHelper.enableGUIStandardItemLighting();
 
-            for (int j = 0; j < 9; ++j)
-            {
+            for (int j = 0; j < 9; ++j) {
                 int k = sr.getScaledWidth() / 2 - 90 + j * 20 + 2;
                 int l = sr.getScaledHeight() - 16 - 3;
                 this.renderHotbarItem(j, k, l, partialTicks, entityplayer);
@@ -389,52 +381,45 @@ public class GuiIngame extends Gui
         }
     }
 
-    public void renderHorseJumpBar(ScaledResolution scaledRes, int x)
-    {
+    public void renderHorseJumpBar(ScaledResolution scaledRes, int x) {
         this.mc.mcProfiler.startSection("jumpBar");
         this.mc.getTextureManager().bindTexture(Gui.icons);
         float f = this.mc.thePlayer.getHorseJumpPower();
         int i = 182;
-        int j = (int)(f * (float)(i + 1));
+        int j = (int) (f * (float) (i + 1));
         int k = scaledRes.getScaledHeight() - 32 + 3;
         this.drawTexturedModalRect(x, k, 0, 84, i, 5);
 
-        if (j > 0)
-        {
+        if (j > 0) {
             this.drawTexturedModalRect(x, k, 0, 89, j, 5);
         }
 
         this.mc.mcProfiler.endSection();
     }
 
-    public void renderExpBar(ScaledResolution scaledRes, int x)
-    {
+    public void renderExpBar(ScaledResolution scaledRes, int x) {
         this.mc.mcProfiler.startSection("expBar");
         this.mc.getTextureManager().bindTexture(Gui.icons);
         int i = this.mc.thePlayer.xpBarCap();
 
-        if (i > 0)
-        {
+        if (i > 0) {
             int j = 182;
-            int k = (int)(this.mc.thePlayer.experience * (float)(j + 1));
+            int k = (int) (this.mc.thePlayer.experience * (float) (j + 1));
             int l = scaledRes.getScaledHeight() - 32 + 3;
             this.drawTexturedModalRect(x, l, 0, 64, j, 5);
 
-            if (k > 0)
-            {
+            if (k > 0) {
                 this.drawTexturedModalRect(x, l, 0, 69, k, 5);
             }
         }
 
         this.mc.mcProfiler.endSection();
 
-        if (this.mc.thePlayer.experienceLevel > 0)
-        {
+        if (this.mc.thePlayer.experienceLevel > 0) {
             this.mc.mcProfiler.startSection("expLevel");
             int k1 = 8453920;
 
-            if (Config.isCustomColors())
-            {
+            if (Config.isCustomColors()) {
                 k1 = CustomColors.getExpBarTextColor(k1);
             }
 
@@ -451,40 +436,34 @@ public class GuiIngame extends Gui
         }
     }
 
-    public void renderSelectedItem(ScaledResolution scaledRes)
-    {
+    public void renderSelectedItem(ScaledResolution scaledRes) {
         this.mc.mcProfiler.startSection("selectedItemName");
 
-        if (this.remainingHighlightTicks > 0 && this.highlightingItemStack != null)
-        {
+        if (this.remainingHighlightTicks > 0 && this.highlightingItemStack != null) {
             String s = this.highlightingItemStack.getDisplayName();
 
-            if (this.highlightingItemStack.hasDisplayName())
-            {
+            if (this.highlightingItemStack.hasDisplayName()) {
                 s = EnumChatFormatting.ITALIC + s;
             }
 
             int i = (scaledRes.getScaledWidth() - this.getFontRenderer().getStringWidth(s)) / 2;
             int j = scaledRes.getScaledHeight() - 59;
 
-            if (!this.mc.playerController.shouldDrawHUD())
-            {
+            if (!this.mc.playerController.shouldDrawHUD()) {
                 j += 14;
             }
 
-            int k = (int)((float)this.remainingHighlightTicks * 256.0F / 10.0F);
+            int k = (int) ((float) this.remainingHighlightTicks * 256.0F / 10.0F);
 
-            if (k > 255)
-            {
+            if (k > 255) {
                 k = 255;
             }
 
-            if (k > 0)
-            {
+            if (k > 0) {
                 GlStateManager.pushMatrix();
                 GlStateManager.enableBlend();
                 GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
-                this.getFontRenderer().drawStringWithShadow(s, (float)i, (float)j, 16777215 + (k << 24));
+                this.getFontRenderer().drawStringWithShadow(s, (float) i, (float) j, 16777215 + (k << 24));
                 GlStateManager.disableBlend();
                 GlStateManager.popMatrix();
             }
@@ -493,64 +472,46 @@ public class GuiIngame extends Gui
         this.mc.mcProfiler.endSection();
     }
 
-    protected boolean showCrosshair()
-    {
-        if (this.mc.gameSettings.showDebugProfilerChart && !this.mc.thePlayer.hasReducedDebug() && !this.mc.gameSettings.reducedDebugInfo)
-        {
+    protected boolean showCrosshair() {
+        if (this.mc.gameSettings.showDebugProfilerChart && !this.mc.thePlayer.hasReducedDebug() && !this.mc.gameSettings.reducedDebugInfo) {
             return false;
-        }
-        else if (this.mc.playerController.isSpectator())
-        {
-            if (this.mc.pointedEntity != null)
-            {
+        } else if (this.mc.playerController.isSpectator()) {
+            if (this.mc.pointedEntity != null) {
                 return true;
-            }
-            else
-            {
-                if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK)
-                {
+            } else {
+                if (this.mc.objectMouseOver != null && this.mc.objectMouseOver.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
                     BlockPos blockpos = this.mc.objectMouseOver.getBlockPos();
 
-                    if (this.mc.theWorld.getTileEntity(blockpos) instanceof IInventory)
-                    {
+                    if (this.mc.theWorld.getTileEntity(blockpos) instanceof IInventory) {
                         return true;
                     }
                 }
 
                 return false;
             }
-        }
-        else
-        {
+        } else {
             return true;
         }
     }
 
-    private void renderScoreboard(ScoreObjective objective, ScaledResolution scaledRes)
-    {
+    private void renderScoreboard(ScoreObjective objective, ScaledResolution scaledRes) {
         Scoreboard scoreboard = objective.getScoreboard();
         Collection<Score> collection = scoreboard.getSortedScores(objective);
-        List<Score> list = Lists.newArrayList(Iterables.filter(collection, new Predicate<Score>()
-        {
-            public boolean apply(Score p_apply_1_)
-            {
+        List<Score> list = Lists.newArrayList(Iterables.filter(collection, new Predicate<Score>() {
+            public boolean apply(Score p_apply_1_) {
                 return p_apply_1_.getPlayerName() != null && !p_apply_1_.getPlayerName().startsWith("#");
             }
         }));
 
-        if (list.size() > 15)
-        {
+        if (list.size() > 15) {
             collection = Lists.newArrayList(Iterables.skip(list, collection.size() - 15));
-        }
-        else
-        {
+        } else {
             collection = list;
         }
 
         int i = this.getFontRenderer().getStringWidth(objective.getDisplayName());
 
-        for (Score score : collection)
-        {
+        for (Score score : collection) {
             ScorePlayerTeam scoreplayerteam = scoreboard.getPlayersTeam(score.getPlayerName());
             String s = ScorePlayerTeam.formatPlayerName(scoreplayerteam, score.getPlayerName()) + ": " + EnumChatFormatting.RED + score.getScorePoints();
             i = Math.max(i, this.getFontRenderer().getStringWidth(s));
@@ -562,8 +523,7 @@ public class GuiIngame extends Gui
         int l1 = scaledRes.getScaledWidth() - i - k1;
         int j = 0;
 
-        for (Score score1 : collection)
-        {
+        for (Score score1 : collection) {
             ++j;
             ScorePlayerTeam scoreplayerteam1 = scoreboard.getPlayersTeam(score1.getPlayerName());
             String s1 = ScorePlayerTeam.formatPlayerName(scoreplayerteam1, score1.getPlayerName());
@@ -574,8 +534,7 @@ public class GuiIngame extends Gui
             this.getFontRenderer().drawString(s1, l1, k, 553648127);
             this.getFontRenderer().drawString(s2, l - this.getFontRenderer().getStringWidth(s2), k, 553648127);
 
-            if (j == collection.size())
-            {
+            if (j == collection.size()) {
                 String s3 = objective.getDisplayName();
                 drawRect(l1 - 2, k - this.getFontRenderer().FONT_HEIGHT - 1, l, k - 1, 1610612736);
                 drawRect(l1 - 2, k - 1, l, k, 1342177280);
@@ -584,27 +543,21 @@ public class GuiIngame extends Gui
         }
     }
 
-    private void renderPlayerStats(ScaledResolution scaledRes)
-    {
-        if (this.mc.getRenderViewEntity() instanceof EntityPlayer)
-        {
-            EntityPlayer entityplayer = (EntityPlayer)this.mc.getRenderViewEntity();
+    private void renderPlayerStats(ScaledResolution scaledRes) {
+        if (this.mc.getRenderViewEntity() instanceof EntityPlayer) {
+            EntityPlayer entityplayer = (EntityPlayer) this.mc.getRenderViewEntity();
             int i = MathHelper.ceiling_float_int(entityplayer.getHealth());
-            boolean flag = this.healthUpdateCounter > (long)this.updateCounter && (this.healthUpdateCounter - (long)this.updateCounter) / 3L % 2L == 1L;
+            boolean flag = this.healthUpdateCounter > (long) this.updateCounter && (this.healthUpdateCounter - (long) this.updateCounter) / 3L % 2L == 1L;
 
-            if (i < this.playerHealth && entityplayer.hurtResistantTime > 0)
-            {
+            if (i < this.playerHealth && entityplayer.hurtResistantTime > 0) {
                 this.lastSystemTime = Minecraft.getSystemTime();
-                this.healthUpdateCounter = (long)(this.updateCounter + 20);
-            }
-            else if (i > this.playerHealth && entityplayer.hurtResistantTime > 0)
-            {
+                this.healthUpdateCounter = (long) (this.updateCounter + 20);
+            } else if (i > this.playerHealth && entityplayer.hurtResistantTime > 0) {
                 this.lastSystemTime = Minecraft.getSystemTime();
-                this.healthUpdateCounter = (long)(this.updateCounter + 10);
+                this.healthUpdateCounter = (long) (this.updateCounter + 10);
             }
 
-            if (Minecraft.getSystemTime() - this.lastSystemTime > 1000L)
-            {
+            if (Minecraft.getSystemTime() - this.lastSystemTime > 1000L) {
                 this.playerHealth = i;
                 this.lastPlayerHealth = i;
                 this.lastSystemTime = Minecraft.getSystemTime();
@@ -612,7 +565,7 @@ public class GuiIngame extends Gui
 
             this.playerHealth = i;
             int j = this.lastPlayerHealth;
-            this.rand.setSeed((long)(this.updateCounter * 312871));
+            this.rand.setSeed((long) (this.updateCounter * 312871));
             boolean flag1 = false;
             FoodStats foodstats = entityplayer.getFoodStats();
             int k = foodstats.getFoodLevel();
@@ -621,7 +574,7 @@ public class GuiIngame extends Gui
             int i1 = scaledRes.getScaledWidth() / 2 - 91;
             int j1 = scaledRes.getScaledWidth() / 2 + 91;
             int k1 = scaledRes.getScaledHeight() - 39;
-            float f = (float)iattributeinstance.getAttributeValue();
+            float f = (float) iattributeinstance.getAttributeValue();
             float f1 = entityplayer.getAbsorptionAmount();
             int l1 = MathHelper.ceiling_float_int((f + f1) / 2.0F / 10.0F);
             int i2 = Math.max(10 - (l1 - 2), 3);
@@ -630,31 +583,25 @@ public class GuiIngame extends Gui
             int k2 = entityplayer.getTotalArmorValue();
             int l2 = -1;
 
-            if (entityplayer.isPotionActive(Potion.regeneration))
-            {
+            if (entityplayer.isPotionActive(Potion.regeneration)) {
                 l2 = this.updateCounter % MathHelper.ceiling_float_int(f + 5.0F);
             }
 
             this.mc.mcProfiler.startSection("armor");
 
-            for (int i3 = 0; i3 < 10; ++i3)
-            {
-                if (k2 > 0)
-                {
+            for (int i3 = 0; i3 < 10; ++i3) {
+                if (k2 > 0) {
                     int j3 = i1 + i3 * 8;
 
-                    if (i3 * 2 + 1 < k2)
-                    {
+                    if (i3 * 2 + 1 < k2) {
                         this.drawTexturedModalRect(j3, j2, 34, 9, 9, 9);
                     }
 
-                    if (i3 * 2 + 1 == k2)
-                    {
+                    if (i3 * 2 + 1 == k2) {
                         this.drawTexturedModalRect(j3, j2, 25, 9, 9, 9);
                     }
 
-                    if (i3 * 2 + 1 > k2)
-                    {
+                    if (i3 * 2 + 1 > k2) {
                         this.drawTexturedModalRect(j3, j2, 16, 9, 9, 9);
                     }
                 }
@@ -662,82 +609,63 @@ public class GuiIngame extends Gui
 
             this.mc.mcProfiler.endStartSection("health");
 
-            for (int i6 = MathHelper.ceiling_float_int((f + f1) / 2.0F) - 1; i6 >= 0; --i6)
-            {
+            for (int i6 = MathHelper.ceiling_float_int((f + f1) / 2.0F) - 1; i6 >= 0; --i6) {
                 int j6 = 16;
 
-                if (entityplayer.isPotionActive(Potion.poison))
-                {
+                if (entityplayer.isPotionActive(Potion.poison)) {
                     j6 += 36;
-                }
-                else if (entityplayer.isPotionActive(Potion.wither))
-                {
+                } else if (entityplayer.isPotionActive(Potion.wither)) {
                     j6 += 72;
                 }
 
                 int k3 = 0;
 
-                if (flag)
-                {
+                if (flag) {
                     k3 = 1;
                 }
 
-                int l3 = MathHelper.ceiling_float_int((float)(i6 + 1) / 10.0F) - 1;
+                int l3 = MathHelper.ceiling_float_int((float) (i6 + 1) / 10.0F) - 1;
                 int i4 = i1 + i6 % 10 * 8;
                 int j4 = k1 - l3 * i2;
 
-                if (i <= 4)
-                {
+                if (i <= 4) {
                     j4 += this.rand.nextInt(2);
                 }
 
-                if (i6 == l2)
-                {
+                if (i6 == l2) {
                     j4 -= 2;
                 }
 
                 int k4 = 0;
 
-                if (entityplayer.worldObj.getWorldInfo().isHardcoreModeEnabled())
-                {
+                if (entityplayer.worldObj.getWorldInfo().isHardcoreModeEnabled()) {
                     k4 = 5;
                 }
 
                 this.drawTexturedModalRect(i4, j4, 16 + k3 * 9, 9 * k4, 9, 9);
 
-                if (flag)
-                {
-                    if (i6 * 2 + 1 < j)
-                    {
+                if (flag) {
+                    if (i6 * 2 + 1 < j) {
                         this.drawTexturedModalRect(i4, j4, j6 + 54, 9 * k4, 9, 9);
                     }
 
-                    if (i6 * 2 + 1 == j)
-                    {
+                    if (i6 * 2 + 1 == j) {
                         this.drawTexturedModalRect(i4, j4, j6 + 63, 9 * k4, 9, 9);
                     }
                 }
 
-                if (f2 <= 0.0F)
-                {
-                    if (i6 * 2 + 1 < i)
-                    {
+                if (f2 <= 0.0F) {
+                    if (i6 * 2 + 1 < i) {
                         this.drawTexturedModalRect(i4, j4, j6 + 36, 9 * k4, 9, 9);
                     }
 
-                    if (i6 * 2 + 1 == i)
-                    {
+                    if (i6 * 2 + 1 == i) {
                         this.drawTexturedModalRect(i4, j4, j6 + 45, 9 * k4, 9, 9);
                     }
-                }
-                else
-                {
-                    if (f2 == f1 && f1 % 2.0F == 1.0F)
-                    {
+                } else {
+                    if (f2 == f1 && f1 % 2.0F == 1.0F) {
                         this.drawTexturedModalRect(i4, j4, j6 + 153, 9 * k4, 9, 9);
-                    }
-                    else
-                    {
+                    } else {
                         this.drawTexturedModalRect(i4, j4, j6 + 144, 9 * k4, 9, 9);
                     }
 
@@ -747,99 +675,81 @@ public class GuiIngame extends Gui
 
             Entity entity = entityplayer.ridingEntity;
 
-            if (entity == null)
-            {
+            if (entity == null) {
                 this.mc.mcProfiler.endStartSection("food");
 
-                for (int k6 = 0; k6 < 10; ++k6)
-                {
+                for (int k6 = 0; k6 < 10; ++k6) {
                     int j7 = k1;
                     int l7 = 16;
                     int k8 = 0;
 
-                    if (entityplayer.isPotionActive(Potion.hunger))
-                    {
+                    if (entityplayer.isPotionActive(Potion.hunger)) {
                         l7 += 36;
                         k8 = 13;
                     }
 
-                    if (entityplayer.getFoodStats().getSaturationLevel() <= 0.0F && this.updateCounter % (k * 3 + 1) == 0)
-                    {
+                    if (entityplayer.getFoodStats().getSaturationLevel() <= 0.0F && this.updateCounter % (k * 3 + 1) == 0) {
                         j7 = k1 + (this.rand.nextInt(3) - 1);
                     }
 
-                    if (flag1)
-                    {
+                    if (flag1) {
                         k8 = 1;
                     }
 
                     int j9 = j1 - k6 * 8 - 9;
                     this.drawTexturedModalRect(j9, j7, 16 + k8 * 9, 27, 9, 9);
 
-                    if (flag1)
-                    {
-                        if (k6 * 2 + 1 < l)
-                        {
+                    if (flag1) {
+                        if (k6 * 2 + 1 < l) {
                             this.drawTexturedModalRect(j9, j7, l7 + 54, 27, 9, 9);
                         }
 
-                        if (k6 * 2 + 1 == l)
-                        {
+                        if (k6 * 2 + 1 == l) {
                             this.drawTexturedModalRect(j9, j7, l7 + 63, 27, 9, 9);
                         }
                     }
 
-                    if (k6 * 2 + 1 < k)
-                    {
+                    if (k6 * 2 + 1 < k) {
                         this.drawTexturedModalRect(j9, j7, l7 + 36, 27, 9, 9);
                     }
 
-                    if (k6 * 2 + 1 == k)
-                    {
+                    if (k6 * 2 + 1 == k) {
                         this.drawTexturedModalRect(j9, j7, l7 + 45, 27, 9, 9);
                     }
                 }
-            }
-            else if (entity instanceof EntityLivingBase)
-            {
+            } else if (entity instanceof EntityLivingBase) {
                 this.mc.mcProfiler.endStartSection("mountHealth");
-                EntityLivingBase entitylivingbase = (EntityLivingBase)entity;
-                int i7 = (int)Math.ceil((double)entitylivingbase.getHealth());
+                EntityLivingBase entitylivingbase = (EntityLivingBase) entity;
+                int i7 = (int) Math.ceil((double) entitylivingbase.getHealth());
                 float f3 = entitylivingbase.getMaxHealth();
-                int j8 = (int)(f3 + 0.5F) / 2;
+                int j8 = (int) (f3 + 0.5F) / 2;
 
-                if (j8 > 30)
-                {
+                if (j8 > 30) {
                     j8 = 30;
                 }
 
                 int i9 = k1;
 
-                for (int k9 = 0; j8 > 0; k9 += 20)
-                {
+                for (int k9 = 0; j8 > 0; k9 += 20) {
                     int l4 = Math.min(j8, 10);
                     j8 -= l4;
 
-                    for (int i5 = 0; i5 < l4; ++i5)
-                    {
+                    for (int i5 = 0; i5 < l4; ++i5) {
                         int j5 = 52;
                         int k5 = 0;
 
-                        if (flag1)
-                        {
+                        if (flag1) {
                             k5 = 1;
                         }
 
                         int l5 = j1 - i5 * 8 - 9;
                         this.drawTexturedModalRect(l5, i9, j5 + k5 * 9, 9, 9, 9);
 
-                        if (i5 * 2 + 1 + k9 < i7)
-                        {
+                        if (i5 * 2 + 1 + k9 < i7) {
                             this.drawTexturedModalRect(l5, i9, j5 + 36, 9, 9, 9);
                         }
 
-                        if (i5 * 2 + 1 + k9 == i7)
-                        {
+                        if (i5 * 2 + 1 + k9 == i7) {
                             this.drawTexturedModalRect(l5, i9, j5 + 45, 9, 9, 9);
                         }
                     }
@@ -850,20 +760,15 @@ public class GuiIngame extends Gui
 
             this.mc.mcProfiler.endStartSection("air");
 
-            if (entityplayer.isInsideOfMaterial(Material.water))
-            {
+            if (entityplayer.isInsideOfMaterial(Material.water)) {
                 int l6 = this.mc.thePlayer.getAir();
-                int k7 = MathHelper.ceiling_double_int((double)(l6 - 2) * 10.0D / 300.0D);
-                int i8 = MathHelper.ceiling_double_int((double)l6 * 10.0D / 300.0D) - k7;
+                int k7 = MathHelper.ceiling_double_int((double) (l6 - 2) * 10.0D / 300.0D);
+                int i8 = MathHelper.ceiling_double_int((double) l6 * 10.0D / 300.0D) - k7;
 
-                for (int l8 = 0; l8 < k7 + i8; ++l8)
-                {
-                    if (l8 < k7)
-                    {
+                for (int l8 = 0; l8 < k7 + i8; ++l8) {
+                    if (l8 < k7) {
                         this.drawTexturedModalRect(j1 - l8 * 8 - 9, j2, 16, 18, 9, 9);
-                    }
-                    else
-                    {
+                    } else {
                         this.drawTexturedModalRect(j1 - l8 * 8 - 9, j2, 25, 18, 9, 9);
                     }
                 }
@@ -876,35 +781,31 @@ public class GuiIngame extends Gui
     /**
      * Renders dragon's (boss) health on the HUD
      */
-    private void renderBossHealth()
-    {
-        if (BossStatus.bossName != null && BossStatus.statusBarTime > 0)
-        {
+    private void renderBossHealth() {
+        if (BossStatus.bossName != null && BossStatus.statusBarTime > 0) {
             --BossStatus.statusBarTime;
             FontRenderer fontrenderer = this.mc.fontRendererObj;
             ScaledResolution scaledresolution = new ScaledResolution(this.mc);
             int i = scaledresolution.getScaledWidth();
             int j = 182;
             int k = i / 2 - j / 2;
-            int l = (int)(BossStatus.healthScale * (float)(j + 1));
+            int l = (int) (BossStatus.healthScale * (float) (j + 1));
             int i1 = 12;
             this.drawTexturedModalRect(k, i1, 0, 74, j, 5);
             this.drawTexturedModalRect(k, i1, 0, 74, j, 5);
 
-            if (l > 0)
-            {
+            if (l > 0) {
                 this.drawTexturedModalRect(k, i1, 0, 79, l, 5);
             }
 
             String s = BossStatus.bossName;
-            this.getFontRenderer().drawStringWithShadow(s, (float)(i / 2 - this.getFontRenderer().getStringWidth(s) / 2), (float)(i1 - 10), 16777215);
+            this.getFontRenderer().drawStringWithShadow(s, (float) (i / 2 - this.getFontRenderer().getStringWidth(s) / 2), (float) (i1 - 10), 16777215);
             GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
             this.mc.getTextureManager().bindTexture(icons);
         }
     }
 
-    private void renderPumpkinOverlay(ScaledResolution scaledRes)
-    {
+    private void renderPumpkinOverlay(ScaledResolution scaledRes) {
         GlStateManager.disableDepth();
         GlStateManager.depthMask(false);
         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
@@ -914,9 +815,9 @@ public class GuiIngame extends Gui
         Tessellator tessellator = Tessellator.getInstance();
         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
-        worldrenderer.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
-        worldrenderer.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
-        worldrenderer.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
+        worldrenderer.pos(0.0D, (double) scaledRes.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
+        worldrenderer.pos((double) scaledRes.getScaledWidth(), (double) scaledRes.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
+        worldrenderer.pos((double) scaledRes.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
         worldrenderer.pos(0.0D, 0.0D, -90.0D).tex(0.0D, 0.0D).endVertex();
         tessellator.draw();
         GlStateManager.depthMask(true);
@@ -927,46 +828,36 @@ public class GuiIngame extends Gui
 
     /**
      * Renders a Vignette arount the entire screen that changes with light level.
-     *  
+     *
      * @param lightLevel The current brightness
-     * @param scaledRes The current resolution of the game
+     * @param scaledRes  The current resolution of the game
      */
-    private void renderVignette(float lightLevel, ScaledResolution scaledRes)
-    {
-        if (!Config.isVignetteEnabled())
-        {
+    private void renderVignette(float lightLevel, ScaledResolution scaledRes) {
+        if (!Config.isVignetteEnabled()) {
             GlStateManager.enableDepth();
             GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
-        }
-        else
-        {
+        } else {
             lightLevel = 1.0F - lightLevel;
             lightLevel = MathHelper.clamp_float(lightLevel, 0.0F, 1.0F);
             WorldBorder worldborder = this.mc.theWorld.getWorldBorder();
-            float f = (float)worldborder.getClosestDistance(this.mc.thePlayer);
-            double d0 = Math.min(worldborder.getResizeSpeed() * (double)worldborder.getWarningTime() * 1000.0D, Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
-            double d1 = Math.max((double)worldborder.getWarningDistance(), d0);
+            float f = (float) worldborder.getClosestDistance(this.mc.thePlayer);
+            double d0 = Math.min(worldborder.getResizeSpeed() * (double) worldborder.getWarningTime() * 1000.0D, Math.abs(worldborder.getTargetSize() - worldborder.getDiameter()));
+            double d1 = Math.max((double) worldborder.getWarningDistance(), d0);
 
-            if ((double)f < d1)
-            {
-                f = 1.0F - (float)((double)f / d1);
-            }
-            else
-            {
+            if ((double) f < d1) {
+                f = 1.0F - (float) ((double) f / d1);
+            } else {
                 f = 0.0F;
             }
 
-            this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(lightLevel - this.prevVignetteBrightness) * 0.01D);
+            this.prevVignetteBrightness = (float) ((double) this.prevVignetteBrightness + (double) (lightLevel - this.prevVignetteBrightness) * 0.01D);
             GlStateManager.disableDepth();
             GlStateManager.depthMask(false);
             GlStateManager.tryBlendFuncSeparate(0, 769, 1, 0);
 
-            if (f > 0.0F)
-            {
+            if (f > 0.0F) {
                 GlStateManager.color(0.0F, f, f, 1.0F);
-            }
-            else
-            {
+            } else {
                 GlStateManager.color(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
             }
 
@@ -974,9 +865,9 @@ public class GuiIngame extends Gui
             Tessellator tessellator = Tessellator.getInstance();
             WorldRenderer worldrenderer = tessellator.getWorldRenderer();
             worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
-            worldrenderer.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
-            worldrenderer.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
-            worldrenderer.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
+            worldrenderer.pos(0.0D, (double) scaledRes.getScaledHeight(), -90.0D).tex(0.0D, 1.0D).endVertex();
+            worldrenderer.pos((double) scaledRes.getScaledWidth(), (double) scaledRes.getScaledHeight(), -90.0D).tex(1.0D, 1.0D).endVertex();
+            worldrenderer.pos((double) scaledRes.getScaledWidth(), 0.0D, -90.0D).tex(1.0D, 0.0D).endVertex();
             worldrenderer.pos(0.0D, 0.0D, -90.0D).tex(0.0D, 0.0D).endVertex();
             tessellator.draw();
             GlStateManager.depthMask(true);
@@ -986,10 +877,8 @@ public class GuiIngame extends Gui
         }
     }
 
-    private void renderPortal(float timeInPortal, ScaledResolution scaledRes)
-    {
-        if (timeInPortal < 1.0F)
-        {
+    private void renderPortal(float timeInPortal, ScaledResolution scaledRes) {
+        if (timeInPortal < 1.0F) {
             timeInPortal = timeInPortal * timeInPortal;
             timeInPortal = timeInPortal * timeInPortal;
             timeInPortal = timeInPortal * 0.8F + 0.2F;
@@ -1009,10 +898,10 @@ public class GuiIngame extends Gui
         Tessellator tessellator = Tessellator.getInstance();
         WorldRenderer worldrenderer = tessellator.getWorldRenderer();
         worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
-        worldrenderer.pos(0.0D, (double)scaledRes.getScaledHeight(), -90.0D).tex((double)f, (double)f3).endVertex();
-        worldrenderer.pos((double)scaledRes.getScaledWidth(), (double)scaledRes.getScaledHeight(), -90.0D).tex((double)f2, (double)f3).endVertex();
-        worldrenderer.pos((double)scaledRes.getScaledWidth(), 0.0D, -90.0D).tex((double)f2, (double)f1).endVertex();
-        worldrenderer.pos(0.0D, 0.0D, -90.0D).tex((double)f, (double)f1).endVertex();
+        worldrenderer.pos(0.0D, (double) scaledRes.getScaledHeight(), -90.0D).tex((double) f, (double) f3).endVertex();
+        worldrenderer.pos((double) scaledRes.getScaledWidth(), (double) scaledRes.getScaledHeight(), -90.0D).tex((double) f2, (double) f3).endVertex();
+        worldrenderer.pos((double) scaledRes.getScaledWidth(), 0.0D, -90.0D).tex((double) f2, (double) f1).endVertex();
+        worldrenderer.pos(0.0D, 0.0D, -90.0D).tex((double) f, (double) f1).endVertex();
         tessellator.draw();
         GlStateManager.depthMask(true);
         GlStateManager.enableDepth();
@@ -1020,27 +909,23 @@ public class GuiIngame extends Gui
         GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
     }
 
-    private void renderHotbarItem(int index, int xPos, int yPos, float partialTicks, EntityPlayer player)
-    {
+    private void renderHotbarItem(int index, int xPos, int yPos, float partialTicks, EntityPlayer player) {
         ItemStack itemstack = player.inventory.mainInventory[index];
 
-        if (itemstack != null)
-        {
-            float f = (float)itemstack.animationsToGo - partialTicks;
+        if (itemstack != null) {
+            float f = (float) itemstack.animationsToGo - partialTicks;
 
-            if (f > 0.0F)
-            {
+            if (f > 0.0F) {
                 GlStateManager.pushMatrix();
                 float f1 = 1.0F + f / 5.0F;
-                GlStateManager.translate((float)(xPos + 8), (float)(yPos + 12), 0.0F);
+                GlStateManager.translate((float) (xPos + 8), (float) (yPos + 12), 0.0F);
                 GlStateManager.scale(1.0F / f1, (f1 + 1.0F) / 2.0F, 1.0F);
-                GlStateManager.translate((float)(-(xPos + 8)), (float)(-(yPos + 12)), 0.0F);
+                GlStateManager.translate((float) (-(xPos + 8)), (float) (-(yPos + 12)), 0.0F);
             }
 
             this.itemRenderer.renderItemAndEffectIntoGUI(itemstack, xPos, yPos);
 
-            if (f > 0.0F)
-            {
+            if (f > 0.0F) {
                 GlStateManager.popMatrix();
             }
 
@@ -1051,19 +936,15 @@ public class GuiIngame extends Gui
     /**
      * The update tick for the ingame UI
      */
-    public void updateTick()
-    {
-        if (this.recordPlayingUpFor > 0)
-        {
+    public void updateTick() {
+        if (this.recordPlayingUpFor > 0) {
             --this.recordPlayingUpFor;
         }
 
-        if (this.titlesTimer > 0)
-        {
+        if (this.titlesTimer > 0) {
             --this.titlesTimer;
 
-            if (this.titlesTimer <= 0)
-            {
+            if (this.titlesTimer <= 0) {
                 this.displayedTitle = "";
                 this.displayedSubTitle = "";
             }
@@ -1071,23 +952,16 @@ public class GuiIngame extends Gui
 
         ++this.updateCounter;
 
-        if (this.mc.thePlayer != null)
-        {
+        if (this.mc.thePlayer != null) {
             ItemStack itemstack = this.mc.thePlayer.inventory.getCurrentItem();
 
-            if (itemstack == null)
-            {
+            if (itemstack == null) {
                 this.remainingHighlightTicks = 0;
-            }
-            else if (this.highlightingItemStack != null && itemstack.getItem() == this.highlightingItemStack.getItem() && ItemStack.areItemStackTagsEqual(itemstack, this.highlightingItemStack) && (itemstack.isItemStackDamageable() || itemstack.getMetadata() == this.highlightingItemStack.getMetadata()))
-            {
-                if (this.remainingHighlightTicks > 0)
-                {
+            } else if (this.highlightingItemStack != null && itemstack.getItem() == this.highlightingItemStack.getItem() && ItemStack.areItemStackTagsEqual(itemstack, this.highlightingItemStack) && (itemstack.isItemStackDamageable() || itemstack.getMetadata() == this.highlightingItemStack.getMetadata())) {
+                if (this.remainingHighlightTicks > 0) {
                     --this.remainingHighlightTicks;
                 }
-            }
-            else
-            {
+            } else {
                 this.remainingHighlightTicks = 40;
             }
 
@@ -1095,97 +969,76 @@ public class GuiIngame extends Gui
         }
     }
 
-    public void setRecordPlayingMessage(String recordName)
-    {
-        this.setRecordPlaying(I18n.format("record.nowPlaying", new Object[] {recordName}), true);
+    public void setRecordPlayingMessage(String recordName) {
+        this.setRecordPlaying(I18n.format("record.nowPlaying", new Object[]{recordName}), true);
     }
 
-    public void setRecordPlaying(String message, boolean isPlaying)
-    {
+    public void setRecordPlaying(String message, boolean isPlaying) {
         this.recordPlaying = message;
         this.recordPlayingUpFor = 60;
         this.recordIsPlaying = isPlaying;
     }
 
-    public void displayTitle(String title, String subTitle, int timeFadeIn, int displayTime, int timeFadeOut)
-    {
-        if (title == null && subTitle == null && timeFadeIn < 0 && displayTime < 0 && timeFadeOut < 0)
-        {
+    public void displayTitle(String title, String subTitle, int timeFadeIn, int displayTime, int timeFadeOut) {
+        if (title == null && subTitle == null && timeFadeIn < 0 && displayTime < 0 && timeFadeOut < 0) {
             this.displayedTitle = "";
             this.displayedSubTitle = "";
             this.titlesTimer = 0;
-        }
-        else if (title != null)
-        {
+        } else if (title != null) {
             this.displayedTitle = title;
             this.titlesTimer = this.titleFadeIn + this.titleDisplayTime + this.titleFadeOut;
-        }
-        else if (subTitle != null)
-        {
+        } else if (subTitle != null) {
             this.displayedSubTitle = subTitle;
-        }
-        else
-        {
-            if (timeFadeIn >= 0)
-            {
+        } else {
+            if (timeFadeIn >= 0) {
                 this.titleFadeIn = timeFadeIn;
             }
 
-            if (displayTime >= 0)
-            {
+            if (displayTime >= 0) {
                 this.titleDisplayTime = displayTime;
             }
 
-            if (timeFadeOut >= 0)
-            {
+            if (timeFadeOut >= 0) {
                 this.titleFadeOut = timeFadeOut;
             }
 
-            if (this.titlesTimer > 0)
-            {
+            if (this.titlesTimer > 0) {
                 this.titlesTimer = this.titleFadeIn + this.titleDisplayTime + this.titleFadeOut;
             }
         }
     }
 
-    public void setRecordPlaying(IChatComponent component, boolean isPlaying)
-    {
+    public void setRecordPlaying(IChatComponent component, boolean isPlaying) {
         this.setRecordPlaying(component.getUnformattedText(), isPlaying);
     }
 
     /**
      * returns a pointer to the persistant Chat GUI, containing all previous chat messages and such
      */
-    public GuiNewChat getChatGUI()
-    {
+    public GuiNewChat getChatGUI() {
         return this.persistantChatGUI;
     }
 
-    public int getUpdateCounter()
-    {
+    public int getUpdateCounter() {
         return this.updateCounter;
     }
 
-    public FontRenderer getFontRenderer()
-    {
+    public FontRenderer getFontRenderer() {
         return this.mc.fontRendererObj;
     }
 
-    public GuiSpectator getSpectatorGui()
-    {
+    public GuiSpectator getSpectatorGui() {
         return this.spectatorGui;
     }
 
-    public GuiPlayerTabOverlay getTabList()
-    {
+    public GuiPlayerTabOverlay getTabList() {
         return this.overlayPlayerList;
     }
 
     /**
      * Reset the GuiPlayerTabOverlay's message header and footer
      */
-    public void resetPlayersOverlayFooterHeader()
-    {
+    public void resetPlayersOverlayFooterHeader() {
         this.overlayPlayerList.resetFooterHeader();
     }
 }
diff --git a/src/main/java/net/minecraft/client/gui/GuiKeyBindingList.java b/src/main/java/net/minecraft/client/gui/GuiKeyBindingList.java
index 4178c2e..02809be 100644
--- a/src/main/java/net/minecraft/client/gui/GuiKeyBindingList.java
+++ b/src/main/java/net/minecraft/client/gui/GuiKeyBindingList.java
@@ -20,7 +20,7 @@ public class GuiKeyBindingList extends GuiListExtended
         super(mcIn, controls.width, controls.height, 63, controls.height - 32, 20);
         this.field_148191_k = controls;
         this.mc = mcIn;
-        KeyBinding[] akeybinding = (KeyBinding[])ArrayUtils.clone(mcIn.gameSettings.mc);
+        KeyBinding[] akeybinding = (KeyBinding[])ArrayUtils.clone(mcIn.gameSettings.moreKeyBindings);
         this.listEntries = new GuiListExtended.IGuiListEntry[akeybinding.length + KeyBinding.getKeybinds().size()];
         Arrays.sort((Object[])akeybinding);
         int i = 0;
@@ -133,7 +133,7 @@ public class GuiKeyBindingList extends GuiListExtended
 
             if (this.keybinding.getKeyCode() != 0)
             {
-                for (KeyBinding keybinding : GuiKeyBindingList.this.mc.gameSettings.mc)
+                for (KeyBinding keybinding : GuiKeyBindingList.this.mc.gameSettings.moreKeyBindings)
                 {
                     if (keybinding != this.keybinding && keybinding.getKeyCode() == this.keybinding.getKeyCode())
                     {
diff --git a/src/main/java/net/minecraft/client/gui/GuiScreenDemo.java b/src/main/java/net/minecraft/client/gui/GuiScreenDemo.java
index c3bc74f..0490d7c 100644
--- a/src/main/java/net/minecraft/client/gui/GuiScreenDemo.java
+++ b/src/main/java/net/minecraft/client/gui/GuiScreenDemo.java
@@ -87,10 +87,10 @@ public class GuiScreenDemo extends GuiScreen
         this.fontRendererObj.drawString(I18n.format("demo.help.title", new Object[0]), i, j, 2039583);
         j = j + 12;
         GameSettings gamesettings = this.mc.gameSettings;
-        this.fontRendererObj.drawString(I18n.format("demo.help.movementShort", new Object[] {GameSettings.getKeyDisplayString(gamesettings.keyBindLeft.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindBack.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindRight.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindJump.getKeyCode())}), i, j, 5197647);
+        this.fontRendererObj.drawString(I18n.format("demo.help.movementShort", new Object[] {GameSettings.getKeyDisplayString(gamesettings.keyBindForward2.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindLeft.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindBack.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindRight.getKeyCode())}), i, j, 5197647);
         this.fontRendererObj.drawString(I18n.format("demo.help.movementMouse", new Object[0]), i, j + 12, 5197647);
-        this.fontRendererObj.drawString(I18n.format("demo.help.jump", new Object[] {GameSettings.getKeyDisplayString(gamesettings.keyBindSneak.getKeyCode())}), i, j + 24, 5197647);
-        this.fontRendererObj.drawString(I18n.format("demo.help.inventory", new Object[] {GameSettings.getKeyDisplayString(gamesettings.keyBindUseItem.getKeyCode())}), i, j + 36, 5197647);
+        this.fontRendererObj.drawString(I18n.format("demo.help.jump", new Object[] {GameSettings.getKeyDisplayString(gamesettings.keyBindJump.getKeyCode())}), i, j + 24, 5197647);
+        this.fontRendererObj.drawString(I18n.format("demo.help.inventory", new Object[] {GameSettings.getKeyDisplayString(gamesettings.keyBindInventory.getKeyCode())}), i, j + 36, 5197647);
         this.fontRendererObj.drawSplitString(I18n.format("demo.help.fullWrapped", new Object[0]), i, j + 68, 218, 2039583);
         super.drawScreen(mouseX, mouseY, partialTicks);
     }
diff --git a/src/main/java/net/minecraft/client/gui/GuiScreenServerList.java b/src/main/java/net/minecraft/client/gui/GuiScreenServerList.java
index 3c88ea9..c7cfac9 100644
--- a/src/main/java/net/minecraft/client/gui/GuiScreenServerList.java
+++ b/src/main/java/net/minecraft/client/gui/GuiScreenServerList.java
@@ -38,7 +38,7 @@ public class GuiScreenServerList extends GuiScreen
         this.field_146302_g = new GuiTextField(2, this.fontRendererObj, this.width / 2 - 100, 116, 200, 20);
         this.field_146302_g.setMaxStringLength(128);
         this.field_146302_g.setFocused(true);
-        this.field_146302_g.setText(this.mc.gameSettings.smoothCamera);
+        this.field_146302_g.setText(this.mc.gameSettings.lastServer1);
         ((GuiButton)this.buttonList.get(0)).enabled = this.field_146302_g.getText().length() > 0 && this.field_146302_g.getText().split(":").length > 0;
     }
 
@@ -48,7 +48,7 @@ public class GuiScreenServerList extends GuiScreen
     public void onGuiClosed()
     {
         Keyboard.enableRepeatEvents(false);
-        this.mc.gameSettings.smoothCamera = this.field_146302_g.getText();
+        this.mc.gameSettings.lastServer1 = this.field_146302_g.getText();
         this.mc.gameSettings.saveOptions();
     }
 
diff --git a/src/main/java/net/minecraft/client/gui/GuiVideoSettings.java b/src/main/java/net/minecraft/client/gui/GuiVideoSettings.java
index 7681187..ac5ab98 100644
--- a/src/main/java/net/minecraft/client/gui/GuiVideoSettings.java
+++ b/src/main/java/net/minecraft/client/gui/GuiVideoSettings.java
@@ -102,7 +102,7 @@ public class GuiVideoSettings extends GuiScreenOF
     {
         if (p_actionPerformed_1_.enabled)
         {
-            int i = this.guiGameSettings.particleSetting;
+            int i = this.guiGameSettings.guiScale;
 
             if (p_actionPerformed_1_.id < 200 && p_actionPerformed_1_ instanceof GuiOptionButton)
             {
@@ -116,7 +116,7 @@ public class GuiVideoSettings extends GuiScreenOF
                 this.mc.displayGuiScreen(this.parentGuiScreen);
             }
 
-            if (this.guiGameSettings.particleSetting != i)
+            if (this.guiGameSettings.guiScale != i)
             {
                 ScaledResolution scaledresolution = new ScaledResolution(this.mc);
                 int j = scaledresolution.getScaledWidth();
diff --git a/src/main/java/net/minecraft/client/gui/ScaledResolution.java b/src/main/java/net/minecraft/client/gui/ScaledResolution.java
index 99ff97f..dfa490d 100644
--- a/src/main/java/net/minecraft/client/gui/ScaledResolution.java
+++ b/src/main/java/net/minecraft/client/gui/ScaledResolution.java
@@ -17,7 +17,7 @@ public class ScaledResolution
         this.scaledHeight = p_i46445_1_.displayHeight;
         this.scaleFactor = 1;
         boolean flag = p_i46445_1_.isUnicode();
-        int i = p_i46445_1_.gameSettings.particleSetting;
+        int i = p_i46445_1_.gameSettings.guiScale;
 
         if (i == 0)
         {
diff --git a/src/main/java/net/minecraft/client/gui/achievement/GuiAchievements.java b/src/main/java/net/minecraft/client/gui/achievement/GuiAchievements.java
index 1ddb3cf..b6543ed 100644
--- a/src/main/java/net/minecraft/client/gui/achievement/GuiAchievements.java
+++ b/src/main/java/net/minecraft/client/gui/achievement/GuiAchievements.java
@@ -87,7 +87,7 @@ public class GuiAchievements extends GuiScreen implements IProgressMeter
      */
     protected void keyTyped(char typedChar, int keyCode) throws IOException
     {
-        if (keyCode == this.mc.gameSettings.keyBindUseItem.getKeyCode())
+        if (keyCode == this.mc.gameSettings.keyBindInventory.getKeyCode())
         {
             this.mc.displayGuiScreen((GuiScreen)null);
             this.mc.setIngameFocus();
diff --git a/src/main/java/net/minecraft/client/gui/inventory/GuiContainer.java b/src/main/java/net/minecraft/client/gui/inventory/GuiContainer.java
index affc8c2..29cc5f4 100644
--- a/src/main/java/net/minecraft/client/gui/inventory/GuiContainer.java
+++ b/src/main/java/net/minecraft/client/gui/inventory/GuiContainer.java
@@ -359,7 +359,7 @@ public abstract class GuiContainer extends GuiScreen
     protected void mouseClicked(int mouseX, int mouseY, int mouseButton) throws IOException
     {
         super.mouseClicked(mouseX, mouseY, mouseButton);
-        boolean flag = mouseButton == this.mc.gameSettings.keyBindChat.getKeyCode() + 100;
+        boolean flag = mouseButton == this.mc.gameSettings.keyBindPickBlock.getKeyCode() + 100;
         Slot slot = this.getSlotAtPosition(mouseX, mouseY);
         long i = Minecraft.getSystemTime();
         this.doubleClick = this.lastClickSlot == slot && i - this.lastClickTime < 250L && this.lastClickButton == mouseButton;
@@ -407,7 +407,7 @@ public abstract class GuiContainer extends GuiScreen
                 {
                     if (this.mc.thePlayer.inventory.getItemStack() == null)
                     {
-                        if (mouseButton == this.mc.gameSettings.keyBindChat.getKeyCode() + 100)
+                        if (mouseButton == this.mc.gameSettings.keyBindPickBlock.getKeyCode() + 100)
                         {
                             this.handleMouseClick(slot, l, mouseButton, 3);
                         }
@@ -445,7 +445,7 @@ public abstract class GuiContainer extends GuiScreen
                         {
                             this.dragSplittingLimit = 1;
                         }
-                        else if (mouseButton == this.mc.gameSettings.keyBindChat.getKeyCode() + 100)
+                        else if (mouseButton == this.mc.gameSettings.keyBindPickBlock.getKeyCode() + 100)
                         {
                             this.dragSplittingLimit = 2;
                         }
@@ -625,7 +625,7 @@ public abstract class GuiContainer extends GuiScreen
             }
             else if (this.mc.thePlayer.inventory.getItemStack() != null)
             {
-                if (state == this.mc.gameSettings.keyBindChat.getKeyCode() + 100)
+                if (state == this.mc.gameSettings.keyBindPickBlock.getKeyCode() + 100)
                 {
                     this.handleMouseClick(slot, k, state, 3);
                 }
@@ -691,7 +691,7 @@ public abstract class GuiContainer extends GuiScreen
      */
     protected void keyTyped(char typedChar, int keyCode) throws IOException
     {
-        if (keyCode == 1 || keyCode == this.mc.gameSettings.keyBindUseItem.getKeyCode())
+        if (keyCode == 1 || keyCode == this.mc.gameSettings.keyBindInventory.getKeyCode())
         {
             this.mc.thePlayer.closeScreen();
         }
@@ -700,11 +700,11 @@ public abstract class GuiContainer extends GuiScreen
 
         if (this.theSlot != null && this.theSlot.getHasStack())
         {
-            if (keyCode == this.mc.gameSettings.keyBindChat.getKeyCode())
+            if (keyCode == this.mc.gameSettings.keyBindPickBlock.getKeyCode())
             {
                 this.handleMouseClick(this.theSlot, this.theSlot.slotNumber, 0, 3);
             }
-            else if (keyCode == this.mc.gameSettings.keyBindAttack.getKeyCode())
+            else if (keyCode == this.mc.gameSettings.keyBindDrop.getKeyCode())
             {
                 this.handleMouseClick(this.theSlot, this.theSlot.slotNumber, isCtrlKeyDown() ? 1 : 0, 4);
             }
diff --git a/src/main/java/net/minecraft/client/gui/inventory/GuiContainerCreative.java b/src/main/java/net/minecraft/client/gui/inventory/GuiContainerCreative.java
index ed909ec..6309706 100644
--- a/src/main/java/net/minecraft/client/gui/inventory/GuiContainerCreative.java
+++ b/src/main/java/net/minecraft/client/gui/inventory/GuiContainerCreative.java
@@ -307,7 +307,7 @@ public class GuiContainerCreative extends InventoryEffectRenderer
     {
         if (selectedTabIndex != CreativeTabs.tabAllSearch.getTabIndex())
         {
-            if (GameSettings.isKeyDown(this.mc.gameSettings.keyBindPlayerList))
+            if (GameSettings.isKeyDown(this.mc.gameSettings.keyBindChat))
             {
                 this.setCurrentCreativeTab(CreativeTabs.tabAllSearch);
             }
diff --git a/src/main/java/net/minecraft/client/network/NetHandlerPlayClient.java b/src/main/java/net/minecraft/client/network/NetHandlerPlayClient.java
index 2bbd7a2..c976f00 100644
--- a/src/main/java/net/minecraft/client/network/NetHandlerPlayClient.java
+++ b/src/main/java/net/minecraft/client/network/NetHandlerPlayClient.java
@@ -272,7 +272,7 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
         this.gameController.playerController = new PlayerControllerMP(this.gameController, this);
         this.clientWorldController = new WorldClient(this, new WorldSettings(0L, packetIn.getGameType(), false, packetIn.isHardcoreMode(), packetIn.getWorldType()), packetIn.getDimension(), packetIn.getDifficulty(), this.gameController.mcProfiler);
-        this.gameController.gameSettings.hideGUI = packetIn.getDifficulty();
+        this.gameController.gameSettings.difficulty = packetIn.getDifficulty();
         this.gameController.loadWorld(this.clientWorldController);
         this.gameController.thePlayer.dimension = packetIn.getDimension();
         this.gameController.displayGuiScreen(new GuiDownloadTerrain(this));
@@ -849,7 +849,7 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient {
 
             if (flag) {
                 GameSettings gamesettings = this.gameController.gameSettings;
-                this.gameController.ingameGUI.setRecordPlaying(I18n.format("mount.onboard", new Object[]{GameSettings.getKeyDisplayString(gamesettings.keyBindSprint.getKeyCode())}), false);
+                this.gameController.ingameGUI.setRecordPlaying(I18n.format("mount.onboard", new Object[]{GameSettings.getKeyDisplayString(gamesettings.keyBindSneak.getKeyCode())}), false);
             }
         } else if (packetIn.getLeash() == 1 && entity instanceof EntityLiving) {
             if (entity1 != null) {
@@ -1168,11 +1168,11 @@ public class NetHandlerPlayClient implements INetHandlerPlayClient {
             if (f == 0.0F) {
                 this.gameController.displayGuiScreen(new GuiScreenDemo());
             } else if (f == 101.0F) {
-                this.gameController.ingameGUI.getChatGUI().printChatMessage(new ChatComponentTranslation("demo.help.movement", new Object[]{GameSettings.getKeyDisplayString(gamesettings.keyBindLeft.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindBack.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindRight.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindJump.getKeyCode())}));
+                this.gameController.ingameGUI.getChatGUI().printChatMessage(new ChatComponentTranslation("demo.help.movement", new Object[]{GameSettings.getKeyDisplayString(gamesettings.keyBindForward2.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindLeft.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindBack.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindRight.getKeyCode())}));
             } else if (f == 102.0F) {
-                this.gameController.ingameGUI.getChatGUI().printChatMessage(new ChatComponentTranslation("demo.help.jump", new Object[]{GameSettings.getKeyDisplayString(gamesettings.keyBindSneak.getKeyCode())}));
+                this.gameController.ingameGUI.getChatGUI().printChatMessage(new ChatComponentTranslation("demo.help.jump", new Object[]{GameSettings.getKeyDisplayString(gamesettings.keyBindJump.getKeyCode())}));
             } else if (f == 103.0F) {
-                this.gameController.ingameGUI.getChatGUI().printChatMessage(new ChatComponentTranslation("demo.help.inventory", new Object[]{GameSettings.getKeyDisplayString(gamesettings.keyBindUseItem.getKeyCode())}));
+                this.gameController.ingameGUI.getChatGUI().printChatMessage(new ChatComponentTranslation("demo.help.inventory", new Object[]{GameSettings.getKeyDisplayString(gamesettings.keyBindInventory.getKeyCode())}));
             }
         } else if (i == 6) {
             this.clientWorldController.playSound(entityplayer.posX, entityplayer.posY + (double) entityplayer.getEyeHeight(), entityplayer.posZ, "random.successful_hit", 0.18F, 0.45F, false);
diff --git a/src/main/java/net/minecraft/client/renderer/EntityRenderer.java b/src/main/java/net/minecraft/client/renderer/EntityRenderer.java
index ba61898..ae76537 100644
--- a/src/main/java/net/minecraft/client/renderer/EntityRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/EntityRenderer.java
@@ -615,7 +615,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
 
             if (useFOVSetting)
             {
-                f = this.mc.gameSettings.gammaSetting;
+                f = this.mc.gameSettings.fov;
 
                 if (Config.isDynamicFov())
                 {
@@ -1189,7 +1189,7 @@ public class EntityRenderer implements IResourceManagerReloadListener
                         f10 = 1.0F;
                     }
 
-                    float f16 = this.mc.gameSettings.saturation;
+                    float f16 = this.mc.gameSettings.gamma;
                     float f17 = 1.0F - f8;
                     float f13 = 1.0F - f9;
                     float f14 = 1.0F - f10;
@@ -1968,11 +1968,11 @@ public class EntityRenderer implements IResourceManagerReloadListener
             int j = 0;
             int k = (int)(100.0F * f * f);
 
-            if (this.mc.gameSettings.language == 1)
+            if (this.mc.gameSettings.particles == 1)
             {
                 k >>= 1;
             }
-            else if (this.mc.gameSettings.language == 2)
+            else if (this.mc.gameSettings.particles == 2)
             {
                 k = 0;
             }
diff --git a/src/main/java/net/minecraft/client/renderer/RenderGlobal.java b/src/main/java/net/minecraft/client/renderer/RenderGlobal.java
index b6419dd..539375f 100644
--- a/src/main/java/net/minecraft/client/renderer/RenderGlobal.java
+++ b/src/main/java/net/minecraft/client/renderer/RenderGlobal.java
@@ -324,7 +324,7 @@ public class RenderGlobal implements IWorldAccess, IResourceManagerReloadListene
 
     protected boolean isRenderEntityOutlines()
     {
-        return !Config.isFastRender() && !Config.isShaders() && !Config.isAntialiasing() ? this.entityOutlineFramebuffer != null && this.entityOutlineShader != null && this.mc.thePlayer != null && this.mc.thePlayer.isSpectator() && this.mc.gameSettings.keyBindStreamStartStop.isKeyDown() : false;
+        return !Config.isFastRender() && !Config.isShaders() && !Config.isAntialiasing() ? this.entityOutlineFramebuffer != null && this.entityOutlineShader != null && this.mc.thePlayer != null && this.mc.thePlayer.isSpectator() && this.mc.gameSettings.keyBindSpectatorOutlines.isKeyDown() : false;
     }
 
     private void generateSky2()
@@ -2827,7 +2827,7 @@ public class RenderGlobal implements IWorldAccess, IResourceManagerReloadListene
     {
         if (this.mc != null && this.mc.getRenderViewEntity() != null && this.mc.effectRenderer != null)
         {
-            int i = this.mc.gameSettings.language;
+            int i = this.mc.gameSettings.particles;
 
             if (i == 1 && this.theWorld.rand.nextInt(3) == 0)
             {
diff --git a/src/main/java/net/minecraft/client/renderer/tileentity/RenderItemFrame.java b/src/main/java/net/minecraft/client/renderer/tileentity/RenderItemFrame.java
index 3a49155..7af3442 100644
--- a/src/main/java/net/minecraft/client/renderer/tileentity/RenderItemFrame.java
+++ b/src/main/java/net/minecraft/client/renderer/tileentity/RenderItemFrame.java
@@ -277,7 +277,7 @@ public class RenderItemFrame extends Render<EntityItemFrame>
     public static void updateItemRenderDistance()
     {
         Minecraft minecraft = Config.getMinecraft();
-        double d0 = (double)Config.limit(minecraft.gameSettings.gammaSetting, 1.0F, 120.0F);
+        double d0 = (double)Config.limit(minecraft.gameSettings.fov, 1.0F, 120.0F);
         double d1 = Math.max(6.0D * (double)minecraft.displayHeight / d0, 16.0D);
         itemRenderDistanceSq = d1 * d1;
     }
diff --git a/src/main/java/net/minecraft/client/renderer/tileentity/TileEntitySignRenderer.java b/src/main/java/net/minecraft/client/renderer/tileentity/TileEntitySignRenderer.java
index c42b076..326bcad 100644
--- a/src/main/java/net/minecraft/client/renderer/tileentity/TileEntitySignRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/tileentity/TileEntitySignRenderer.java
@@ -166,7 +166,7 @@ public class TileEntitySignRenderer extends TileEntitySpecialRenderer<TileEntity
     public static void updateTextRenderDistance()
     {
         Minecraft minecraft = Config.getMinecraft();
-        double d0 = (double)Config.limit(minecraft.gameSettings.gammaSetting, 1.0F, 120.0F);
+        double d0 = (double)Config.limit(minecraft.gameSettings.fov, 1.0F, 120.0F);
         double d1 = Math.max(1.5D * (double)minecraft.displayHeight / d0, 16.0D);
         textRenderDistanceSq = d1 * d1;
     }
diff --git a/src/main/java/net/minecraft/client/resources/DefaultResourcePack.java b/src/main/java/net/minecraft/client/resources/DefaultResourcePack.java
index e33343c..03ce5b5 100644
--- a/src/main/java/net/minecraft/client/resources/DefaultResourcePack.java
+++ b/src/main/java/net/minecraft/client/resources/DefaultResourcePack.java
@@ -17,7 +17,7 @@ import net.optifine.reflect.ReflectorForge;
 
 public class DefaultResourcePack implements IResourcePack
 {
-    public static final Set<String> defaultResourceDomains = ImmutableSet.<String>of("minecraft", "realms");
+    public static final Set<String> defaultResourceDomains = ImmutableSet.<String>of("jclient", "minecraft", "realms");
     private final Map<String, File> mapAssets;
 
     public DefaultResourcePack(Map<String, File> mapAssetsIn)
diff --git a/src/main/java/net/minecraft/client/settings/GameSettings.java b/src/main/java/net/minecraft/client/settings/GameSettings.java
index 9ec0624..04ed02a 100644
--- a/src/main/java/net/minecraft/client/settings/GameSettings.java
+++ b/src/main/java/net/minecraft/client/settings/GameSettings.java
@@ -137,40 +137,34 @@ public class GameSettings {
     public boolean showInventoryAchievementHint = true;
     public int mipmapLevels = 4;
     private Map<SoundCategory, Float> optionsFile = Maps.newEnumMap(SoundCategory.class);
-    public int streamCompression = 1;
-    public boolean streamSendMetadata = true;
-    public String streamPreferredServer = "";
-    public int streamChatEnabled = 0;
-    public int streamChatUserFilter = 0;
-    public int streamMicToggleBehavior = 0;
     public boolean useNativeTransport = true;
     public boolean entityShadows = true;
-    public boolean keyBindForward = true;
-    public KeyBinding keyBindLeft = new KeyBinding("key.forward", 17, "key.categories.movement");
-    public KeyBinding keyBindBack = new KeyBinding("key.left", 30, "key.categories.movement");
-    public KeyBinding keyBindRight = new KeyBinding("key.back", 31, "key.categories.movement");
-    public KeyBinding keyBindJump = new KeyBinding("key.right", 32, "key.categories.movement");
-    public KeyBinding keyBindSneak = new KeyBinding("key.jump", 57, "key.categories.movement");
-    public KeyBinding keyBindSprint = new KeyBinding("key.sneak", 42, "key.categories.movement");
-    public KeyBinding keyBindInventory = new KeyBinding("key.sprint", 29, "key.categories.movement");
-    public KeyBinding keyBindUseItem = new KeyBinding("key.inventory", 18, "key.categories.inventory");
-    public KeyBinding keyBindDrop = new KeyBinding("key.use", -99, "key.categories.gameplay");
-    public KeyBinding keyBindAttack = new KeyBinding("key.drop", 16, "key.categories.gameplay");
-    public KeyBinding keyBindPickBlock = new KeyBinding("key.attack", -100, "key.categories.gameplay");
-    public KeyBinding keyBindChat = new KeyBinding("key.pickItem", -98, "key.categories.gameplay");
-    public KeyBinding keyBindPlayerList = new KeyBinding("key.chat", 20, "key.categories.multiplayer");
-    public KeyBinding keyBindCommand = new KeyBinding("key.playerlist", 15, "key.categories.multiplayer");
-    public KeyBinding keyBindScreenshot = new KeyBinding("key.command", 53, "key.categories.multiplayer");
-    public KeyBinding keyBindTogglePerspective = new KeyBinding("key.screenshot", 60, "key.categories.misc");
-    public KeyBinding keyBindSmoothCamera = new KeyBinding("key.togglePerspective", 63, "key.categories.misc");
-    public KeyBinding keyBindFullscreen = new KeyBinding("key.smoothCamera", 0, "key.categories.misc");
-    public KeyBinding keyBindSpectatorOutlines = new KeyBinding("key.fullscreen", 87, "key.categories.misc");
-    public KeyBinding keyBindStreamStartStop = new KeyBinding("key.spectatorOutlines", 0, "key.categories.misc");
+    public KeyBinding keyBindForward2 = new KeyBinding("key.forward", 17, "key.categories.movement");
+    public KeyBinding keyBindLeft = new KeyBinding("key.left", 30, "key.categories.movement");
+    public KeyBinding keyBindBack = new KeyBinding("key.back", 31, "key.categories.movement");
+    public KeyBinding keyBindRight = new KeyBinding("key.right", 32, "key.categories.movement");
+    public KeyBinding keyBindJump = new KeyBinding("key.jump", 57, "key.categories.movement");
+    public KeyBinding keyBindSneak = new KeyBinding("key.sneak", 42, "key.categories.movement");
+    public KeyBinding keyBindSprint = new KeyBinding("key.sprint", 29, "key.categories.movement");
+    public KeyBinding keyBindInventory = new KeyBinding("key.inventory", 18, "key.categories.inventory");
+    public KeyBinding keyBindUseItem = new KeyBinding("key.use", -99, "key.categories.gameplay");
+    public KeyBinding keyBindDrop = new KeyBinding("key.drop", 16, "key.categories.gameplay");
+    public KeyBinding keyBindAttack = new KeyBinding("key.attack", -100, "key.categories.gameplay");
+    public KeyBinding keyBindPickBlock = new KeyBinding("key.pickItem", -98, "key.categories.gameplay");
+    public KeyBinding keyBindChat = new KeyBinding("key.chat", 20, "key.categories.multiplayer");
+    public KeyBinding keyBindPlayerList = new KeyBinding("key.playerlist", 15, "key.categories.multiplayer");
+    public KeyBinding keyBindCommand = new KeyBinding("key.command", 53, "key.categories.multiplayer");
+    public KeyBinding keyBindScreenshot = new KeyBinding("key.screenshot", 60, "key.categories.misc");
+    public KeyBinding keyBindPerspective = new KeyBinding("key.togglePerspective", 63, "key.categories.misc");
+    public KeyBinding keyBindSmoothCamera = new KeyBinding("key.smoothCamera", 0, "key.categories.misc");
+    public KeyBinding keyBindFullscreen = new KeyBinding("key.fullscreen", 87, "key.categories.misc");
+    public KeyBinding keyBindSpectatorOutlines = new KeyBinding("key.spectatorOutlines", 0, "key.categories.misc");
+    public KeyBinding keyBindClientSettings = new KeyBinding("key.jclient", 54, "key.categories.misc");
     public KeyBinding[] keyBindings = new KeyBinding[]{new KeyBinding("key.hotbar.1", 2, "key.categories.inventory"), new KeyBinding("key.hotbar.2", 3, "key.categories.inventory"), new KeyBinding("key.hotbar.3", 4, "key.categories.inventory"), new KeyBinding("key.hotbar.4", 5, "key.categories.inventory"), new KeyBinding("key.hotbar.5", 6, "key.categories.inventory"), new KeyBinding("key.hotbar.6", 7, "key.categories.inventory"), new KeyBinding("key.hotbar.7", 8, "key.categories.inventory"), new KeyBinding("key.hotbar.8", 9, "key.categories.inventory"), new KeyBinding("key.hotbar.9", 10, "key.categories.inventory")};
-    public KeyBinding[] mc;
-    protected Minecraft difficulty;
+    public KeyBinding[] moreKeyBindings;
+    protected Minecraft mc;
     private File bc;
-    public EnumDifficulty hideGUI;
+    public EnumDifficulty difficulty;
     public boolean thirdPersonView;
 
     /**
@@ -188,26 +182,18 @@ public class GameSettings {
     /**
      * Smooth Camera Toggle
      */
-    public String smoothCamera;
+    public String lastServer1;
     public boolean debugCamEnable;
     public boolean fovSetting;
-    public float gammaSetting;
+    public float fov;
+    public float gamma;
     public float saturation;
-
-    /**
-     * GUI scale
-     */
-    public float guiScale;
+    public int guiScale;
 
     /**
      * Determines amount of particles. 0 = All, 1 = Decreased, 2 = Minimal
      */
-    public int particleSetting;
-
-    /**
-     * Game settings language
-     */
-    public int language;
+    public int particles;
     public String forceUnicodeFont;
     public boolean logger;
     public int ofFogType = 1;
@@ -297,13 +283,13 @@ public class GameSettings {
     private File optionsFileOF;
 
     public GameSettings(Minecraft mcIn, File optionsFileIn) {
-        this.mc = (KeyBinding[]) ((KeyBinding[]) ArrayUtils.addAll(new KeyBinding[]{this.keyBindPickBlock, this.keyBindDrop, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindInventory, this.keyBindAttack, this.keyBindUseItem, this.keyBindPlayerList, this.keyBindCommand, this.keyBindChat, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindFullscreen, this.keyBindSpectatorOutlines, this.keyBindStreamStartStop}, this.keyBindings));
-        this.hideGUI = EnumDifficulty.NORMAL;
-        this.smoothCamera = "";
-        this.gammaSetting = 70.0F;
+        this.moreKeyBindings = (KeyBinding[]) ((KeyBinding[]) ArrayUtils.addAll(new KeyBinding[]{this.keyBindAttack, this.keyBindUseItem, this.keyBindForward2, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindPerspective, this.keyBindSmoothCamera, this.keyBindFullscreen, this.keyBindSpectatorOutlines}, this.keyBindings));
+        this.difficulty = EnumDifficulty.NORMAL;
+        this.lastServer1 = "";
+        this.fov = 70.0F;
         this.forceUnicodeFont = "en_US";
         this.logger = false;
-        this.difficulty = mcIn;
+        this.mc = mcIn;
         this.bc = new File(optionsFileIn, "options.txt");
 
         if (mcIn.isJava64bit() && Runtime.getRuntime().maxMemory() >= 1000000000L) {
@@ -325,18 +311,18 @@ public class GameSettings {
         this.optionsFileOF = new File(optionsFileIn, "optionsof.txt");
         this.limitFramerate = (int) GameSettings.Options.FRAMERATE_LIMIT.getValueMax();
         this.ofKeyBindZoom = new KeyBinding("of.key.zoom", 46, "key.categories.misc");
-        this.mc = (KeyBinding[]) ((KeyBinding[]) ArrayUtils.add(this.mc, this.ofKeyBindZoom));
-        KeyUtils.fixKeyConflicts(this.mc, new KeyBinding[]{this.ofKeyBindZoom});
+        this.moreKeyBindings = (KeyBinding[]) ((KeyBinding[]) ArrayUtils.add(this.moreKeyBindings, this.ofKeyBindZoom));
+        KeyUtils.fixKeyConflicts(this.moreKeyBindings, new KeyBinding[]{this.ofKeyBindZoom});
         this.renderDistanceChunks = 8;
         this.loadOptions();
         Config.initGameSettings(this);
     }
 
     public GameSettings() {
-        this.mc = (KeyBinding[]) ((KeyBinding[]) ArrayUtils.addAll(new KeyBinding[]{this.keyBindPickBlock, this.keyBindDrop, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindInventory, this.keyBindAttack, this.keyBindUseItem, this.keyBindPlayerList, this.keyBindCommand, this.keyBindChat, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindFullscreen, this.keyBindSpectatorOutlines, this.keyBindStreamStartStop}, this.keyBindings));
-        this.hideGUI = EnumDifficulty.NORMAL;
-        this.smoothCamera = "";
-        this.gammaSetting = 70.0F;
+        this.moreKeyBindings = (KeyBinding[]) ((KeyBinding[]) ArrayUtils.addAll(new KeyBinding[]{this.keyBindAttack, this.keyBindUseItem, this.keyBindForward2, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindPerspective, this.keyBindSmoothCamera, this.keyBindFullscreen, this.keyBindSpectatorOutlines}, this.keyBindings));
+        this.difficulty = EnumDifficulty.NORMAL;
+        this.lastServer1 = "";
+        this.fov = 70.0F;
         this.forceUnicodeFont = "en_US";
         this.logger = false;
     }
@@ -384,11 +370,11 @@ public class GameSettings {
         }
 
         if (settingsOption == GameSettings.Options.FOV) {
-            this.gammaSetting = value;
+            this.fov = value;
         }
 
         if (settingsOption == GameSettings.Options.GAMMA) {
-            this.saturation = value;
+            this.gamma = value;
         }
 
         if (settingsOption == GameSettings.Options.FRAMERATE_LIMIT) {
@@ -405,27 +391,27 @@ public class GameSettings {
 
         if (settingsOption == GameSettings.Options.CHAT_OPACITY) {
             this.chatOpacity = value;
-            this.difficulty.ingameGUI.getChatGUI().refreshChat();
+            this.mc.ingameGUI.getChatGUI().refreshChat();
         }
 
         if (settingsOption == GameSettings.Options.CHAT_HEIGHT_FOCUSED) {
             this.chatHeightFocused = value;
-            this.difficulty.ingameGUI.getChatGUI().refreshChat();
+            this.mc.ingameGUI.getChatGUI().refreshChat();
         }
 
         if (settingsOption == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED) {
             this.chatHeightUnfocused = value;
-            this.difficulty.ingameGUI.getChatGUI().refreshChat();
+            this.mc.ingameGUI.getChatGUI().refreshChat();
         }
 
         if (settingsOption == GameSettings.Options.CHAT_WIDTH) {
             this.chatWidth = value;
-            this.difficulty.ingameGUI.getChatGUI().refreshChat();
+            this.mc.ingameGUI.getChatGUI().refreshChat();
         }
 
         if (settingsOption == GameSettings.Options.CHAT_SCALE) {
             this.chatScale = value;
-            this.difficulty.ingameGUI.getChatGUI().refreshChat();
+            this.mc.ingameGUI.getChatGUI().refreshChat();
         }
 
         if (settingsOption == GameSettings.Options.MIPMAP_LEVELS) {
@@ -433,21 +419,21 @@ public class GameSettings {
             this.mipmapLevels = (int) value;
 
             if ((float) i != value) {
-                this.difficulty.getTextureMapBlocks().setMipmapLevels(this.mipmapLevels);
-                this.difficulty.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
-                this.difficulty.getTextureMapBlocks().setBlurMipmapDirect(false, this.mipmapLevels > 0);
-                this.difficulty.scheduleResourcesRefresh();
+                this.mc.getTextureMapBlocks().setMipmapLevels(this.mipmapLevels);
+                this.mc.getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
+                this.mc.getTextureMapBlocks().setBlurMipmapDirect(false, this.mipmapLevels > 0);
+                this.mc.scheduleResourcesRefresh();
             }
         }
 
         if (settingsOption == GameSettings.Options.BLOCK_ALTERNATIVES) {
             this.allowBlockAlternatives = !this.allowBlockAlternatives;
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (settingsOption == GameSettings.Options.RENDER_DISTANCE) {
             this.renderDistanceChunks = (int) value;
-            this.difficulty.renderGlobal.setDisplayListEntitiesDirty();
+            this.mc.renderGlobal.setDisplayListEntitiesDirty();
         }
     }
 
@@ -465,10 +451,10 @@ public class GameSettings {
         }
 
         if (settingsOption == GameSettings.Options.GUI_SCALE) {
-            this.particleSetting += value;
+            this.guiScale += value;
 
             if (GuiScreen.isShiftKeyDown()) {
-                this.particleSetting = 0;
+                this.guiScale = 0;
             }
 
             DisplayMode displaymode = Config.getLargestDisplayMode();
@@ -476,21 +462,21 @@ public class GameSettings {
             int j = displaymode.getHeight() / 240;
             int k = Math.min(i, j);
 
-            if (this.particleSetting < 0) {
-                this.particleSetting = k - 1;
+            if (this.guiScale < 0) {
+                this.guiScale = k - 1;
             }
 
-            if (this.difficulty.isUnicode() && this.particleSetting % 2 != 0) {
-                this.particleSetting += value;
+            if (this.mc.isUnicode() && this.guiScale % 2 != 0) {
+                this.guiScale += value;
             }
 
-            if (this.particleSetting < 0 || this.particleSetting >= k) {
-                this.particleSetting = 0;
+            if (this.guiScale < 0 || this.guiScale >= k) {
+                this.guiScale = 0;
             }
         }
 
         if (settingsOption == GameSettings.Options.PARTICLES) {
-            this.language = (this.language + value) % 3;
+            this.particles = (this.particles + value) % 3;
         }
 
         if (settingsOption == GameSettings.Options.VIEW_BOBBING) {
@@ -503,7 +489,7 @@ public class GameSettings {
 
         if (settingsOption == GameSettings.Options.FORCE_UNICODE_FONT) {
             this.logger = !this.logger;
-            this.difficulty.fontRendererObj.setUnicodeFlag(this.difficulty.getLanguageManager().isCurrentLocaleUnicode() || this.logger);
+            this.mc.fontRendererObj.setUnicodeFlag(this.mc.getLanguageManager().isCurrentLocaleUnicode() || this.logger);
         }
 
         if (settingsOption == GameSettings.Options.FBO_ENABLE) {
@@ -517,18 +503,18 @@ public class GameSettings {
             }
 
             this.anaglyph = !this.anaglyph;
-            this.difficulty.refreshResources();
+            this.mc.refreshResources();
         }
 
         if (settingsOption == GameSettings.Options.GRAPHICS) {
             this.fancyGraphics = !this.fancyGraphics;
             this.updateRenderClouds();
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (settingsOption == GameSettings.Options.AMBIENT_OCCLUSION) {
             this.ambientOcclusion = (this.ambientOcclusion + value) % 3;
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (settingsOption == GameSettings.Options.CHAT_VISIBILITY) {
@@ -558,8 +544,8 @@ public class GameSettings {
         if (settingsOption == GameSettings.Options.USE_FULLSCREEN) {
             this.fullScreen = !this.fullScreen;
 
-            if (this.difficulty.isFullScreen() != this.fullScreen) {
-                this.difficulty.toggleFullscreen();
+            if (this.mc.isFullScreen() != this.fullScreen) {
+                this.mc.toggleFullscreen();
             }
         }
 
@@ -570,12 +556,12 @@ public class GameSettings {
 
         if (settingsOption == GameSettings.Options.USE_VBO) {
             this.useVbo = !this.useVbo;
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (settingsOption == GameSettings.Options.BLOCK_ALTERNATIVES) {
             this.allowBlockAlternatives = !this.allowBlockAlternatives;
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (settingsOption == GameSettings.Options.REDUCED_DEBUG_INFO) {
@@ -591,7 +577,7 @@ public class GameSettings {
 
     public float getOptionFloatValue(GameSettings.Options settingOption) {
         float f = this.getOptionFloatValueOF(settingOption);
-        return f != Float.MAX_VALUE ? f : (settingOption == GameSettings.Options.FOV ? this.gammaSetting : (settingOption == GameSettings.Options.GAMMA ? this.saturation : (settingOption == GameSettings.Options.SATURATION ? this.guiScale : (settingOption == GameSettings.Options.SENSITIVITY ? this.mouseSensitivity : (settingOption == GameSettings.Options.CHAT_OPACITY ? this.chatOpacity : (settingOption == GameSettings.Options.CHAT_HEIGHT_FOCUSED ? this.chatHeightFocused : (settingOption == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED ? this.chatHeightUnfocused : (settingOption == GameSettings.Options.CHAT_SCALE ? this.chatScale : (settingOption == GameSettings.Options.CHAT_WIDTH ? this.chatWidth : (settingOption == GameSettings.Options.FRAMERATE_LIMIT ? (float) this.limitFramerate : (settingOption == GameSettings.Options.MIPMAP_LEVELS ? (float) this.mipmapLevels : (settingOption == GameSettings.Options.RENDER_DISTANCE ? (float) this.renderDistanceChunks : 0.0F))))))))))));
+        return f != Float.MAX_VALUE ? f : (settingOption == GameSettings.Options.FOV ? this.fov : (settingOption == GameSettings.Options.GAMMA ? this.gamma : (settingOption == GameSettings.Options.SATURATION ? this.saturation : (settingOption == GameSettings.Options.SENSITIVITY ? this.mouseSensitivity : (settingOption == GameSettings.Options.CHAT_OPACITY ? this.chatOpacity : (settingOption == GameSettings.Options.CHAT_HEIGHT_FOCUSED ? this.chatHeightFocused : (settingOption == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED ? this.chatHeightUnfocused : (settingOption == GameSettings.Options.CHAT_SCALE ? this.chatScale : (settingOption == GameSettings.Options.CHAT_WIDTH ? this.chatWidth : (settingOption == GameSettings.Options.FRAMERATE_LIMIT ? (float) this.limitFramerate : (settingOption == GameSettings.Options.MIPMAP_LEVELS ? (float) this.mipmapLevels : (settingOption == GameSettings.Options.RENDER_DISTANCE ? (float) this.renderDistanceChunks : 0.0F))))))))))));
     }
 
     public boolean getOptionOrdinalValue(GameSettings.Options settingOption) {
@@ -685,11 +671,11 @@ public class GameSettings {
                 boolean flag = this.getOptionOrdinalValue(settingOption);
                 return flag ? s1 + I18n.format("options.on", new Object[0]) : s1 + I18n.format("options.off", new Object[0]);
             } else if (settingOption == GameSettings.Options.GUI_SCALE) {
-                return this.particleSetting >= PARTICLES.length ? s1 + this.particleSetting + "x" : s1 + getTranslation(PARTICLES, this.particleSetting);
+                return this.guiScale >= PARTICLES.length ? s1 + this.guiScale + "x" : s1 + getTranslation(PARTICLES, this.guiScale);
             } else if (settingOption == GameSettings.Options.CHAT_VISIBILITY) {
                 return s1 + I18n.format(this.chatVisibility.getResourceKey(), new Object[0]);
             } else if (settingOption == GameSettings.Options.PARTICLES) {
-                return s1 + getTranslation(AMBIENT_OCCLUSIONS, this.language);
+                return s1 + getTranslation(AMBIENT_OCCLUSIONS, this.particles);
             } else if (settingOption == GameSettings.Options.AMBIENT_OCCLUSION) {
                 return s1 + getTranslation(STREAM_COMPRESSIONS, this.ambientOcclusion);
             } else if (settingOption == GameSettings.Options.RENDER_CLOUDS) {
@@ -729,15 +715,15 @@ public class GameSettings {
                             }
 
                             if (astring[0].equals("fov")) {
-                                this.gammaSetting = this.parseFloat(astring[1]) * 40.0F + 70.0F;
+                                this.fov = this.parseFloat(astring[1]) * 40.0F + 70.0F;
                             }
 
                             if (astring[0].equals("gamma")) {
-                                this.saturation = this.parseFloat(astring[1]);
+                                this.gamma = this.parseFloat(astring[1]);
                             }
 
                             if (astring[0].equals("saturation")) {
-                                this.guiScale = this.parseFloat(astring[1]);
+                                this.saturation = this.parseFloat(astring[1]);
                             }
 
                             if (astring[0].equals("invertYMouse")) {
@@ -749,11 +735,11 @@ public class GameSettings {
                             }
 
                             if (astring[0].equals("guiScale")) {
-                                this.particleSetting = Integer.parseInt(astring[1]);
+                                this.guiScale = Integer.parseInt(astring[1]);
                             }
 
                             if (astring[0].equals("particles")) {
-                                this.language = Integer.parseInt(astring[1]);
+                                this.particles = Integer.parseInt(astring[1]);
                             }
 
                             if (astring[0].equals("bobView")) {
@@ -781,7 +767,7 @@ public class GameSettings {
                             }
 
                             if (astring[0].equals("difficulty")) {
-                                this.hideGUI = EnumDifficulty.getDifficultyEnum(Integer.parseInt(astring[1]));
+                                this.difficulty = EnumDifficulty.getDifficultyEnum(Integer.parseInt(astring[1]));
                             }
 
                             if (astring[0].equals("fancyGraphics")) {
@@ -826,7 +812,7 @@ public class GameSettings {
                             }
 
                             if (astring[0].equals("lastServer") && astring.length >= 2) {
-                                this.smoothCamera = s.substring(s.indexOf(58) + 1);
+                                this.lastServer1 = s.substring(s.indexOf(58) + 1);
                             }
 
                             if (astring[0].equals("lang") && astring.length >= 2) {
@@ -927,30 +913,6 @@ public class GameSettings {
                                 this.mipmapLevels = Integer.parseInt(astring[1]);
                             }
 
-                            if (astring[0].equals("streamCompression")) {
-                                this.streamCompression = Integer.parseInt(astring[1]);
-                            }
-
-                            if (astring[0].equals("streamSendMetadata")) {
-                                this.streamSendMetadata = astring[1].equals("true");
-                            }
-
-                            if (astring[0].equals("streamPreferredServer") && astring.length >= 2) {
-                                this.streamPreferredServer = s.substring(s.indexOf(58) + 1);
-                            }
-
-                            if (astring[0].equals("streamChatEnabled")) {
-                                this.streamChatEnabled = Integer.parseInt(astring[1]);
-                            }
-
-                            if (astring[0].equals("streamChatUserFilter")) {
-                                this.streamChatUserFilter = Integer.parseInt(astring[1]);
-                            }
-
-                            if (astring[0].equals("streamMicToggleBehavior")) {
-                                this.streamMicToggleBehavior = Integer.parseInt(astring[1]);
-                            }
-
                             if (astring[0].equals("forceUnicodeFont")) {
                                 this.logger = astring[1].equals("true");
                             }
@@ -971,11 +933,7 @@ public class GameSettings {
                                 this.entityShadows = astring[1].equals("true");
                             }
 
-                            if (astring[0].equals("realmsNotifications")) {
-                                this.keyBindForward = astring[1].equals("true");
-                            }
-
-                            for (KeyBinding keybinding : this.mc) {
+                            for (KeyBinding keybinding : this.moreKeyBindings) {
                                 if (astring[0].equals("key_" + keybinding.getKeyDescription())) {
                                     keybinding.setKeyCode(Integer.parseInt(astring[1]));
                                 }
@@ -1039,17 +997,17 @@ public class GameSettings {
             PrintWriter printwriter = new PrintWriter(new FileWriter(this.bc));
             printwriter.println("invertYMouse:" + this.invertMouse);
             printwriter.println("mouseSensitivity:" + this.mouseSensitivity);
-            printwriter.println("fov:" + (this.gammaSetting - 70.0F) / 40.0F);
-            printwriter.println("gamma:" + this.saturation);
-            printwriter.println("saturation:" + this.guiScale);
+            printwriter.println("fov:" + (this.fov - 70.0F) / 40.0F);
+            printwriter.println("gamma:" + this.gamma);
+            printwriter.println("saturation:" + this.saturation);
             printwriter.println("renderDistance:" + this.renderDistanceChunks);
-            printwriter.println("guiScale:" + this.particleSetting);
-            printwriter.println("particles:" + this.language);
+            printwriter.println("guiScale:" + this.guiScale);
+            printwriter.println("particles:" + this.particles);
             printwriter.println("bobView:" + this.viewBobbing);
             printwriter.println("anaglyph3d:" + this.anaglyph);
             printwriter.println("maxFps:" + this.limitFramerate);
             printwriter.println("fboEnable:" + this.fboEnable);
-            printwriter.println("difficulty:" + this.hideGUI.getDifficultyId());
+            printwriter.println("difficulty:" + this.difficulty.getDifficultyId());
             printwriter.println("fancyGraphics:" + this.fancyGraphics);
             printwriter.println("ao:" + this.ambientOcclusion);
 
@@ -1068,7 +1026,7 @@ public class GameSettings {
 
             printwriter.println("resourcePacks:" + typeListString.toJson((Object) this.resourcePacks));
             printwriter.println("incompatibleResourcePacks:" + typeListString.toJson((Object) this.incompatibleResourcePacks));
-            printwriter.println("lastServer:" + this.smoothCamera);
+            printwriter.println("lastServer:" + this.lastServer1);
             printwriter.println("lang:" + this.forceUnicodeFont);
             printwriter.println("chatVisibility:" + this.chatVisibility.getChatVisibility());
             printwriter.println("chatColors:" + this.chatColours);
@@ -1092,19 +1050,13 @@ public class GameSettings {
             printwriter.println("chatWidth:" + this.chatWidth);
             printwriter.println("showInventoryAchievementHint:" + this.showInventoryAchievementHint);
             printwriter.println("mipmapLevels:" + this.mipmapLevels);
-            printwriter.println("streamCompression:" + this.streamCompression);
-            printwriter.println("streamSendMetadata:" + this.streamSendMetadata);
-            printwriter.println("streamPreferredServer:" + this.streamPreferredServer);
-            printwriter.println("streamChatEnabled:" + this.streamChatEnabled);
-            printwriter.println("streamChatUserFilter:" + this.streamChatUserFilter);
-            printwriter.println("streamMicToggleBehavior:" + this.streamMicToggleBehavior);
             printwriter.println("forceUnicodeFont:" + this.logger);
             printwriter.println("allowBlockAlternatives:" + this.allowBlockAlternatives);
             printwriter.println("reducedDebugInfo:" + this.reducedDebugInfo);
             printwriter.println("useNativeTransport:" + this.useNativeTransport);
             printwriter.println("entityShadows:" + this.entityShadows);
 
-            for (KeyBinding keybinding : this.mc) {
+            for (KeyBinding keybinding : this.moreKeyBindings) {
                 printwriter.println("key_" + keybinding.getKeyDescription() + ":" + keybinding.getKeyCode());
             }
 
@@ -1130,7 +1082,7 @@ public class GameSettings {
     }
 
     public void setSoundLevel(SoundCategory sndCategory, float soundLevel) {
-        this.difficulty.getSoundHandler().setSoundLevel(sndCategory, soundLevel);
+        this.mc.getSoundHandler().setSoundLevel(sndCategory, soundLevel);
         this.optionsFile.put(sndCategory, Float.valueOf(soundLevel));
     }
 
@@ -1138,14 +1090,14 @@ public class GameSettings {
      * Send a client info packet with settings information to the server
      */
     public void sendSettingsToServer() {
-        if (this.difficulty.thePlayer != null) {
+        if (this.mc.thePlayer != null) {
             int i = 0;
 
             for (EnumPlayerModelParts enumplayermodelparts : this.mapSoundLevels) {
                 i |= enumplayermodelparts.getPartMask();
             }
 
-            this.difficulty.thePlayer.sendQueue.addToSendQueue(new C15PacketClientSettings(this.forceUnicodeFont, this.renderDistanceChunks, this.chatVisibility, this.chatColours, i));
+            this.mc.thePlayer.sendQueue.addToSendQueue(new C15PacketClientSettings(this.forceUnicodeFont, this.renderDistanceChunks, this.chatVisibility, this.chatColours, i));
         }
     }
 
@@ -1190,12 +1142,12 @@ public class GameSettings {
     private void setOptionFloatValueOF(GameSettings.Options p_setOptionFloatValueOF_1_, float p_setOptionFloatValueOF_2_) {
         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.CLOUD_HEIGHT) {
             this.ofCloudsHeight = p_setOptionFloatValueOF_2_;
-            this.difficulty.renderGlobal.resetClouds();
+            this.mc.renderGlobal.resetClouds();
         }
 
         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AO_LEVEL) {
             this.ofAoLevel = p_setOptionFloatValueOF_2_;
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AA_LEVEL) {
@@ -1231,13 +1183,13 @@ public class GameSettings {
             }
 
             this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
-            this.difficulty.refreshResources();
+            this.mc.refreshResources();
         }
 
         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.MIPMAP_TYPE) {
             int l = (int) p_setOptionFloatValueOF_2_;
             this.ofMipmapType = Config.limit(l, 0, 3);
-            this.difficulty.refreshResources();
+            this.mc.refreshResources();
         }
 
         if (p_setOptionFloatValueOF_1_ == GameSettings.Options.FULLSCREEN_MODE) {
@@ -1329,12 +1281,12 @@ public class GameSettings {
             }
 
             this.updateRenderClouds();
-            this.difficulty.renderGlobal.resetClouds();
+            this.mc.renderGlobal.resetClouds();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.TREES) {
             this.ofTrees = nextValue(this.ofTrees, OF_TREES_VALUES);
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.DROPPED_ITEMS) {
@@ -1462,7 +1414,7 @@ public class GameSettings {
                 this.ofBetterGrass = 1;
             }
 
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.CONNECTED_TEXTURES) {
@@ -1473,9 +1425,9 @@ public class GameSettings {
             }
 
             if (this.ofConnectedTextures == 2) {
-                this.difficulty.renderGlobal.loadRenderers();
+                this.mc.renderGlobal.loadRenderers();
             } else {
-                this.difficulty.refreshResources();
+                this.mc.refreshResources();
             }
         }
 
@@ -1534,13 +1486,13 @@ public class GameSettings {
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.BETTER_SNOW) {
             this.ofBetterSnow = !this.ofBetterSnow;
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.SWAMP_COLORS) {
             this.ofSwampColors = !this.ofSwampColors;
             CustomColors.updateUseDefaultGrassFoliageColors();
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.RANDOM_ENTITIES) {
@@ -1551,24 +1503,24 @@ public class GameSettings {
         if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_BIOMES) {
             this.ofSmoothBiomes = !this.ofSmoothBiomes;
             CustomColors.updateUseDefaultGrassFoliageColors();
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_FONTS) {
             this.ofCustomFonts = !this.ofCustomFonts;
-            this.difficulty.fontRendererObj.onResourceManagerReload(Config.getResourceManager());
-            this.difficulty.standardGalacticFontRenderer.onResourceManagerReload(Config.getResourceManager());
+            this.mc.fontRendererObj.onResourceManagerReload(Config.getResourceManager());
+            this.mc.standardGalacticFontRenderer.onResourceManagerReload(Config.getResourceManager());
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_COLORS) {
             this.ofCustomColors = !this.ofCustomColors;
             CustomColors.update();
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_ITEMS) {
             this.ofCustomItems = !this.ofCustomItems;
-            this.difficulty.refreshResources();
+            this.mc.refreshResources();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_SKY) {
@@ -1583,12 +1535,12 @@ public class GameSettings {
         if (p_setOptionValueOF_1_ == GameSettings.Options.NATURAL_TEXTURES) {
             this.ofNaturalTextures = !this.ofNaturalTextures;
             NaturalTextures.update();
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.EMISSIVE_TEXTURES) {
             this.ofEmissiveTextures = !this.ofEmissiveTextures;
-            this.difficulty.refreshResources();
+            this.mc.refreshResources();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_MATH) {
@@ -1605,7 +1557,7 @@ public class GameSettings {
             this.ofFastRender = !this.ofFastRender;
 
             if (this.ofFastRender) {
-                this.difficulty.entityRenderer.stopUseShader();
+                this.mc.entityRenderer.stopUseShader();
             }
 
             Config.updateFramebufferSize();
@@ -1622,7 +1574,7 @@ public class GameSettings {
                 this.ofTranslucentBlocks = 0;
             }
 
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.LAZY_CHUNK_LOADING) {
@@ -1631,12 +1583,12 @@ public class GameSettings {
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.RENDER_REGIONS) {
             this.ofRenderRegions = !this.ofRenderRegions;
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.SMART_ANIMATIONS) {
             this.ofSmartAnimations = !this.ofSmartAnimations;
-            this.difficulty.renderGlobal.loadRenderers();
+            this.mc.renderGlobal.loadRenderers();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.DYNAMIC_FOV) {
@@ -1645,12 +1597,12 @@ public class GameSettings {
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.ALTERNATE_BLOCKS) {
             this.ofAlternateBlocks = !this.ofAlternateBlocks;
-            this.difficulty.refreshResources();
+            this.mc.refreshResources();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.DYNAMIC_LIGHTS) {
             this.ofDynamicLights = nextValue(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
-            DynamicLights.removeLights(this.difficulty.renderGlobal);
+            DynamicLights.removeLights(this.mc.renderGlobal);
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.SCREENSHOT_SIZE) {
@@ -1667,7 +1619,7 @@ public class GameSettings {
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_ENTITY_MODELS) {
             this.ofCustomEntityModels = !this.ofCustomEntityModels;
-            this.difficulty.refreshResources();
+            this.mc.refreshResources();
         }
 
         if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_GUIS) {
@@ -2361,7 +2313,7 @@ public class GameSettings {
                 }
             }
 
-            KeyUtils.fixKeyConflicts(this.mc, new KeyBinding[]{this.ofKeyBindZoom});
+            KeyUtils.fixKeyConflicts(this.moreKeyBindings, new KeyBinding[]{this.ofKeyBindZoom});
             KeyBinding.resetKeyBindingArrayAndHash();
             bufferedreader.close();
         } catch (Exception exception1) {
@@ -2486,10 +2438,10 @@ public class GameSettings {
         this.fancyGraphics = true;
         this.ambientOcclusion = 2;
         this.clouds = 2;
-        this.gammaSetting = 70.0F;
-        this.saturation = 0.0F;
-        this.particleSetting = 0;
-        this.language = 0;
+        this.fov = 70.0F;
+        this.gamma = 0.0F;
+        this.guiScale = 0;
+        this.particles = 0;
         this.heldItemTooltips = true;
         this.useVbo = false;
         this.logger = false;
@@ -2569,7 +2521,7 @@ public class GameSettings {
         Shaders.uninit();
         Shaders.storeConfig();
         this.updateWaterOpacity();
-        this.difficulty.refreshResources();
+        this.mc.refreshResources();
         this.saveOptions();
     }
 
@@ -2582,7 +2534,7 @@ public class GameSettings {
             Config.waterOpacityChanged = true;
         }
 
-        ClearWater.updateWaterOpacity(this, this.difficulty.theWorld);
+        ClearWater.updateWaterOpacity(this, this.mc.theWorld);
     }
 
     public void setAllAnimations(boolean p_setAllAnimations_1_) {
@@ -2601,7 +2553,7 @@ public class GameSettings {
         this.ofPortalParticles = p_setAllAnimations_1_;
         this.ofPotionParticles = p_setAllAnimations_1_;
         this.ofFireworkParticles = p_setAllAnimations_1_;
-        this.language = p_setAllAnimations_1_ ? 0 : 2;
+        this.particles = p_setAllAnimations_1_ ? 0 : 2;
         this.ofDrippingWaterLava = p_setAllAnimations_1_;
         this.ofAnimatedTerrain = p_setAllAnimations_1_;
         this.ofAnimatedTextures = p_setAllAnimations_1_;
diff --git a/src/main/java/net/minecraft/client/shader/Framebuffer.java b/src/main/java/net/minecraft/client/shader/Framebuffer.java
index f73d58e..a32cdac 100644
--- a/src/main/java/net/minecraft/client/shader/Framebuffer.java
+++ b/src/main/java/net/minecraft/client/shader/Framebuffer.java
@@ -220,6 +220,7 @@ public class Framebuffer
 
     public void framebufferRenderExt(int p_178038_1_, int p_178038_2_, boolean p_178038_3_)
     {
+
         if (OpenGlHelper.isFramebufferEnabled())
         {
             GlStateManager.colorMask(true, true, true, false);
diff --git a/src/main/java/net/minecraft/server/integrated/IntegratedServer.java b/src/main/java/net/minecraft/server/integrated/IntegratedServer.java
index e716d7a..070b43e 100644
--- a/src/main/java/net/minecraft/server/integrated/IntegratedServer.java
+++ b/src/main/java/net/minecraft/server/integrated/IntegratedServer.java
@@ -134,7 +134,7 @@ public class IntegratedServer extends MinecraftServer {
             this.getConfigurationManager().setPlayerManager(new WorldServer[]{worldserver});
 
             if (worldserver.getWorldInfo().getDifficulty() == null) {
-                this.setDifficultyForAllWorlds(this.mc.gameSettings.hideGUI);
+                this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
             }
         } else {
             for (int l = 0; l < this.worldServers.length; ++l) {
@@ -164,7 +164,7 @@ public class IntegratedServer extends MinecraftServer {
             this.getConfigurationManager().setPlayerManager(this.worldServers);
 
             if (this.worldServers[0].getWorldInfo().getDifficulty() == null) {
-                this.setDifficultyForAllWorlds(this.mc.gameSettings.hideGUI);
+                this.setDifficultyForAllWorlds(this.mc.gameSettings.difficulty);
             }
         }
 
@@ -268,7 +268,7 @@ public class IntegratedServer extends MinecraftServer {
      * Get the server's difficulty
      */
     public EnumDifficulty getDifficulty() {
-        return this.mc.theWorld == null ? this.mc.gameSettings.hideGUI : this.mc.theWorld.getWorldInfo().getDifficulty();
+        return this.mc.theWorld == null ? this.mc.gameSettings.difficulty : this.mc.theWorld.getWorldInfo().getDifficulty();
     }
 
     /**
diff --git a/src/main/java/net/minecraft/util/MovementInputFromOptions.java b/src/main/java/net/minecraft/util/MovementInputFromOptions.java
index 8b8a4ea..76bfcc9 100644
--- a/src/main/java/net/minecraft/util/MovementInputFromOptions.java
+++ b/src/main/java/net/minecraft/util/MovementInputFromOptions.java
@@ -16,28 +16,28 @@ public class MovementInputFromOptions extends MovementInput
         this.moveStrafe = 0.0F;
         this.moveForward = 0.0F;
 
-        if (this.gameSettings.keyBindLeft.isKeyDown())
+        if (this.gameSettings.keyBindForward2.isKeyDown())
         {
             ++this.moveForward;
         }
 
-        if (this.gameSettings.keyBindRight.isKeyDown())
+        if (this.gameSettings.keyBindBack.isKeyDown())
         {
             --this.moveForward;
         }
 
-        if (this.gameSettings.keyBindBack.isKeyDown())
+        if (this.gameSettings.keyBindLeft.isKeyDown())
         {
             ++this.moveStrafe;
         }
 
-        if (this.gameSettings.keyBindJump.isKeyDown())
+        if (this.gameSettings.keyBindRight.isKeyDown())
         {
             --this.moveStrafe;
         }
 
-        this.jump = this.gameSettings.keyBindSneak.isKeyDown();
-        this.sneak = this.gameSettings.keyBindSprint.isKeyDown();
+        this.jump = this.gameSettings.keyBindJump.isKeyDown();
+        this.sneak = this.gameSettings.keyBindSneak.isKeyDown();
 
         if (this.sneak)
         {
diff --git a/src/main/java/net/minecraft/util/ScreenShotHelper.java b/src/main/java/net/minecraft/util/ScreenShotHelper.java
index 9415456..8853b5f 100644
--- a/src/main/java/net/minecraft/util/ScreenShotHelper.java
+++ b/src/main/java/net/minecraft/util/ScreenShotHelper.java
@@ -54,7 +54,7 @@ public class ScreenShotHelper
             File file1 = new File(gameDirectory, "screenshots");
             file1.mkdir();
             Minecraft minecraft = Minecraft.getMinecraft();
-            int i = Config.getGameSettings().particleSetting;
+            int i = Config.getGameSettings().guiScale;
             ScaledResolution scaledresolution = new ScaledResolution(minecraft);
             int j = scaledresolution.getScaleFactor();
             int k = Config.getScreenshotSize();
@@ -62,7 +62,7 @@ public class ScreenShotHelper
 
             if (flag)
             {
-                Config.getGameSettings().particleSetting = j * k;
+                Config.getGameSettings().guiScale = j * k;
                 resize(width * k, height * k);
                 GlStateManager.pushMatrix();
                 GlStateManager.clear(16640);
@@ -125,7 +125,7 @@ public class ScreenShotHelper
             {
                 minecraft.getFramebuffer().unbindFramebuffer();
                 GlStateManager.popMatrix();
-                Config.getGameSettings().particleSetting = i;
+                Config.getGameSettings().guiScale = i;
                 resize(width, height);
             }
 
diff --git a/src/main/java/net/optifine/LightMap.java b/src/main/java/net/optifine/LightMap.java
index 621b020..3a7f833 100644
--- a/src/main/java/net/optifine/LightMap.java
+++ b/src/main/java/net/optifine/LightMap.java
@@ -62,7 +62,7 @@ public class LightMap
                     f = Config.limitTo1(f);
                     float f1 = f * (float)(j - 1);
                     float f2 = Config.limitTo1(torchFlickerX + 0.5F) * (float)(j - 1);
-                    float f3 = Config.limitTo1(Config.getGameSettings().saturation);
+                    float f3 = Config.limitTo1(Config.getGameSettings().gamma);
                     boolean flag = f3 > 1.0E-4F;
                     float[][] afloat = this.lightMapRgb.getColorsRgb();
                     this.getLightMapColumn(afloat, f1, k, j, this.sunRgbs);
diff --git a/src/main/java/net/optifine/shaders/Shaders.java b/src/main/java/net/optifine/shaders/Shaders.java
index cd0c77a..c34cdc3 100644
--- a/src/main/java/net/optifine/shaders/Shaders.java
+++ b/src/main/java/net/optifine/shaders/Shaders.java
@@ -3478,7 +3478,7 @@ public class Shaders
                 setProgramUniform1i(uniform_isEyeInWater, isEyeInWater);
                 setProgramUniform1f(uniform_nightVision, nightVision);
                 setProgramUniform1f(uniform_blindness, blindness);
-                setProgramUniform1f(uniform_screenBrightness, mc.gameSettings.saturation);
+                setProgramUniform1f(uniform_screenBrightness, mc.gameSettings.gamma);
                 setProgramUniform1i(uniform_hideGUI, mc.gameSettings.thirdPersonView ? 1 : 0);
                 setProgramUniform1f(uniform_centerDepthSmooth, centerDepthSmooth);
                 setProgramUniform2i(uniform_atlasSize, atlasSizeX, atlasSizeY);
diff --git a/src/main/resources/assets/jclient/shaders/hsv_box.frag b/src/main/resources/assets/jclient/shaders/hsv_box.frag
new file mode 100644
index 0000000..50c6d7a
--- /dev/null
+++ b/src/main/resources/assets/jclient/shaders/hsv_box.frag
@@ -0,0 +1,48 @@
+#version 330
+
+uniform float hue;
+uniform vec2 quadOffset;   // Screen position of quad (bottom-left corner)
+uniform vec2 quadSize;  // Size of quad in pixels
+out vec4 fragColor;
+
+vec3 hsvToRgb(in vec3 hsv)
+{
+    float h = hsv.x;
+    float s = hsv.y;
+    float v = hsv.z;
+
+    if (s == 0.0) {
+        return vec3(v, v, v);
+    }
+
+    h *= 6.0;
+    float sector = floor(h);
+    int sector_int = int(sector);
+    float f = h - sector;
+    float p = v * (1.0 - s);
+    float q = v * (1.0 - s * f);
+    float t = v * (1.0 - s * (1.0 - f));
+
+    if (sector_int % 6 == 0) return vec3(v, t, p);
+    else if (sector_int % 6 == 1) return vec3(q, v, p);
+    else if (sector_int % 6 == 2) return vec3(p, v, t);
+    else if (sector_int % 6 == 3) return vec3(p, q, v);
+    else if (sector_int % 6 == 4) return vec3(t, p, v);
+    else return vec3(v, p, q);
+}
+
+void main()
+{
+    vec2 local = (gl_FragCoord.xy - quadOffset) / quadSize;
+    // Optionally, discard fragments outside the quad:
+    if (local.x < 0.0 || local.x > 1.0 || local.y < 0.0 || local.y > 1.0) {
+        discard;
+    }
+
+    float h = hue;
+    float s = local.x;
+    float v = local.y;
+
+    vec3 rgb = hsvToRgb(vec3(h, s, v));
+    fragColor = vec4(rgb, 1.0);
+}
diff --git a/src/main/resources/assets/jclient/shaders/hsv_box.vert b/src/main/resources/assets/jclient/shaders/hsv_box.vert
new file mode 100644
index 0000000..761a672
--- /dev/null
+++ b/src/main/resources/assets/jclient/shaders/hsv_box.vert
@@ -0,0 +1,12 @@
+#version 130
+
+attribute vec2 position; // Screen coordinates (pixels) of the quad's vertices
+uniform vec2 screenSize; // Size of the window/screen (pixels)
+uniform vec2 quadOffset; // Position of the quad's bottom-left corner (pixels)
+
+void main() {
+    // Map screen coordinates to clip space [-1,1]
+    vec2 clipPos = (position + quadOffset) / screenSize; // [0,1]
+    clipPos = clipPos * 2.0 - 1.0;                       // [-1,1]
+    gl_Position = vec4(clipPos, 0.0, 1.0);
+}
diff --git a/src/main/resources/assets/jclient/shaders/hsv_slider.frag b/src/main/resources/assets/jclient/shaders/hsv_slider.frag
new file mode 100644
index 0000000..b192d7e
--- /dev/null
+++ b/src/main/resources/assets/jclient/shaders/hsv_slider.frag
@@ -0,0 +1,47 @@
+#version 330
+
+uniform vec2 quadOffset;   // Screen position of quad (bottom-left corner)
+uniform vec2 quadSize;  // Size of quad in pixels
+out vec4 fragColor;
+
+vec3 hsvToRgb(in vec3 hsv)
+{
+    float h = hsv.x;
+    float s = hsv.y;
+    float v = hsv.z;
+
+    if (s == 0.0) {
+        return vec3(v, v, v);
+    }
+
+    h *= 6.0;
+    float sector = floor(h);
+    int sector_int = int(sector);
+    float f = h - sector;
+    float p = v * (1.0 - s);
+    float q = v * (1.0 - s * f);
+    float t = v * (1.0 - s * (1.0 - f));
+
+    if (sector_int % 6 == 0) return vec3(v, t, p);
+    else if (sector_int % 6 == 1) return vec3(q, v, p);
+    else if (sector_int % 6 == 2) return vec3(p, v, t);
+    else if (sector_int % 6 == 3) return vec3(p, q, v);
+    else if (sector_int % 6 == 4) return vec3(t, p, v);
+    else return vec3(v, p, q);
+}
+
+void main()
+{
+    vec2 local = (gl_FragCoord.xy - quadOffset) / quadSize;
+    // Optionally, discard fragments outside the quad:
+    if (local.x < 0.0 || local.x > 1.0 || local.y < 0.0 || local.y > 1.0) {
+        discard;
+    }
+
+    float h = local.y;
+    float s = 0.9;
+    float v = 0.9;
+
+    vec3 rgb = hsvToRgb(vec3(h, s, v));
+    fragColor = vec4(rgb, 1.0);
+}
diff --git a/src/main/resources/assets/minecraft/lang/en_US.lang b/src/main/resources/assets/minecraft/lang/en_US.lang
index c38ac44..9a6f83d 100644
--- a/src/main/resources/assets/minecraft/lang/en_US.lang
+++ b/src/main/resources/assets/minecraft/lang/en_US.lang
@@ -470,6 +470,7 @@ key.togglePerspective=Toggle Perspective
 key.smoothCamera=Toggle Cinematic Camera
 key.fullscreen=Toggle Fullscreen
 key.spectatorOutlines=Highlight Players (Spectators)
+key.jclient=Open jClient Settings
 key.hotbar.1=Hotbar Slot 1
 key.hotbar.2=Hotbar Slot 2
 key.hotbar.3=Hotbar Slot 3
-- 
2.34.1

