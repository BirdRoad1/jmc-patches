From fc242f0e8a568ed976a1a47e510be6d90f057f4a Mon Sep 17 00:00:00 2001
From: Jose Martinez <jmart652@montgomerycollege.edu>
Date: Mon, 30 Jun 2025 14:17:54 -0400
Subject: [PATCH 60/60] Add x-ray module. TODO: make it configurable

---
 .../java/com/jlmsz/module/ModuleRegistry.java |  1 +
 src/main/java/net/minecraft/block/Block.java  | 12 +--
 .../client/renderer/BlockModelRenderer.java   | 87 +++++++++----------
 .../client/renderer/ViewFrustum.java          |  7 +-
 4 files changed, 56 insertions(+), 51 deletions(-)

diff --git a/src/main/java/com/jlmsz/module/ModuleRegistry.java b/src/main/java/com/jlmsz/module/ModuleRegistry.java
index 663a141..d9bd601 100644
--- a/src/main/java/com/jlmsz/module/ModuleRegistry.java
+++ b/src/main/java/com/jlmsz/module/ModuleRegistry.java
@@ -27,6 +27,7 @@ public class ModuleRegistry {
         registerModule(new KeystrokesModule());
         registerModule(new ESPModule());
         registerModule(new FreeLookModule());
+        registerModule(new XRayModule());
     }
 
     private static void registerModule(Module module) {
diff --git a/src/main/java/net/minecraft/block/Block.java b/src/main/java/net/minecraft/block/Block.java
index b7ddd0f..6689681 100644
--- a/src/main/java/net/minecraft/block/Block.java
+++ b/src/main/java/net/minecraft/block/Block.java
@@ -1,10 +1,9 @@
 package net.minecraft.block;
 
-import java.util.List;
-import java.util.Random;
+import com.jlmsz.module.ModuleRegistry;
+import com.jlmsz.module.impl.XRayModule;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
-import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.state.BlockState;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.creativetab.CreativeTabs;
@@ -504,8 +503,11 @@ public class Block
     /**
      * Used to determine ambient occlusion and culling when rebuilding chunks for render
      */
-    public boolean isOpaqueCube()
-    {
+    public boolean isOpaqueCube() {
+        XRayModule module = ModuleRegistry.getModuleByClass(XRayModule.class);
+        if (module != null && module.isEnabled() && !module.shouldRender(this.getBlockState().getBaseState())) {
+            return false;
+        }
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/client/renderer/BlockModelRenderer.java b/src/main/java/net/minecraft/client/renderer/BlockModelRenderer.java
index 0600586..512ac54 100644
--- a/src/main/java/net/minecraft/client/renderer/BlockModelRenderer.java
+++ b/src/main/java/net/minecraft/client/renderer/BlockModelRenderer.java
@@ -1,7 +1,7 @@
 package net.minecraft.client.renderer;
 
-import java.util.BitSet;
-import java.util.List;
+import com.jlmsz.module.ModuleRegistry;
+import com.jlmsz.module.impl.XRayModule;
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
@@ -42,8 +42,18 @@ public class BlockModelRenderer
         }
     }
 
-    public boolean renderModel(IBlockAccess blockAccessIn, IBakedModel modelIn, IBlockState blockStateIn, BlockPos blockPosIn, WorldRenderer worldRendererIn)
-    {
+    public boolean renderModel(IBlockAccess blockAccessIn, IBakedModel modelIn, IBlockState blockStateIn, BlockPos blockPosIn, WorldRenderer worldRendererIn) {
+        XRayModule module = ModuleRegistry.getModuleByClass(XRayModule.class);
+        if (module != null && module.isEnabled()) {
+            if (!module.shouldRender(blockStateIn)) {
+                return false;
+            } else {
+                Block block = blockStateIn.getBlock();
+                block.setBlockBoundsBasedOnState(blockAccessIn, blockPosIn);
+                return this.renderModel(blockAccessIn, modelIn, blockStateIn, blockPosIn, worldRendererIn, false);
+            }
+        }
+
         Block block = blockStateIn.getBlock();
         block.setBlockBoundsBasedOnState(blockAccessIn, blockPosIn);
         return this.renderModel(blockAccessIn, modelIn, blockStateIn, blockPosIn, worldRendererIn, true);
@@ -171,8 +181,7 @@ public class BlockModelRenderer
         return flag;
     }
 
-    private void renderQuadsSmooth(IBlockAccess p_renderQuadsSmooth_1_, IBlockState p_renderQuadsSmooth_2_, BlockPos p_renderQuadsSmooth_3_, WorldRenderer p_renderQuadsSmooth_4_, List<BakedQuad> p_renderQuadsSmooth_5_, RenderEnv p_renderQuadsSmooth_6_)
-    {
+    private void renderQuadsSmooth(IBlockAccess p_renderQuadsSmooth_1_, IBlockState p_renderQuadsSmooth_2_, BlockPos p_renderQuadsSmooth_3_, WorldRenderer worldRenderer, List<BakedQuad> p_renderQuadsSmooth_5_, RenderEnv p_renderQuadsSmooth_6_) {
         Block block = p_renderQuadsSmooth_2_.getBlock();
         float[] afloat = p_renderQuadsSmooth_6_.getQuadBounds();
         BitSet bitset = p_renderQuadsSmooth_6_.getBoundsFlags();
@@ -204,34 +213,27 @@ public class BlockModelRenderer
                 blockmodelrenderer$ambientocclusionface.setMaxBlockLight();
             }
 
-            if (p_renderQuadsSmooth_4_.isMultiTexture())
-            {
-                p_renderQuadsSmooth_4_.addVertexData(bakedquad.getVertexDataSingle());
-            }
-            else
-            {
-                p_renderQuadsSmooth_4_.addVertexData(bakedquad.getVertexData());
+            if (worldRenderer.isMultiTexture()) {
+                worldRenderer.addVertexData(bakedquad.getVertexDataSingle());
+            } else {
+                worldRenderer.addVertexData(bakedquad.getVertexData());
             }
 
-            p_renderQuadsSmooth_4_.putSprite(bakedquad.getSprite());
-            p_renderQuadsSmooth_4_.putBrightness4(blockmodelrenderer$ambientocclusionface.vertexBrightness[0], blockmodelrenderer$ambientocclusionface.vertexBrightness[1], blockmodelrenderer$ambientocclusionface.vertexBrightness[2], blockmodelrenderer$ambientocclusionface.vertexBrightness[3]);
+            worldRenderer.putSprite(bakedquad.getSprite());
+            worldRenderer.putBrightness4(blockmodelrenderer$ambientocclusionface.vertexBrightness[0], blockmodelrenderer$ambientocclusionface.vertexBrightness[1], blockmodelrenderer$ambientocclusionface.vertexBrightness[2], blockmodelrenderer$ambientocclusionface.vertexBrightness[3]);
             int j = CustomColors.getColorMultiplier(bakedquad, p_renderQuadsSmooth_2_, p_renderQuadsSmooth_1_, p_renderQuadsSmooth_3_, p_renderQuadsSmooth_6_);
 
-            if (!bakedquad.hasTintIndex() && j == -1)
-            {
-                if (separateAoLightValue)
-                {
-                    p_renderQuadsSmooth_4_.putColorMultiplierRgba(1.0F, 1.0F, 1.0F, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], 4);
-                    p_renderQuadsSmooth_4_.putColorMultiplierRgba(1.0F, 1.0F, 1.0F, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], 3);
-                    p_renderQuadsSmooth_4_.putColorMultiplierRgba(1.0F, 1.0F, 1.0F, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], 2);
-                    p_renderQuadsSmooth_4_.putColorMultiplierRgba(1.0F, 1.0F, 1.0F, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], 1);
-                }
-                else
-                {
-                    p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], 4);
-                    p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], 3);
-                    p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], 2);
-                    p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], 1);
+            if (!bakedquad.hasTintIndex() && j == -1) {
+                if (separateAoLightValue) {
+                    worldRenderer.putColorMultiplierRgba(1.0F, 1.0F, 1.0F, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], 4);
+                    worldRenderer.putColorMultiplierRgba(1.0F, 1.0F, 1.0F, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], 3);
+                    worldRenderer.putColorMultiplierRgba(1.0F, 1.0F, 1.0F, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], 2);
+                    worldRenderer.putColorMultiplierRgba(1.0F, 1.0F, 1.0F, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], 1);
+                } else {
+                    worldRenderer.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], 4);
+                    worldRenderer.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], 3);
+                    worldRenderer.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], 2);
+                    worldRenderer.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], 1);
                 }
             }
             else
@@ -256,23 +258,20 @@ public class BlockModelRenderer
                 float f1 = (float)(k >> 8 & 255) / 255.0F;
                 float f2 = (float)(k & 255) / 255.0F;
 
-                if (separateAoLightValue)
-                {
-                    p_renderQuadsSmooth_4_.putColorMultiplierRgba(f, f1, f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], 4);
-                    p_renderQuadsSmooth_4_.putColorMultiplierRgba(f, f1, f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], 3);
-                    p_renderQuadsSmooth_4_.putColorMultiplierRgba(f, f1, f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], 2);
-                    p_renderQuadsSmooth_4_.putColorMultiplierRgba(f, f1, f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], 1);
-                }
-                else
-                {
-                    p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f2, 4);
-                    p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f2, 3);
-                    p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f2, 2);
-                    p_renderQuadsSmooth_4_.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f2, 1);
+                if (separateAoLightValue) {
+                    worldRenderer.putColorMultiplierRgba(f, f1, f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0], 4);
+                    worldRenderer.putColorMultiplierRgba(f, f1, f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1], 3);
+                    worldRenderer.putColorMultiplierRgba(f, f1, f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2], 2);
+                    worldRenderer.putColorMultiplierRgba(f, f1, f2, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3], 1);
+                } else {
+                    worldRenderer.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[0] * f2, 4);
+                    worldRenderer.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[1] * f2, 3);
+                    worldRenderer.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[2] * f2, 2);
+                    worldRenderer.putColorMultiplier(blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f1, blockmodelrenderer$ambientocclusionface.vertexColorMultiplier[3] * f2, 1);
                 }
             }
 
-            p_renderQuadsSmooth_4_.putPosition(d0, d1, d2);
+            worldRenderer.putPosition(d0, d1, d2);
         }
     }
 
diff --git a/src/main/java/net/minecraft/client/renderer/ViewFrustum.java b/src/main/java/net/minecraft/client/renderer/ViewFrustum.java
index 5550579..741fc28 100644
--- a/src/main/java/net/minecraft/client/renderer/ViewFrustum.java
+++ b/src/main/java/net/minecraft/client/renderer/ViewFrustum.java
@@ -13,8 +13,11 @@ import net.minecraft.world.ChunkCoordIntPair;
 import net.minecraft.world.World;
 import net.optifine.render.VboRegion;
 
-public class ViewFrustum
-{
+import java.util.HashMap;
+import java.util.Map;
+
+// NOTE: Not related to frustums at all. Chunk rendering stuff
+public class ViewFrustum {
     protected final RenderGlobal renderGlobal;
     protected final World world;
     protected int countChunksY;
-- 
2.34.1

